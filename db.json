{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/quiet/source/css/about.css","path":"css/about.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/categories.css","path":"css/categories.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/food.css","path":"css/food.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/header.css","path":"css/header.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/home.css","path":"css/home.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/links.css","path":"css/links.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/page.css","path":"css/page.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/page_cente.css","path":"css/page_cente.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/photos.css","path":"css/photos.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/tag.css","path":"css/tag.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/tags.css","path":"css/tags.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico.bak","path":"image/favicon.ico.bak","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/photos/photo.js","path":"photos/photo.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/photos/photoslist.json","path":"photos/photoslist.json","modified":0,"renderable":1},{"_id":"themes/quiet/source/photos/t.txt","path":"photos/t.txt","modified":0,"renderable":1},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/quiet/source/css/words.css","path":"css/words.css","modified":0,"renderable":1}],"Cache":[{"_id":"themes/quiet/LICENSE","hash":"a0da6b64f5ac3c2be67e22af05669c299eaa8c84","modified":1649139832719},{"_id":"themes/quiet/_config.yml","hash":"650fb3d19fab6a62de98cd712937e042b0a27292","modified":1652675460999},{"_id":"themes/quiet/languages/en.yml","hash":"81ae86203870165bcad70cd3f3dfb1b27dbd7b92","modified":1648908659161},{"_id":"themes/quiet/languages/zh-CN.yml","hash":"6ea5c442674098d947bcba89f78fcefc4d763bb0","modified":1648908659162},{"_id":"themes/quiet/layout/.DS_Store","hash":"46cf1797a08a1ea0f0cdb2af9ebf7d59bd6d976a","modified":1649139832750},{"_id":"themes/quiet/layout/404.ejs","hash":"d24c2375e0e927085e6dbeb788fde5e119bcc9b8","modified":1649139832751},{"_id":"themes/quiet/layout/archive.ejs","hash":"bb8f521bdc7f4fe9e7a03beb5ceb63032dff9e4d","modified":1649156368290},{"_id":"themes/quiet/layout/categories.ejs","hash":"bc3bb7a3276d6aa25b805e73addbea778c198605","modified":1649139832765},{"_id":"themes/quiet/layout/about.ejs","hash":"4e1ec51bfd4823d8f0a2ab4c06c06f79bae8541a","modified":1649140834571},{"_id":"themes/quiet/layout/index.ejs","hash":"b36963002a0fafb093db68c77eb0f2d0b5e7ded6","modified":1649141218597},{"_id":"themes/quiet/layout/layout.ejs","hash":"1de4d59c593645e3dd2f7953e3c4dda73606b8c3","modified":1649139832766},{"_id":"themes/quiet/layout/links.ejs","hash":"c1db6ee6b94ac0693926ba64c46d6ddd0cf18c69","modified":1649139832767},{"_id":"themes/quiet/layout/photos.ejs","hash":"c2718a3e5fd27dbca4ed9c8aaac4254799c19a33","modified":1650884437007},{"_id":"themes/quiet/layout/post.ejs","hash":"10c5eab4b9964b3565ab3ee3e793364032ec04da","modified":1649139832767},{"_id":"themes/quiet/layout/tag.ejs","hash":"1fa7d8d5a5db1bd817090f8998d985316f33e2b0","modified":1649139832767},{"_id":"themes/quiet/layout/tags.ejs","hash":"587bd14d96946c117b1ef6d2e612cd20e23b59ab","modified":1649139832768},{"_id":"themes/quiet/.DS_Store","hash":"d6b0bd348c278071914e2dee0dfe4123fecf375f","modified":1649139832718},{"_id":"themes/quiet/layout/_partial/.DS_Store","hash":"db62fbf1993ecd5d9e70a49a58be69ac7e7a4485","modified":1649139832751},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"e7db021d901c61621ed2595038e65c3b5ac257cb","modified":1652880672221},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"d7536b46c02d8acba84d21b8ad62edefb7ce86da","modified":1649139832759},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"60f6d69505c64f628c9ace9325aa28950730852b","modified":1649139832759},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"b6bb8b8e04433b37854e8c8df79c72de182f4496","modified":1649139832761},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"be2f5a2d0d91ddb529c0508183d57ad105fedefa","modified":1649139832761},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"094e3dc189406526d3934894cf0352b26ce28f13","modified":1649139832759},{"_id":"themes/quiet/layout/_partial/post_pn.ejs","hash":"7fab46ce1199e5e792d6f7c597690ad768f9730c","modified":1649139832761},{"_id":"themes/quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1649139832762},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"c48c85b36c50cd18b018d0d3a08981dfb1a37bf5","modified":1649139832763},{"_id":"themes/quiet/README-EN.md","hash":"8a14c4a1b8880c1b389c18e832ba7e0437c6a480","modified":1649139832732},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"fdc070e8dbd81198bbd36cdf46e8b7c33ecdeaf0","modified":1649139832763},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"1e60a534616fdcf97a4d61ef25648af263ffa6e1","modified":1649139832763},{"_id":"themes/quiet/source/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1649139832781},{"_id":"themes/quiet/source/.DS_Store","hash":"2fe0ee40294946d656b103cef8719c97924075f1","modified":1649139832779},{"_id":"themes/quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1649139832780},{"_id":"themes/quiet/source/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1649139832783},{"_id":"themes/quiet/source/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1649139832783},{"_id":"themes/quiet/source/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1649139832784},{"_id":"themes/quiet/source/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1649139832784},{"_id":"themes/quiet/source/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1649139832785},{"_id":"themes/quiet/source/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1649139832785},{"_id":"themes/quiet/source/css/atom-one-dark.css","hash":"c3e2c329a09062a1702f0f51639e2068a0799fe4","modified":1649139832782},{"_id":"themes/quiet/source/css/photos.css","hash":"49ced630c7ea98d2f2a55b0badf9acafe7cb7830","modified":1650876340345},{"_id":"themes/quiet/source/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1649139832785},{"_id":"themes/quiet/source/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649139832786},{"_id":"themes/quiet/source/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1649139832786},{"_id":"themes/quiet/source/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649139832781},{"_id":"themes/quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1649139832787},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1649139832788},{"_id":"themes/quiet/source/js/.DS_Store","hash":"0f43f1407d3b3df9e865a28f4c9ef13640ad739b","modified":1649139832788},{"_id":"themes/quiet/source/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1649139832789},{"_id":"themes/quiet/source/photos/photoslist.json","hash":"7f88412952559b20de9a1ebf19e4b8f4813aa6f2","modified":1650876889201},{"_id":"themes/quiet/source/photos/photo.js","hash":"699a75848309e068c0ef1db9e1890c249dc969a9","modified":1650876999748},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"a9d8678047219b378ddf3addf4b44650b677eec7","modified":1649139832790},{"_id":"source/robots.txt","hash":"db1d1a8690484d24907e8d96fbab1ce46546c076","modified":1648982610661},{"_id":"themes/quiet/README.md","hash":"029fba4d4abe72177ae38e103d49581428ec6575","modified":1649139832747},{"_id":"source/_posts/Python爬虫学习.md","hash":"8404ee9c1ba0da256f6bd31deb4524304ca04c09","modified":1649339271833},{"_id":"source/_posts/Python爬虫学习——面向初学者.md","hash":"7201a7a0bb983a03b2c89d8c830b5b01056e2ef1","modified":1649164331261},{"_id":"source/_posts/Windows右键打开注册表配置.md","hash":"719be387ca5ab03d406e49ffb13b66846704f2b7","modified":1649159239633},{"_id":"source/_posts/Windows局域网共享文件.md","hash":"57057c203aff3c865e0416134eae5c82e4bb41c8","modified":1649159471405},{"_id":"themes/quiet/source/photos/t.txt","hash":"1abef4602d88208622a3dd75b6db65db51353dc8","modified":1650884597505},{"_id":"source/_posts/数据结构-图.md","hash":"a1f46d4e9aced613f4130b1971f832f729a56f36","modified":1652765685470},{"_id":"source/_posts/数据结构——串-KMP算法.md","hash":"73b04d7c9c1e02f4625609844447f2bf13085967","modified":1653118427878},{"_id":"source/_posts/数据结构之排序大法.md","hash":"f1aff89d83aaf294dc28f9700145e83aa38e6792","modified":1653037683445},{"_id":"source/_posts/数据结构之查找.md","hash":"abdf2c236669d9b9a6c69ce46162a7afa24b77e3","modified":1653114275598},{"_id":"source/_posts/GitHub-部署个人博客.md","hash":"def712f25b3c34355179c0a4f8492f504518901e","modified":1652675915585},{"_id":"source/donation/index.md","hash":"1951018f2a0624279bbf78d786d68d100c37aa01","modified":1652766075217},{"_id":"source/categories/index.md","hash":"098db27ce4767e092916813137a0fcdbffd45069","modified":1649158837545},{"_id":"source/links/index.md","hash":"abe78e5176468d7306d56b9375b1f9512c81137d","modified":1649156107978},{"_id":"source/_posts/C-with-lambda.md","hash":"c8fd9372aa9c5e489c45297004939c9a317cdf9e","modified":1652950408744},{"_id":"source/tags/index.md","hash":"ae58101a97844b4aacd1babc652b94f632f129ab","modified":1649156030436},{"_id":"source/_posts/图床搭建.md","hash":"fc9f4e67754f7a8416b7a585c6fbc42a51b1f51b","modified":1652854560523},{"_id":"themes/quiet/source/image/logo.png","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1649151784325},{"_id":"themes/quiet/source/image/favicon.ico.bak","hash":"15c3a5125bd5c742c1b49e6435e1f611719cdbc2","modified":1649151610368},{"_id":"themes/quiet/source/image/favicon.ico","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1649151784325},{"_id":"source/photo/index.md","hash":"83cf70535427f8bb7050d3fc626de9b65450e3c8","modified":1651160563329},{"_id":"source/about/index.md","hash":"0065a1a1900e3b1bf346fa1d49fd86e33a97cbe0","modified":1653115921877},{"_id":"source/_posts/编译Linux与Uboot.md","hash":"fd15109bda87c70ec140d749d2e690de77ce3672","modified":1649160376028},{"_id":"public/baidusitemap.xml","hash":"fcaf3548033d884e35cc1777f3be2ca82b9c1265","modified":1653118432376},{"_id":"public/sitemap.xml","hash":"4b74d421168c5116494cf27ad97ed300adcf2afa","modified":1653118432376},{"_id":"public/donation/index.html","hash":"7f9bf901bc73cd6fd73872069acf4032a5d899bd","modified":1653118432376},{"_id":"public/categories/index.html","hash":"9c7122173311720a6f7a71e5dd61b20a43853272","modified":1653118432376},{"_id":"public/links/index.html","hash":"837b21397768b841a7d769c8e17dec13d1253a31","modified":1653118432376},{"_id":"public/photo/index.html","hash":"c1748312ebb06f4edfe35ef6cb68f9c3fbcf856d","modified":1653118432376},{"_id":"public/tags/index.html","hash":"79b0389b9092b445cf7c729015ca175900f2518d","modified":1653118432376},{"_id":"public/about/index.html","hash":"64539773db308b8dfe828f6adee9bf044d843b19","modified":1653118432376},{"_id":"public/2022/05/18/C-with-lambda/index.html","hash":"9ee0844e137edab56a343daa5bf6d7df56561081","modified":1653118432376},{"_id":"public/2022/05/18/数据结构之排序大法/index.html","hash":"553392306015208433e546ac55971bc8f626a314","modified":1653118432376},{"_id":"public/2022/05/18/图床搭建/index.html","hash":"861e4c01323141a8ded00b7ace0c1d0a9bce937a","modified":1653118432376},{"_id":"public/2022/05/18/数据结构之查找/index.html","hash":"3581ec1ea04324fe8cc7d4d9342714c9e0c03847","modified":1653118432376},{"_id":"public/2022/05/16/数据结构——串-KMP算法/index.html","hash":"b6eb0e269775496d3d71bb1bb90279e741d30294","modified":1653118432376},{"_id":"public/2022/05/16/数据结构-图/index.html","hash":"ac735f8f31f7ccf66f910ff27b08872ac1850dbd","modified":1653118432376},{"_id":"public/2022/04/05/GitHub-部署个人博客/index.html","hash":"3524a46d369382df8e8659fe366c8b1b5295b640","modified":1653118432376},{"_id":"public/2022/04/05/Python爬虫学习/index.html","hash":"8fdb63810146658372c087549a41bb51ea7f45ed","modified":1653118432376},{"_id":"public/2022/04/05/Python爬虫学习——面向初学者/index.html","hash":"f44fe810a8b4ef87bf5f2aed9a7bf4176ea55d37","modified":1653118432376},{"_id":"public/2022/04/05/编译Linux与Uboot/index.html","hash":"f61e0d4fcf0aaec5d00b40c5c42b61be01967641","modified":1653118432376},{"_id":"public/2022/04/05/Windows局域网共享文件/index.html","hash":"013e148bd033186b01fc43084876e029303466c5","modified":1653118432376},{"_id":"public/2022/04/05/Windows右键打开注册表配置/index.html","hash":"cdeff91da2d4205095c0394ff08e5355f4947250","modified":1653118432376},{"_id":"public/archives/index.html","hash":"0675a568d9283248e63e28c4b26dd2aeb3a48437","modified":1653118432376},{"_id":"public/archives/page/2/index.html","hash":"0675a568d9283248e63e28c4b26dd2aeb3a48437","modified":1653118432376},{"_id":"public/archives/2022/index.html","hash":"0675a568d9283248e63e28c4b26dd2aeb3a48437","modified":1653118432376},{"_id":"public/archives/2022/page/2/index.html","hash":"0675a568d9283248e63e28c4b26dd2aeb3a48437","modified":1653118432376},{"_id":"public/archives/2022/04/index.html","hash":"0675a568d9283248e63e28c4b26dd2aeb3a48437","modified":1653118432376},{"_id":"public/archives/2022/05/index.html","hash":"0675a568d9283248e63e28c4b26dd2aeb3a48437","modified":1653118432376},{"_id":"public/categories/C/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/categories/前端/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/categories/Python/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/categories/计算机事半功倍/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/categories/数据结构与算法/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/categories/Python/爬虫/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/categories/Linux/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/index.html","hash":"709d03221ffbb0153c9db9fa6a98f36e343c0d58","modified":1653118432376},{"_id":"public/page/2/index.html","hash":"759ae80d3cc13d0cda16d71c9089c59c0dac0b64","modified":1653118432376},{"_id":"public/tags/C/index.html","hash":"643c4a609503c0a0ac1bcb98448b5a670fbd9fa6","modified":1653118432376},{"_id":"public/tags/λ/index.html","hash":"a3f1c5bc03b3d021cda8e947d937f0347b319a82","modified":1653118432376},{"_id":"public/tags/lambda/index.html","hash":"035cf2d590daa716084a99112a8ec61148afac66","modified":1653118432376},{"_id":"public/tags/前端/index.html","hash":"3888070fe266a9384c249bc9339d2e13f30c3513","modified":1653118432376},{"_id":"public/tags/GitHub/index.html","hash":"01f43060fc957a2cc4f904a3c1d63337c3fe2fcd","modified":1653118432376},{"_id":"public/tags/Hexo/index.html","hash":"bc1d81e8e32e99ec2339d892ce5ed85b07bf27e1","modified":1653118432376},{"_id":"public/tags/Python/index.html","hash":"412b65c501500a80cbae8f9b37f1b09edbe5bc67","modified":1653118432376},{"_id":"public/tags/爬虫/index.html","hash":"984f6fcc5e273db042ee54485dca09dd1b500edf","modified":1653118432376},{"_id":"public/tags/计算机妙招/index.html","hash":"7a5c08bc4dc92b5a23400b14b7335946a6e12dcf","modified":1653118432376},{"_id":"public/tags/注册表/index.html","hash":"91819fd9153d3be619c500e13ab669ef42e63ea5","modified":1653118432376},{"_id":"public/tags/Windows/index.html","hash":"6384ef4c7cd126acde7062c9e0b18097317ba77b","modified":1653118432376},{"_id":"public/tags/局域网共享/index.html","hash":"a4e0f39fa1ee674fec9302483dd47f4e26ed898a","modified":1653118432376},{"_id":"public/tags/图床/index.html","hash":"8488dbc1adf4c518afab8c58efe911304de4c288","modified":1653118432376},{"_id":"public/tags/数据结构/index.html","hash":"228b5ff7cd288ef2305baec9f83840fb2d9acf4b","modified":1653118432376},{"_id":"public/tags/考研/index.html","hash":"023ddb3d0abfcb7c989af983aa6e86aa965b3782","modified":1653118432376},{"_id":"public/tags/图/index.html","hash":"2df472194b6e6f828c1eaeeb68b782faf5aff8fc","modified":1653118432376},{"_id":"public/tags/字符串/index.html","hash":"f71dc59c221cc04bf205c518f3fc1a6ebdb0d3a2","modified":1653118432376},{"_id":"public/tags/KMP/index.html","hash":"68ae3d25a2a0060353a96b298a4dfc7ef40e0952","modified":1653118432376},{"_id":"public/tags/排序/index.html","hash":"66634e427d6f1e415dc1781aec659dcb763988e5","modified":1653118432376},{"_id":"public/tags/红黑树/index.html","hash":"21c00c6487800ddca04c9708f4ba1c8c16927000","modified":1653118432376},{"_id":"public/tags/查找/index.html","hash":"0ed18ecbd8ea434cf974081ff289bc1c261cba22","modified":1653118432376},{"_id":"public/tags/平衡二叉树/index.html","hash":"b57a860f07584b09db4e9281bb3d09f6679793f6","modified":1653118432376},{"_id":"public/tags/二分法/index.html","hash":"104a0d7df739902fb7fc5e3b4d8411da6866b65a","modified":1653118432376},{"_id":"public/tags/Linux/index.html","hash":"a39b494e0b6f103b39dcb76d5bd24082c478d4d7","modified":1653118432376},{"_id":"public/tags/Uboot/index.html","hash":"895083796898100ebcb70f30d2717dff5deb06af","modified":1653118432376},{"_id":"public/tags/编译/index.html","hash":"cf4930d4a8a33912f42dd3c648373692279d9c3a","modified":1653118432376},{"_id":"public/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1653037985895},{"_id":"public/robots.txt","hash":"db1d1a8690484d24907e8d96fbab1ce46546c076","modified":1653037985895},{"_id":"public/photos/t.txt","hash":"1abef4602d88208622a3dd75b6db65db51353dc8","modified":1653037985895},{"_id":"public/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1653037985895},{"_id":"public/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1653037985895},{"_id":"public/image/logo.png","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1653037985895},{"_id":"public/image/favicon.ico","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1653037985895},{"_id":"public/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1653037985895},{"_id":"public/css/atom-one-dark.css","hash":"da8603ef348b38d6ef090fa9172a6521e53b6c89","modified":1653037985895},{"_id":"public/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1653037985895},{"_id":"public/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1653037985895},{"_id":"public/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1653037985895},{"_id":"public/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1653037985895},{"_id":"public/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1653037985895},{"_id":"public/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1653037985895},{"_id":"public/css/photos.css","hash":"39ce5688bf4a61eaf3dc634b431431c5a26ecb2f","modified":1653037985895},{"_id":"public/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1653037985895},{"_id":"public/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1653037985895},{"_id":"public/photos/photo.js","hash":"3e9e55d65cf1204d0f968c4928f7ef5af0456b5d","modified":1653037985895},{"_id":"public/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1653037985895},{"_id":"public/photos/photoslist.json","hash":"97043021c0250f9bc9dfc499064bf1ad83b69e10","modified":1653037985895},{"_id":"public/image/favicon.ico.bak","hash":"15c3a5125bd5c742c1b49e6435e1f611719cdbc2","modified":1653037985895},{"_id":"public/js/jquery.min.js","hash":"948b382d052e9af0de5353f29f986d3080e7221c","modified":1653037985895},{"_id":"source/_posts/英语一单词.md","hash":"d5ed016143b0a5383614932ae21457601c0710f1","modified":1653117556945},{"_id":"public/2022/05/21/英语一单词/index.html","hash":"42de344b5a8093068fda551299331a1b6b025c16","modified":1653118432376},{"_id":"public/categories/分类，最好是一个/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653115693804},{"_id":"public/page/3/index.html","hash":"fbec35a5e3b97aeb482e454f53e1a56da8abb99d","modified":1653118432376},{"_id":"public/tags/标签，可以多个/index.html","hash":"7190b04790ffacadeaf176beb0f7482b20798c59","modified":1653115693804},{"_id":"themes/quiet/layout/words.ejs","hash":"f21b8d74853506f831dde25d9154a1bb6bc7b2b3","modified":1653117314971},{"_id":"themes/quiet/source/css/words.css","hash":"cd6041dcc7ea78cfecc6a861ea41ba3cfbc8e31d","modified":1653116435914},{"_id":"public/css/words.css","hash":"ddf6dff030d41458b95ddeba52d8ac0b88455578","modified":1653116582336},{"_id":"public/categories/英语/index.html","hash":"6ad8ebe0c3712c1759882d6998797a0b28c5273b","modified":1653118432376},{"_id":"public/tags/英语/index.html","hash":"bb5b41ec4a3ff1528326e29b70cd294f4818e6fb","modified":1653118432376}],"Category":[{"name":"C++","_id":"cl3e84y1u000428u5dq7ndphr"},{"name":"前端","_id":"cl3e84y20000c28u51db14ujx"},{"name":"Python","_id":"cl3e84y23000i28u54t6t77o5"},{"name":"计算机事半功倍","_id":"cl3e84y27000q28u5b0g36al5"},{"name":"数据结构与算法","_id":"cl3e84y2a000z28u539f687da"},{"name":"爬虫","parent":"cl3e84y23000i28u54t6t77o5","_id":"cl3e84y2a001528u51o5ndval"},{"name":"Linux","_id":"cl3e84y2o002a28u5bknd9f1o"},{"name":"分类，最好是一个","_id":"cl3fiehfw0001qcu56djx1w34"},{"name":"英语","_id":"cl3fj8xvr0000lku595n4fdqs"}],"Data":[],"Page":[{"title":"捐赠","date":"2022-04-17T15:00:02.000Z","_content":"\n\n\n## 捐赠\n\n​\t本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。\n\n​\t如果你愿意的话，可以为我捐赠。\n\n无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。\n\n![微信收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png)\n\n![支付宝收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg)\n\n\n\n","source":"donation/index.md","raw":"---\ntitle: 捐赠\ndate: 2022-04-17 23:00:02\n---\n\n\n\n## 捐赠\n\n​\t本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。\n\n​\t如果你愿意的话，可以为我捐赠。\n\n无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。\n\n![微信收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png)\n\n![支付宝收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg)\n\n\n\n","updated":"2022-05-17T05:41:15.217Z","path":"donation/index.html","comments":1,"layout":"page","_id":"cl3e84y1l000028u51omj3zpg","content":"<h2 id=\"捐赠\"><a href=\"#捐赠\" class=\"headerlink\" title=\"捐赠\"></a>捐赠</h2><p>​    本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。</p>\n<p>​    如果你愿意的话，可以为我捐赠。</p>\n<p>无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png\" alt=\"微信收款码\"></p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg\" alt=\"支付宝收款码\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"捐赠\"><a href=\"#捐赠\" class=\"headerlink\" title=\"捐赠\"></a>捐赠</h2><p>​    本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。</p>\n<p>​    如果你愿意的话，可以为我捐赠。</p>\n<p>无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png\" alt=\"微信收款码\"></p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg\" alt=\"支付宝收款码\"></p>\n"},{"title":"分类","date":"2022-04-03T08:31:27.000Z","layout":"categories","author":"yoyo","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-04-03 16:31:27\nlayout: \"categories\"\nauthor: yoyo\n---\n","updated":"2022-04-05T11:40:37.545Z","path":"categories/index.html","comments":1,"_id":"cl3e84y1r000228u556fjgae8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2022-04-05T07:36:05.000Z","layout":"links","author":"yoyo","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2022-04-05 15:36:05\nlayout: \"links\"\nauthor: yoyo\n---\n","updated":"2022-04-05T10:55:07.978Z","path":"links/index.html","comments":1,"_id":"cl3e84y1w000628u5cqgxhib3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"照片墙","date":"2022-04-03T08:32:46.000Z","aubot":"Yoyo","portrait":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051857441.png","describe":null,"_content":"\n\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg)\n\n","source":"photo/index.md","raw":"---\n# title: 照片墙\n# date: 2022-04-17 22:59:51\n# layout: \"photos\"\n# type: photot\ntitle: 照片墙\ndate: 2022-04-03 16:32:46\naubot: Yoyo\nportrait: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051857441.png\"\ndescribe: \n---\n\n\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg)\n\n","updated":"2022-04-28T15:42:43.329Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cl3e84y1x000828u512zg6492","content":"<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg\" alt=\"图片无法加载\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg\" alt=\"图片无法加载\"></p>\n"},{"title":"标签","date":"2022-04-03T08:10:46.000Z","layout":"tags","author":"yoyo","_content":"\n# 选择下列你喜欢的标签吧\n\n\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-04-03 16:10:46\nlayout: \"tags\"\nauthor: yoyo\n---\n\n# 选择下列你喜欢的标签吧\n\n\n","updated":"2022-04-05T10:53:50.436Z","path":"tags/index.html","comments":1,"_id":"cl3e84y1z000a28u5egos5497","content":"<h1 id=\"选择下列你喜欢的标签吧\"><a href=\"#选择下列你喜欢的标签吧\" class=\"headerlink\" title=\"选择下列你喜欢的标签吧\"></a>选择下列你喜欢的标签吧</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"选择下列你喜欢的标签吧\"><a href=\"#选择下列你喜欢的标签吧\" class=\"headerlink\" title=\"选择下列你喜欢的标签吧\"></a>选择下列你喜欢的标签吧</h1>"},{"title":"个人简介","date":"2022-04-03T08:32:46.000Z","aubot":"Yoyo","layout":"about","portrait":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051857441.png","describe":null,"_content":"\n####  姓名 Name \n\n​\tHello，我叫`梁敏智`。我很多社交软件都使用 ***yoyo***作为昵称，当然***雨探青鸟***也是我常用的昵称。\n\n​\tHello, my name is `Minzhi Liang`. ***Yoyo*** is my screen name for many social media platforms, as is ***Yutan Jade Bird***.\n\n#### 身份 Identity \n\n​\t我现在是一名来自***南京邮电大学***的***大学生***，一名小白程序猿。\n\n​\tNow, I'm a college student from ***Nanjing University of Posts and Telecommunications***, a rookie    programmer.\n\n#### 技能 Ability\n\n​\t我常用的语言有：英语（当然，这个对我来说很难）、`C/C++`、`Python`、`Matlab`。当然，`Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell`等等，我也是能够熟练使用的。\n\n​\t常在`Windows`、`Linux`平台进行开发，我觉得`Linux`是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。\n\n> 经常使用`树莓派`系统，`STM32`单片机；\n>\n> 喜欢***算法***，会经常在***力扣***刷题；\n>\n> 参加过***数学建模***比赛，这也是我经常使用`Matlab`的原因；\n>\n> 使用过的`Linux`发行版有：`Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali`等等;\n\n​\tI usually use the language: English (Oh, It's so difficult for me), `C/C++`、`Python`、`Matlab`. Certainly, `Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell` and so on. They are that I am a master of using. \n\n​\t`Windows` and `Linux` are platforms which I usually  develop on. It's `Linux` that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.\n\n> Use Raspberry PI OS, STM32 MCU.\n>\n> Like data structures and algorithms, solve the algorithm problem on `leetcode`.\n>\n> Participating in mathematical modeling is why I usually use `Mathlab`.\n>\n> Used `Linux` release: `Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali` and so on.\n\n","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2022-04-03 16:32:46\naubot: Yoyo\nlayout: \"about\"\nportrait: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051857441.png\"\ndescribe: \n---\n\n####  姓名 Name \n\n​\tHello，我叫`梁敏智`。我很多社交软件都使用 ***yoyo***作为昵称，当然***雨探青鸟***也是我常用的昵称。\n\n​\tHello, my name is `Minzhi Liang`. ***Yoyo*** is my screen name for many social media platforms, as is ***Yutan Jade Bird***.\n\n#### 身份 Identity \n\n​\t我现在是一名来自***南京邮电大学***的***大学生***，一名小白程序猿。\n\n​\tNow, I'm a college student from ***Nanjing University of Posts and Telecommunications***, a rookie    programmer.\n\n#### 技能 Ability\n\n​\t我常用的语言有：英语（当然，这个对我来说很难）、`C/C++`、`Python`、`Matlab`。当然，`Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell`等等，我也是能够熟练使用的。\n\n​\t常在`Windows`、`Linux`平台进行开发，我觉得`Linux`是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。\n\n> 经常使用`树莓派`系统，`STM32`单片机；\n>\n> 喜欢***算法***，会经常在***力扣***刷题；\n>\n> 参加过***数学建模***比赛，这也是我经常使用`Matlab`的原因；\n>\n> 使用过的`Linux`发行版有：`Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali`等等;\n\n​\tI usually use the language: English (Oh, It's so difficult for me), `C/C++`、`Python`、`Matlab`. Certainly, `Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell` and so on. They are that I am a master of using. \n\n​\t`Windows` and `Linux` are platforms which I usually  develop on. It's `Linux` that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.\n\n> Use Raspberry PI OS, STM32 MCU.\n>\n> Like data structures and algorithms, solve the algorithm problem on `leetcode`.\n>\n> Participating in mathematical modeling is why I usually use `Mathlab`.\n>\n> Used `Linux` release: `Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali` and so on.\n\n","updated":"2022-05-21T06:52:01.877Z","path":"about/index.html","_id":"cl3e84y20000e28u57y376cbl","comments":1,"content":"<h4 id=\"姓名-Name\"><a href=\"#姓名-Name\" class=\"headerlink\" title=\"姓名 Name\"></a>姓名 Name</h4><p>​    Hello，我叫<code>梁敏智</code>。我很多社交软件都使用 <strong><em>yoyo</em></strong>作为昵称，当然<strong><em>雨探青鸟</em></strong>也是我常用的昵称。</p>\n<p>​    Hello, my name is <code>Minzhi Liang</code>. <strong><em>Yoyo</em></strong> is my screen name for many social media platforms, as is <strong><em>Yutan Jade Bird</em></strong>.</p>\n<h4 id=\"身份-Identity\"><a href=\"#身份-Identity\" class=\"headerlink\" title=\"身份 Identity\"></a>身份 Identity</h4><p>​    我现在是一名来自<strong><em>南京邮电大学</em></strong>的<strong><em>大学生</em></strong>，一名小白程序猿。</p>\n<p>​    Now, I’m a college student from <strong><em>Nanjing University of Posts and Telecommunications</em></strong>, a rookie    programmer.</p>\n<h4 id=\"技能-Ability\"><a href=\"#技能-Ability\" class=\"headerlink\" title=\"技能 Ability\"></a>技能 Ability</h4><p>​    我常用的语言有：英语（当然，这个对我来说很难）、<code>C/C++</code>、<code>Python</code>、<code>Matlab</code>。当然，<code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code>等等，我也是能够熟练使用的。</p>\n<p>​    常在<code>Windows</code>、<code>Linux</code>平台进行开发，我觉得<code>Linux</code>是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。</p>\n<blockquote>\n<p>经常使用<code>树莓派</code>系统，<code>STM32</code>单片机；</p>\n<p>喜欢<strong><em>算法</em></strong>，会经常在<strong><em>力扣</em></strong>刷题；</p>\n<p>参加过<strong><em>数学建模</em></strong>比赛，这也是我经常使用<code>Matlab</code>的原因；</p>\n<p>使用过的<code>Linux</code>发行版有：<code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code>等等;</p>\n</blockquote>\n<p>​    I usually use the language: English (Oh, It’s so difficult for me), <code>C/C++</code>、<code>Python</code>、<code>Matlab</code>. Certainly, <code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code> and so on. They are that I am a master of using. </p>\n<p>​    <code>Windows</code> and <code>Linux</code> are platforms which I usually  develop on. It’s <code>Linux</code> that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.</p>\n<blockquote>\n<p>Use Raspberry PI OS, STM32 MCU.</p>\n<p>Like data structures and algorithms, solve the algorithm problem on <code>leetcode</code>.</p>\n<p>Participating in mathematical modeling is why I usually use <code>Mathlab</code>.</p>\n<p>Used <code>Linux</code> release: <code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code> and so on.</p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h4 id=\"姓名-Name\"><a href=\"#姓名-Name\" class=\"headerlink\" title=\"姓名 Name\"></a>姓名 Name</h4><p>​    Hello，我叫<code>梁敏智</code>。我很多社交软件都使用 <strong><em>yoyo</em></strong>作为昵称，当然<strong><em>雨探青鸟</em></strong>也是我常用的昵称。</p>\n<p>​    Hello, my name is <code>Minzhi Liang</code>. <strong><em>Yoyo</em></strong> is my screen name for many social media platforms, as is <strong><em>Yutan Jade Bird</em></strong>.</p>\n<h4 id=\"身份-Identity\"><a href=\"#身份-Identity\" class=\"headerlink\" title=\"身份 Identity\"></a>身份 Identity</h4><p>​    我现在是一名来自<strong><em>南京邮电大学</em></strong>的<strong><em>大学生</em></strong>，一名小白程序猿。</p>\n<p>​    Now, I’m a college student from <strong><em>Nanjing University of Posts and Telecommunications</em></strong>, a rookie    programmer.</p>\n<h4 id=\"技能-Ability\"><a href=\"#技能-Ability\" class=\"headerlink\" title=\"技能 Ability\"></a>技能 Ability</h4><p>​    我常用的语言有：英语（当然，这个对我来说很难）、<code>C/C++</code>、<code>Python</code>、<code>Matlab</code>。当然，<code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code>等等，我也是能够熟练使用的。</p>\n<p>​    常在<code>Windows</code>、<code>Linux</code>平台进行开发，我觉得<code>Linux</code>是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。</p>\n<blockquote>\n<p>经常使用<code>树莓派</code>系统，<code>STM32</code>单片机；</p>\n<p>喜欢<strong><em>算法</em></strong>，会经常在<strong><em>力扣</em></strong>刷题；</p>\n<p>参加过<strong><em>数学建模</em></strong>比赛，这也是我经常使用<code>Matlab</code>的原因；</p>\n<p>使用过的<code>Linux</code>发行版有：<code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code>等等;</p>\n</blockquote>\n<p>​    I usually use the language: English (Oh, It’s so difficult for me), <code>C/C++</code>、<code>Python</code>、<code>Matlab</code>. Certainly, <code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code> and so on. They are that I am a master of using. </p>\n<p>​    <code>Windows</code> and <code>Linux</code> are platforms which I usually  develop on. It’s <code>Linux</code> that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.</p>\n<blockquote>\n<p>Use Raspberry PI OS, STM32 MCU.</p>\n<p>Like data structures and algorithms, solve the algorithm problem on <code>leetcode</code>.</p>\n<p>Participating in mathematical modeling is why I usually use <code>Mathlab</code>.</p>\n<p>Used <code>Linux</code> release: <code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code> and so on.</p>\n</blockquote>\n"}],"Post":[{"title":"C++ with lambda","excerpt":"简单介绍一下 C++ lambda的用法","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205182109394.png","date":"2022-05-18T12:41:06.000Z","_content":"\n# 什么是`λ`演算\n\n  首先，这个`λ`演算是非常牛逼的一个东西，可以看一下[维基百科——λ](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)的介绍\n\n# `C++` 适用 `λ` 表达式\n\n  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。\n\t\n  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数`FUN`。但是，一个函数就需要一个名字，你封装成的另一个函数`FUN`就需要一个名字，但是这个`FUN`函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。\n\n## 简单用法\n\n```c++\nint function() {\n\tauto add = [](int a, int b){\n        if(a % 2) return a+b;\n        return a;\n    };\n\tcout << add(3,4);\n\treturn 0;\n}\n\n// 上面这个结果就会输出 7\n// 用到这里你会发现lambda没有什么牛逼之处\n// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用\n// 那么它将带来很大的遍历，你不需要考虑如何去命名\n```\n\n## 细节用法\n\n​\t可能不太理解为什么像上述写法这么写 `[](){}`，这个为什么构成`lambda`表达式\n\n- `[]`部分：这里是表示捕获部分，为什么需要捕获呢？\n\n  > 因为`add`函数也许需要用到`function`函数中的东西。\n  >\n  > 有人发出疑问？不是可以传参吗？\n  >\n  > 但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长\n  >\n  > 而`[]`很好的解决这个问题\n  >\n  > - `[]`：为空，那么就是不捕获任何参数，就是`lambda`表达式中不能使用外部的变量\n  > - `[=]`：值捕获，并且捕获所有变量\n  > - `[&]`：引用捕获，也是捕获所有变量\n  > - `[this]`：捕获当前的类的指针\n  > - `[a]`：只捕获`a`的值\n  > - `[&a]`：捕获`a`的引用\n  > - `[=, &a, &b]`：除了`a,b`引用传递外，其余的值传递\n  > - `[&, a, b]`：除了`a,b`值传递外，其余的引用传递\n\n- `()`部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以\n\n- `{}`部分：代码块\n\n---\n\n​\t除此之外，还和普通函数一样，有说明符和返回值的约束。\n\n```c++\n// 说明符的介绍\nauto f = [&]() mutable\n{\n    return 1;\n}\n```\n\n- `mutable`：允许 函数体 修改各个复制捕获的对象，以及调用其非 `const` 成员函数；\n- `constexpr`：显式指定函数调用运算符为 `constexpr`函数。此说明符不存在时，若函数调用运算符恰好满足针对 `constexpr`函数的所有要求，则它也会是 `constexpr`； (C++17 起)\n- `consteval`：指定函数调用运算符为立即函数。不能同时使用 `consteval` 和 `constexpr`。(C++20 起)\n\n```c++\n// 返回值介绍\n// 限制返回 int\nauto f = [&]() -> int\n{\n    return 1;\n}\n```\n\n## 补充说明\n\n​\t有人发现了，前面都是使用`auto`关键词声明的，那么可不可以声明为具体类型了，答案是***也可以***的。既然是匿名函数，肯定没有固定的`typeid`，经过测试，那怕完全相同的两个函数，其`typeid`都是***不一样***的。就像`int a = 1; int b = 1;`中`a,b`不是用一个东西，仅仅是两个变量的值一样，但是`a,b`的`typeid`是一样的。`auto f1 = [](){}; auto f2 = [](){};`中，`f1, f2`他们仅仅是地址对应的值相同而已，都是只执行了`[](){}`这个函数。\n\n​\t但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：***函数指针***\n\n- 注意，这里的返回值`-> int`不能省略\n- 而且，如果下述实现，是有`typeid(f)==typeid(g)`\n- 并且还有`typeid(f) == typeid(g) == typeid(h)`\n- 至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。\n\n```c++\nint (*f)() = []() -> int {return 1;};\nint (*g)() = []() -> int {return 1;};\n\nint a(){return 1;}\nint (*h)() = a; // 也可写做 int(*h)() = &a; 因为函数名本来就是地址\n```\n\n","source":"_posts/C-with-lambda.md","raw":"---\ntitle: C++ with lambda\ntags: \n- C++\n- λ\n- lambda\nexcerpt: 简单介绍一下 C++ lambda的用法\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205182109394.png\ncategories: C++\ndate: 2022-05-18 20:41:06\n---\n\n# 什么是`λ`演算\n\n  首先，这个`λ`演算是非常牛逼的一个东西，可以看一下[维基百科——λ](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)的介绍\n\n# `C++` 适用 `λ` 表达式\n\n  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。\n\t\n  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数`FUN`。但是，一个函数就需要一个名字，你封装成的另一个函数`FUN`就需要一个名字，但是这个`FUN`函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。\n\n## 简单用法\n\n```c++\nint function() {\n\tauto add = [](int a, int b){\n        if(a % 2) return a+b;\n        return a;\n    };\n\tcout << add(3,4);\n\treturn 0;\n}\n\n// 上面这个结果就会输出 7\n// 用到这里你会发现lambda没有什么牛逼之处\n// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用\n// 那么它将带来很大的遍历，你不需要考虑如何去命名\n```\n\n## 细节用法\n\n​\t可能不太理解为什么像上述写法这么写 `[](){}`，这个为什么构成`lambda`表达式\n\n- `[]`部分：这里是表示捕获部分，为什么需要捕获呢？\n\n  > 因为`add`函数也许需要用到`function`函数中的东西。\n  >\n  > 有人发出疑问？不是可以传参吗？\n  >\n  > 但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长\n  >\n  > 而`[]`很好的解决这个问题\n  >\n  > - `[]`：为空，那么就是不捕获任何参数，就是`lambda`表达式中不能使用外部的变量\n  > - `[=]`：值捕获，并且捕获所有变量\n  > - `[&]`：引用捕获，也是捕获所有变量\n  > - `[this]`：捕获当前的类的指针\n  > - `[a]`：只捕获`a`的值\n  > - `[&a]`：捕获`a`的引用\n  > - `[=, &a, &b]`：除了`a,b`引用传递外，其余的值传递\n  > - `[&, a, b]`：除了`a,b`值传递外，其余的引用传递\n\n- `()`部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以\n\n- `{}`部分：代码块\n\n---\n\n​\t除此之外，还和普通函数一样，有说明符和返回值的约束。\n\n```c++\n// 说明符的介绍\nauto f = [&]() mutable\n{\n    return 1;\n}\n```\n\n- `mutable`：允许 函数体 修改各个复制捕获的对象，以及调用其非 `const` 成员函数；\n- `constexpr`：显式指定函数调用运算符为 `constexpr`函数。此说明符不存在时，若函数调用运算符恰好满足针对 `constexpr`函数的所有要求，则它也会是 `constexpr`； (C++17 起)\n- `consteval`：指定函数调用运算符为立即函数。不能同时使用 `consteval` 和 `constexpr`。(C++20 起)\n\n```c++\n// 返回值介绍\n// 限制返回 int\nauto f = [&]() -> int\n{\n    return 1;\n}\n```\n\n## 补充说明\n\n​\t有人发现了，前面都是使用`auto`关键词声明的，那么可不可以声明为具体类型了，答案是***也可以***的。既然是匿名函数，肯定没有固定的`typeid`，经过测试，那怕完全相同的两个函数，其`typeid`都是***不一样***的。就像`int a = 1; int b = 1;`中`a,b`不是用一个东西，仅仅是两个变量的值一样，但是`a,b`的`typeid`是一样的。`auto f1 = [](){}; auto f2 = [](){};`中，`f1, f2`他们仅仅是地址对应的值相同而已，都是只执行了`[](){}`这个函数。\n\n​\t但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：***函数指针***\n\n- 注意，这里的返回值`-> int`不能省略\n- 而且，如果下述实现，是有`typeid(f)==typeid(g)`\n- 并且还有`typeid(f) == typeid(g) == typeid(h)`\n- 至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。\n\n```c++\nint (*f)() = []() -> int {return 1;};\nint (*g)() = []() -> int {return 1;};\n\nint a(){return 1;}\nint (*h)() = a; // 也可写做 int(*h)() = &a; 因为函数名本来就是地址\n```\n\n","slug":"C-with-lambda","published":1,"updated":"2022-05-19T08:53:28.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y1o000128u5a1nobql6","content":"<h1 id=\"什么是λ演算\"><a href=\"#什么是λ演算\" class=\"headerlink\" title=\"什么是λ演算\"></a>什么是<code>λ</code>演算</h1><p>  首先，这个<code>λ</code>演算是非常牛逼的一个东西，可以看一下<a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\">维基百科——λ</a>的介绍</p>\n<h1 id=\"C-适用-λ-表达式\"><a href=\"#C-适用-λ-表达式\" class=\"headerlink\" title=\"C++ 适用 λ 表达式\"></a><code>C++</code> 适用 <code>λ</code> 表达式</h1><p>  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。</p>\n<p>  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数<code>FUN</code>。但是，一个函数就需要一个名字，你封装成的另一个函数<code>FUN</code>就需要一个名字，但是这个<code>FUN</code>函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> add = [](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a % <span class=\"number\">2</span>) <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面这个结果就会输出 7</span></span><br><span class=\"line\"><span class=\"comment\">// 用到这里你会发现lambda没有什么牛逼之处</span></span><br><span class=\"line\"><span class=\"comment\">// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用</span></span><br><span class=\"line\"><span class=\"comment\">// 那么它将带来很大的遍历，你不需要考虑如何去命名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"细节用法\"><a href=\"#细节用法\" class=\"headerlink\" title=\"细节用法\"></a>细节用法</h2><p>​    可能不太理解为什么像上述写法这么写 <code>[]()&#123;&#125;</code>，这个为什么构成<code>lambda</code>表达式</p>\n<ul>\n<li><p><code>[]</code>部分：这里是表示捕获部分，为什么需要捕获呢？</p>\n<blockquote>\n<p>因为<code>add</code>函数也许需要用到<code>function</code>函数中的东西。</p>\n<p>有人发出疑问？不是可以传参吗？</p>\n<p>但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长</p>\n<p>而<code>[]</code>很好的解决这个问题</p>\n<ul>\n<li><code>[]</code>：为空，那么就是不捕获任何参数，就是<code>lambda</code>表达式中不能使用外部的变量</li>\n<li><code>[=]</code>：值捕获，并且捕获所有变量</li>\n<li><code>[&amp;]</code>：引用捕获，也是捕获所有变量</li>\n<li><code>[this]</code>：捕获当前的类的指针</li>\n<li><code>[a]</code>：只捕获<code>a</code>的值</li>\n<li><code>[&amp;a]</code>：捕获<code>a</code>的引用</li>\n<li><code>[=, &amp;a, &amp;b]</code>：除了<code>a,b</code>引用传递外，其余的值传递</li>\n<li><code>[&amp;, a, b]</code>：除了<code>a,b</code>值传递外，其余的引用传递</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>()</code>部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以</p>\n</li>\n<li><p><code>&#123;&#125;</code>部分：代码块</p>\n</li>\n</ul>\n<hr>\n<p>​    除此之外，还和普通函数一样，有说明符和返回值的约束。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 说明符的介绍</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mutable</code>：允许 函数体 修改各个复制捕获的对象，以及调用其非 <code>const</code> 成员函数；</li>\n<li><code>constexpr</code>：显式指定函数调用运算符为 <code>constexpr</code>函数。此说明符不存在时，若函数调用运算符恰好满足针对 <code>constexpr</code>函数的所有要求，则它也会是 <code>constexpr</code>； (C++17 起)</li>\n<li><code>consteval</code>：指定函数调用运算符为立即函数。不能同时使用 <code>consteval</code> 和 <code>constexpr</code>。(C++20 起)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回值介绍</span></span><br><span class=\"line\"><span class=\"comment\">// 限制返回 int</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() -&gt; <span class=\"type\">int</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>​    有人发现了，前面都是使用<code>auto</code>关键词声明的，那么可不可以声明为具体类型了，答案是<strong><em>也可以</em></strong>的。既然是匿名函数，肯定没有固定的<code>typeid</code>，经过测试，那怕完全相同的两个函数，其<code>typeid</code>都是<strong><em>不一样</em></strong>的。就像<code>int a = 1; int b = 1;</code>中<code>a,b</code>不是用一个东西，仅仅是两个变量的值一样，但是<code>a,b</code>的<code>typeid</code>是一样的。<code>auto f1 = []()&#123;&#125;; auto f2 = []()&#123;&#125;;</code>中，<code>f1, f2</code>他们仅仅是地址对应的值相同而已，都是只执行了<code>[]()&#123;&#125;</code>这个函数。</p>\n<p>​    但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：<strong><em>函数指针</em></strong></p>\n<ul>\n<li>注意，这里的返回值<code>-&gt; int</code>不能省略</li>\n<li>而且，如果下述实现，是有<code>typeid(f)==typeid(g)</code></li>\n<li>并且还有<code>typeid(f) == typeid(g) == typeid(h)</code></li>\n<li>至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> (*f)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*g)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*h)() = a; <span class=\"comment\">// 也可写做 int(*h)() = &amp;a; 因为函数名本来就是地址</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h1 id=\"什么是λ演算\"><a href=\"#什么是λ演算\" class=\"headerlink\" title=\"什么是λ演算\"></a>什么是<code>λ</code>演算</h1><p>  首先，这个<code>λ</code>演算是非常牛逼的一个东西，可以看一下<a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\">维基百科——λ</a>的介绍</p>\n<h1 id=\"C-适用-λ-表达式\"><a href=\"#C-适用-λ-表达式\" class=\"headerlink\" title=\"C++ 适用 λ 表达式\"></a><code>C++</code> 适用 <code>λ</code> 表达式</h1><p>  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。</p>\n<p>  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数<code>FUN</code>。但是，一个函数就需要一个名字，你封装成的另一个函数<code>FUN</code>就需要一个名字，但是这个<code>FUN</code>函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> add = [](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a % <span class=\"number\">2</span>) <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面这个结果就会输出 7</span></span><br><span class=\"line\"><span class=\"comment\">// 用到这里你会发现lambda没有什么牛逼之处</span></span><br><span class=\"line\"><span class=\"comment\">// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用</span></span><br><span class=\"line\"><span class=\"comment\">// 那么它将带来很大的遍历，你不需要考虑如何去命名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"细节用法\"><a href=\"#细节用法\" class=\"headerlink\" title=\"细节用法\"></a>细节用法</h2><p>​    可能不太理解为什么像上述写法这么写 <code>[]()&#123;&#125;</code>，这个为什么构成<code>lambda</code>表达式</p>\n<ul>\n<li><p><code>[]</code>部分：这里是表示捕获部分，为什么需要捕获呢？</p>\n<blockquote>\n<p>因为<code>add</code>函数也许需要用到<code>function</code>函数中的东西。</p>\n<p>有人发出疑问？不是可以传参吗？</p>\n<p>但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长</p>\n<p>而<code>[]</code>很好的解决这个问题</p>\n<ul>\n<li><code>[]</code>：为空，那么就是不捕获任何参数，就是<code>lambda</code>表达式中不能使用外部的变量</li>\n<li><code>[=]</code>：值捕获，并且捕获所有变量</li>\n<li><code>[&amp;]</code>：引用捕获，也是捕获所有变量</li>\n<li><code>[this]</code>：捕获当前的类的指针</li>\n<li><code>[a]</code>：只捕获<code>a</code>的值</li>\n<li><code>[&amp;a]</code>：捕获<code>a</code>的引用</li>\n<li><code>[=, &amp;a, &amp;b]</code>：除了<code>a,b</code>引用传递外，其余的值传递</li>\n<li><code>[&amp;, a, b]</code>：除了<code>a,b</code>值传递外，其余的引用传递</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>()</code>部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以</p>\n</li>\n<li><p><code>&#123;&#125;</code>部分：代码块</p>\n</li>\n</ul>\n<hr>\n<p>​    除此之外，还和普通函数一样，有说明符和返回值的约束。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 说明符的介绍</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mutable</code>：允许 函数体 修改各个复制捕获的对象，以及调用其非 <code>const</code> 成员函数；</li>\n<li><code>constexpr</code>：显式指定函数调用运算符为 <code>constexpr</code>函数。此说明符不存在时，若函数调用运算符恰好满足针对 <code>constexpr</code>函数的所有要求，则它也会是 <code>constexpr</code>； (C++17 起)</li>\n<li><code>consteval</code>：指定函数调用运算符为立即函数。不能同时使用 <code>consteval</code> 和 <code>constexpr</code>。(C++20 起)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回值介绍</span></span><br><span class=\"line\"><span class=\"comment\">// 限制返回 int</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() -&gt; <span class=\"type\">int</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>​    有人发现了，前面都是使用<code>auto</code>关键词声明的，那么可不可以声明为具体类型了，答案是<strong><em>也可以</em></strong>的。既然是匿名函数，肯定没有固定的<code>typeid</code>，经过测试，那怕完全相同的两个函数，其<code>typeid</code>都是<strong><em>不一样</em></strong>的。就像<code>int a = 1; int b = 1;</code>中<code>a,b</code>不是用一个东西，仅仅是两个变量的值一样，但是<code>a,b</code>的<code>typeid</code>是一样的。<code>auto f1 = []()&#123;&#125;; auto f2 = []()&#123;&#125;;</code>中，<code>f1, f2</code>他们仅仅是地址对应的值相同而已，都是只执行了<code>[]()&#123;&#125;</code>这个函数。</p>\n<p>​    但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：<strong><em>函数指针</em></strong></p>\n<ul>\n<li>注意，这里的返回值<code>-&gt; int</code>不能省略</li>\n<li>而且，如果下述实现，是有<code>typeid(f)==typeid(g)</code></li>\n<li>并且还有<code>typeid(f) == typeid(g) == typeid(h)</code></li>\n<li>至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> (*f)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*g)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*h)() = a; <span class=\"comment\">// 也可写做 int(*h)() = &amp;a; 因为函数名本来就是地址</span></span><br></pre></td></tr></table></figure>\n"},{"title":"GitHub 部署个人博客","cover":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052130527.png","date":"2022-04-05T13:13:20.000Z","excerpt":"借助GitHub的力量，部署好自己的个人博客","_content":"\n教程适用于`Windows`\n\n---\n\n# 安装\n\n## 1、安装`node.js`\n\n​\t`hexo`是基于`node.js`的，所以需要先安装`node.js`\n\n​\t直接去[官网](https://nodejs.org/zh-cn/)下载对应你电脑版本的安装即可\n\n## 2、安装`hexo`\n\n[官网参考文档](https://hexo.io/zh-cn/docs/)，可以参考一下\n\n```shell\nnpm install -g hexo-cli  # 安装hexo\n# 这一步往往需要科学上网，不然会非常慢\n# 也有的教程是说改国内镜像源\n# 但是适用国内镜像源会出一点小问题，所以我用了官网镜像源\n```\n\n出现下面就算成功了\n\n![image-20220405213817866](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052138992.png)\n\n---\n\n# 创建博客\n\n## 1、初始化\n\n```shell\n# 生成一个名为 folder 的文件夹\n# 这个文件夹里面就是你的博客了\nhexo init <folder>\ncd <folder>  # 切花到这个文件夹下\n```\n\n## 2、文件结构\n\n```shell\n.\n|—— _config.yml  # 配置文件\n|—— package.json # 配置文件\n|—— scaffolds # 生成的markdown模板\n|—— source # 资源文件，图片或者文章都在这\n|\t|—— _posts # 文章\n|—— themes # 主题\n```\n\n## 3、下载主题\n\n​\t每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到[主题网](https://hexo.io/themes/)下载自己喜欢的主题即可\n\n​\t我使用的主题叫做`quiet`，所以接下来会使用这个主题作为教程，其他主题操作类似\n\n​\t下载下来的主题，放到 `themes` 目录下，**如图所示**，我这里下载了多个主题，有一个就够了\n\n![image-20220405215544804](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052155840.png)\n\n## 4、测试\n\n​\t首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述`<folder>`目录即可。\n\n​\t发布，记住一条命令即可。\n\n- **生成网页**\n\n```shell\nhexo g  # 我们发现根目录下有 public 文件夹\nhexo server # 生成服务\n# 然后浏览器访问 https://localhost:4000即可\n```\n\n​\t下图是我的文件根目录结构，只需要注意**红框**里面的即可。\n\n![image-20220405215423041](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052154141.png)\n\n---\n\n# 配置\n\n## 1、更改`hexo`博客的配置\n\n​\t更改`./_config.yml`的文件内容\n\n```yaml\n# 第5行处\n# Site\ntitle: # 网站标题\nsubtitle: ''\ndescription: '' # 简单介绍\nkeywords:\nauthor: # 作者\nlanguage: zh-CN\ntimezone: ''\n\n# 第100行左右\ntheme: quiet # 更改为自己的主题名字，themes/<主题文件夹名>\n# 使用这个后面<主题文件夹名>就可以\n```\n\n\n\n## 2、更改`quiet`主题的配置\n\n​\t更改文件**`themes/<主题文件夹>/_config.yml`**，这个是更改主题的配置，这里要根据自己的主题来。\n\n​\t每个主题都不一样，只能作为参考，不能完全照抄。\n\n- **基础设置**\n\n​\t图片修改**`themes/<folder>/source/image/`**下面的图片即可，最好**长宽比例**不要变，不然丑，哈哈哈\n\n```yaml\n# 网站标题\ntitle: 主页\n# 网站标题后缀\nsuffix: 雨探青鸟\n# 作者名称(会显示在首页文章下面)\nauthor: MINZHI\n# 首页简介（显示在首页顶部Logo的那句话）\nhome_describe: 我   想    读    研    究   生\n# 网站关键字\nkeyword: 雨探青鸟的博客\nis_article_img: false  #false是否开启文章背景图显示(随机图片)\n# 网站描述\nweb_description: 雨探青鸟的个人博客\n\n# logo\nlogo: /image/logo.png  # 我更改了自己的图片\n# 网页标签上那个小图标 一定要用本地存储\nicon: /image/favicon.ico # 我也更改了自己的icon\n##### 上面的话，没有啥好讲的\n#### 对应着下图的一些东西\n```\n\n![image-20220405222601632](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226682.png)\n\n![image-20220405222631005](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226063.png)\n\n\n\n- **导航栏设置**\n\n```yaml\n# 导航名称，原版是英文，我修改为中文\nmenus_title:\n  home: 主页\n  archive: 档案\n  categories: 分类\n  tags: 标签\n  links: 友链\n  about: 关于\n```\n\n![image-20220405222935475](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052229553.png)\n\n\n\n- **图标设置**\n\n图标我是在[阿里巴巴](https://www.iconfont.cn/)上面找到的\n\n```yaml\n# 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客\ntopIcon:\n  homeIcon: \"/image/logo.png\"  # 这个只能使用本地的文件，不然会有点问题\n  archivesIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051903462.png\"\n  tagIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051929205.png\"\n  linksIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051905452.png\"\n  categoriesIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051828739.png\"\n # 列如下图\n```\n\n![image-20220405223336833](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052233887.png)\n\n- **访问量统计**\n\n​\t我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。\n\n​\t当然，如果你下载的主题有访问量统计，只需要配置一下就行。\n\n**`_config.yml`**文件修改：\n\n```yaml\n# 网页访问统计\nweb_analytics:  \n  enable: true #需要改为true\n  baidu: https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js  # 不蒜子\n```\n\n**`themes/<folder>/layout/_partial/foot.ejs`**文件修改：\n\n```javascript\n<div class=\"Copyright\">\n\t©<%= new Date().getFullYear() %> By <%- theme.author %>.    本站总访问量：\n\t<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\t<span id=\"busuanzi_container_site_pv\"><span id=\"busuanzi_value_site_pv\"></span>次</span>\n</div>\n<!--这个是更改过的，注意上面第3 4行，这个是重点-->\n```\n\n\n\n- **底部图标**\n\n```yaml\n# 底部显示的图标（github 或者其他）\nbottomIcon: \n  #可以多个\n  - {\n    #描述名称\n    name: 'Github',\n    #图标    \n    iconLink: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imggithub.png',\n    #跳转链接    \n    toUrl: 'https://github.com/MinzhiYoyo'\n  }\n```\n\n- **友情链接**\n\n```yaml\n# 友情链接\nlinksList:\n  - {\n    title: '本项目仓库', # 名字\n    intro: '包含源码和发布文件', # 简单的描述\n    link: 'https://github.com/MinzhiYoyo/MinzhiYoyo.github.io', # 跳转链接\n    image: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052122364.jpg' # 图片链接\n  }\n```\n\n# 发布\n\n## 1、`GitHub`配置\n\n## 2、配置`token`\n\n## 3、上传\n\n ```shell\n# 上述配置完成\nhexo g -d  # 一条命令上传了\n ```\n\n","source":"_posts/GitHub-部署个人博客.md","raw":"---\ntitle: GitHub 部署个人博客\ncover: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052130527.png'\ndate: 2022-04-05 21:13:20\ntags: \n  - 前端\n  - GitHub\n  - Hexo\nexcerpt: 借助GitHub的力量，部署好自己的个人博客\ncategories: 前端\n\n\n---\n\n教程适用于`Windows`\n\n---\n\n# 安装\n\n## 1、安装`node.js`\n\n​\t`hexo`是基于`node.js`的，所以需要先安装`node.js`\n\n​\t直接去[官网](https://nodejs.org/zh-cn/)下载对应你电脑版本的安装即可\n\n## 2、安装`hexo`\n\n[官网参考文档](https://hexo.io/zh-cn/docs/)，可以参考一下\n\n```shell\nnpm install -g hexo-cli  # 安装hexo\n# 这一步往往需要科学上网，不然会非常慢\n# 也有的教程是说改国内镜像源\n# 但是适用国内镜像源会出一点小问题，所以我用了官网镜像源\n```\n\n出现下面就算成功了\n\n![image-20220405213817866](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052138992.png)\n\n---\n\n# 创建博客\n\n## 1、初始化\n\n```shell\n# 生成一个名为 folder 的文件夹\n# 这个文件夹里面就是你的博客了\nhexo init <folder>\ncd <folder>  # 切花到这个文件夹下\n```\n\n## 2、文件结构\n\n```shell\n.\n|—— _config.yml  # 配置文件\n|—— package.json # 配置文件\n|—— scaffolds # 生成的markdown模板\n|—— source # 资源文件，图片或者文章都在这\n|\t|—— _posts # 文章\n|—— themes # 主题\n```\n\n## 3、下载主题\n\n​\t每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到[主题网](https://hexo.io/themes/)下载自己喜欢的主题即可\n\n​\t我使用的主题叫做`quiet`，所以接下来会使用这个主题作为教程，其他主题操作类似\n\n​\t下载下来的主题，放到 `themes` 目录下，**如图所示**，我这里下载了多个主题，有一个就够了\n\n![image-20220405215544804](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052155840.png)\n\n## 4、测试\n\n​\t首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述`<folder>`目录即可。\n\n​\t发布，记住一条命令即可。\n\n- **生成网页**\n\n```shell\nhexo g  # 我们发现根目录下有 public 文件夹\nhexo server # 生成服务\n# 然后浏览器访问 https://localhost:4000即可\n```\n\n​\t下图是我的文件根目录结构，只需要注意**红框**里面的即可。\n\n![image-20220405215423041](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052154141.png)\n\n---\n\n# 配置\n\n## 1、更改`hexo`博客的配置\n\n​\t更改`./_config.yml`的文件内容\n\n```yaml\n# 第5行处\n# Site\ntitle: # 网站标题\nsubtitle: ''\ndescription: '' # 简单介绍\nkeywords:\nauthor: # 作者\nlanguage: zh-CN\ntimezone: ''\n\n# 第100行左右\ntheme: quiet # 更改为自己的主题名字，themes/<主题文件夹名>\n# 使用这个后面<主题文件夹名>就可以\n```\n\n\n\n## 2、更改`quiet`主题的配置\n\n​\t更改文件**`themes/<主题文件夹>/_config.yml`**，这个是更改主题的配置，这里要根据自己的主题来。\n\n​\t每个主题都不一样，只能作为参考，不能完全照抄。\n\n- **基础设置**\n\n​\t图片修改**`themes/<folder>/source/image/`**下面的图片即可，最好**长宽比例**不要变，不然丑，哈哈哈\n\n```yaml\n# 网站标题\ntitle: 主页\n# 网站标题后缀\nsuffix: 雨探青鸟\n# 作者名称(会显示在首页文章下面)\nauthor: MINZHI\n# 首页简介（显示在首页顶部Logo的那句话）\nhome_describe: 我   想    读    研    究   生\n# 网站关键字\nkeyword: 雨探青鸟的博客\nis_article_img: false  #false是否开启文章背景图显示(随机图片)\n# 网站描述\nweb_description: 雨探青鸟的个人博客\n\n# logo\nlogo: /image/logo.png  # 我更改了自己的图片\n# 网页标签上那个小图标 一定要用本地存储\nicon: /image/favicon.ico # 我也更改了自己的icon\n##### 上面的话，没有啥好讲的\n#### 对应着下图的一些东西\n```\n\n![image-20220405222601632](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226682.png)\n\n![image-20220405222631005](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226063.png)\n\n\n\n- **导航栏设置**\n\n```yaml\n# 导航名称，原版是英文，我修改为中文\nmenus_title:\n  home: 主页\n  archive: 档案\n  categories: 分类\n  tags: 标签\n  links: 友链\n  about: 关于\n```\n\n![image-20220405222935475](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052229553.png)\n\n\n\n- **图标设置**\n\n图标我是在[阿里巴巴](https://www.iconfont.cn/)上面找到的\n\n```yaml\n# 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客\ntopIcon:\n  homeIcon: \"/image/logo.png\"  # 这个只能使用本地的文件，不然会有点问题\n  archivesIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051903462.png\"\n  tagIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051929205.png\"\n  linksIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051905452.png\"\n  categoriesIcon: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051828739.png\"\n # 列如下图\n```\n\n![image-20220405223336833](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052233887.png)\n\n- **访问量统计**\n\n​\t我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。\n\n​\t当然，如果你下载的主题有访问量统计，只需要配置一下就行。\n\n**`_config.yml`**文件修改：\n\n```yaml\n# 网页访问统计\nweb_analytics:  \n  enable: true #需要改为true\n  baidu: https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js  # 不蒜子\n```\n\n**`themes/<folder>/layout/_partial/foot.ejs`**文件修改：\n\n```javascript\n<div class=\"Copyright\">\n\t©<%= new Date().getFullYear() %> By <%- theme.author %>.    本站总访问量：\n\t<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\t<span id=\"busuanzi_container_site_pv\"><span id=\"busuanzi_value_site_pv\"></span>次</span>\n</div>\n<!--这个是更改过的，注意上面第3 4行，这个是重点-->\n```\n\n\n\n- **底部图标**\n\n```yaml\n# 底部显示的图标（github 或者其他）\nbottomIcon: \n  #可以多个\n  - {\n    #描述名称\n    name: 'Github',\n    #图标    \n    iconLink: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imggithub.png',\n    #跳转链接    \n    toUrl: 'https://github.com/MinzhiYoyo'\n  }\n```\n\n- **友情链接**\n\n```yaml\n# 友情链接\nlinksList:\n  - {\n    title: '本项目仓库', # 名字\n    intro: '包含源码和发布文件', # 简单的描述\n    link: 'https://github.com/MinzhiYoyo/MinzhiYoyo.github.io', # 跳转链接\n    image: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052122364.jpg' # 图片链接\n  }\n```\n\n# 发布\n\n## 1、`GitHub`配置\n\n## 2、配置`token`\n\n## 3、上传\n\n ```shell\n# 上述配置完成\nhexo g -d  # 一条命令上传了\n ```\n\n","slug":"GitHub-部署个人博客","published":1,"updated":"2022-05-16T04:38:35.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y1s000328u5edwq8cr0","content":"<p>教程适用于<code>Windows</code></p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"1、安装node-js\"><a href=\"#1、安装node-js\" class=\"headerlink\" title=\"1、安装node.js\"></a>1、安装<code>node.js</code></h2><p>​    <code>hexo</code>是基于<code>node.js</code>的，所以需要先安装<code>node.js</code></p>\n<p>​    直接去<a href=\"https://nodejs.org/zh-cn/\">官网</a>下载对应你电脑版本的安装即可</p>\n<h2 id=\"2、安装hexo\"><a href=\"#2、安装hexo\" class=\"headerlink\" title=\"2、安装hexo\"></a>2、安装<code>hexo</code></h2><p><a href=\"https://hexo.io/zh-cn/docs/\">官网参考文档</a>，可以参考一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli  # 安装hexo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这一步往往需要科学上网，不然会非常慢</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也有的教程是说改国内镜像源</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">但是适用国内镜像源会出一点小问题，所以我用了官网镜像源</span></span><br></pre></td></tr></table></figure>\n<p>出现下面就算成功了</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052138992.png\" alt=\"image-20220405213817866\"></p>\n<hr>\n<h1 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h1><h2 id=\"1、初始化\"><a href=\"#1、初始化\" class=\"headerlink\" title=\"1、初始化\"></a>1、初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成一个名为 folder 的文件夹</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这个文件夹里面就是你的博客了</span></span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;  # 切花到这个文件夹下</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、文件结构\"><a href=\"#2、文件结构\" class=\"headerlink\" title=\"2、文件结构\"></a>2、文件结构</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|—— _config.yml  # 配置文件</span><br><span class=\"line\">|—— package.json # 配置文件</span><br><span class=\"line\">|—— scaffolds # 生成的markdown模板</span><br><span class=\"line\">|—— source # 资源文件，图片或者文章都在这</span><br><span class=\"line\">|\t|—— _posts # 文章</span><br><span class=\"line\">|—— themes # 主题</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、下载主题\"><a href=\"#3、下载主题\" class=\"headerlink\" title=\"3、下载主题\"></a>3、下载主题</h2><p>​    每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到<a href=\"https://hexo.io/themes/\">主题网</a>下载自己喜欢的主题即可</p>\n<p>​    我使用的主题叫做<code>quiet</code>，所以接下来会使用这个主题作为教程，其他主题操作类似</p>\n<p>​    下载下来的主题，放到 <code>themes</code> 目录下，<strong>如图所示</strong>，我这里下载了多个主题，有一个就够了</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052155840.png\" alt=\"image-20220405215544804\"></p>\n<h2 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h2><p>​    首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述<code>&lt;folder&gt;</code>目录即可。</p>\n<p>​    发布，记住一条命令即可。</p>\n<ul>\n<li><strong>生成网页</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g  # 我们发现根目录下有 public 文件夹</span><br><span class=\"line\">hexo server # 生成服务</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后浏览器访问 https://localhost:4000即可</span></span><br></pre></td></tr></table></figure>\n<p>​    下图是我的文件根目录结构，只需要注意<strong>红框</strong>里面的即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052154141.png\" alt=\"image-20220405215423041\"></p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"1、更改hexo博客的配置\"><a href=\"#1、更改hexo博客的配置\" class=\"headerlink\" title=\"1、更改hexo博客的配置\"></a>1、更改<code>hexo</code>博客的配置</h2><p>​    更改<code>./_config.yml</code>的文件内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第5行处</span></span><br><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># 简单介绍</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"comment\"># 作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第100行左右</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">quiet</span> <span class=\"comment\"># 更改为自己的主题名字，themes/&lt;主题文件夹名&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用这个后面&lt;主题文件夹名&gt;就可以</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、更改quiet主题的配置\"><a href=\"#2、更改quiet主题的配置\" class=\"headerlink\" title=\"2、更改quiet主题的配置\"></a>2、更改<code>quiet</code>主题的配置</h2><p>​    更改文件<strong><code>themes/&lt;主题文件夹&gt;/_config.yml</code></strong>，这个是更改主题的配置，这里要根据自己的主题来。</p>\n<p>​    每个主题都不一样，只能作为参考，不能完全照抄。</p>\n<ul>\n<li><strong>基础设置</strong></li>\n</ul>\n<p>​    图片修改<strong><code>themes/&lt;folder&gt;/source/image/</code></strong>下面的图片即可，最好<strong>长宽比例</strong>不要变，不然丑，哈哈哈</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">主页</span></span><br><span class=\"line\"><span class=\"comment\"># 网站标题后缀</span></span><br><span class=\"line\"><span class=\"attr\">suffix:</span> <span class=\"string\">雨探青鸟</span></span><br><span class=\"line\"><span class=\"comment\"># 作者名称(会显示在首页文章下面)</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">MINZHI</span></span><br><span class=\"line\"><span class=\"comment\"># 首页简介（显示在首页顶部Logo的那句话）</span></span><br><span class=\"line\"><span class=\"attr\">home_describe:</span> <span class=\"string\">我</span>   <span class=\"string\">想</span>    <span class=\"string\">读</span>    <span class=\"string\">研</span>    <span class=\"string\">究</span>   <span class=\"string\">生</span></span><br><span class=\"line\"><span class=\"comment\"># 网站关键字</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">雨探青鸟的博客</span></span><br><span class=\"line\"><span class=\"attr\">is_article_img:</span> <span class=\"literal\">false</span>  <span class=\"comment\">#false是否开启文章背景图显示(随机图片)</span></span><br><span class=\"line\"><span class=\"comment\"># 网站描述</span></span><br><span class=\"line\"><span class=\"attr\">web_description:</span> <span class=\"string\">雨探青鸟的个人博客</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># logo</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/image/logo.png</span>  <span class=\"comment\"># 我更改了自己的图片</span></span><br><span class=\"line\"><span class=\"comment\"># 网页标签上那个小图标 一定要用本地存储</span></span><br><span class=\"line\"><span class=\"attr\">icon:</span> <span class=\"string\">/image/favicon.ico</span> <span class=\"comment\"># 我也更改了自己的icon</span></span><br><span class=\"line\"><span class=\"comment\">##### 上面的话，没有啥好讲的</span></span><br><span class=\"line\"><span class=\"comment\">#### 对应着下图的一些东西</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226682.png\" alt=\"image-20220405222601632\"></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226063.png\" alt=\"image-20220405222631005\"></p>\n<ul>\n<li><strong>导航栏设置</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导航名称，原版是英文，我修改为中文</span></span><br><span class=\"line\"><span class=\"attr\">menus_title:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">主页</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"string\">档案</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">分类</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">标签</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span> <span class=\"string\">友链</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">关于</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052229553.png\" alt=\"image-20220405222935475\"></p>\n<ul>\n<li><strong>图标设置</strong></li>\n</ul>\n<p>图标我是在<a href=\"https://www.iconfont.cn/\">阿里巴巴</a>上面找到的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客</span></span><br><span class=\"line\"><span class=\"attr\">topIcon:</span></span><br><span class=\"line\">  <span class=\"attr\">homeIcon:</span> <span class=\"string\">&quot;/image/logo.png&quot;</span>  <span class=\"comment\"># 这个只能使用本地的文件，不然会有点问题</span></span><br><span class=\"line\">  <span class=\"attr\">archivesIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051903462.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tagIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051929205.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">linksIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051905452.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">categoriesIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051828739.png&quot;</span></span><br><span class=\"line\"> <span class=\"comment\"># 列如下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052233887.png\" alt=\"image-20220405223336833\"></p>\n<ul>\n<li><strong>访问量统计</strong></li>\n</ul>\n<p>​    我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。</p>\n<p>​    当然，如果你下载的主题有访问量统计，只需要配置一下就行。</p>\n<p><strong><code>_config.yml</code></strong>文件修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网页访问统计</span></span><br><span class=\"line\"><span class=\"attr\">web_analytics:</span>  </span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">#需要改为true</span></span><br><span class=\"line\">  <span class=\"attr\">baidu:</span> <span class=\"string\">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span>  <span class=\"comment\"># 不蒜子</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>themes/&lt;folder&gt;/layout/_partial/foot.ejs</code></strong>文件修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;Copyright&quot;</span>&gt;</span><br><span class=\"line\">\t©&lt;%= <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() %&gt; <span class=\"title class_\">By</span> &lt;%- theme.<span class=\"property\">author</span> %&gt;.    本站总访问量：</span><br><span class=\"line\">\t&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--这个是更改过的，注意上面第<span class=\"number\">3</span> <span class=\"number\">4</span>行，这个是重点--&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>底部图标</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 底部显示的图标（github 或者其他）</span></span><br><span class=\"line\"><span class=\"attr\">bottomIcon:</span> </span><br><span class=\"line\">  <span class=\"comment\">#可以多个</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#描述名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;Github&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#图标    </span></span><br><span class=\"line\">    <span class=\"attr\">iconLink:</span> <span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imggithub.png&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#跳转链接    </span></span><br><span class=\"line\">    <span class=\"attr\">toUrl:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo&#x27;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>友情链接</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 友情链接</span></span><br><span class=\"line\"><span class=\"attr\">linksList:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;本项目仓库&#x27;</span>, <span class=\"comment\"># 名字</span></span><br><span class=\"line\">    <span class=\"attr\">intro:</span> <span class=\"string\">&#x27;包含源码和发布文件&#x27;</span>, <span class=\"comment\"># 简单的描述</span></span><br><span class=\"line\">    <span class=\"attr\">link:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo/MinzhiYoyo.github.io&#x27;</span>, <span class=\"comment\"># 跳转链接</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052122364.jpg&#x27;</span> <span class=\"comment\"># 图片链接</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"1、GitHub配置\"><a href=\"#1、GitHub配置\" class=\"headerlink\" title=\"1、GitHub配置\"></a>1、<code>GitHub</code>配置</h2><h2 id=\"2、配置token\"><a href=\"#2、配置token\" class=\"headerlink\" title=\"2、配置token\"></a>2、配置<code>token</code></h2><h2 id=\"3、上传\"><a href=\"#3、上传\" class=\"headerlink\" title=\"3、上传\"></a>3、上传</h2> <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上述配置完成</span></span><br><span class=\"line\">hexo g -d  # 一条命令上传了</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<p>教程适用于<code>Windows</code></p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"1、安装node-js\"><a href=\"#1、安装node-js\" class=\"headerlink\" title=\"1、安装node.js\"></a>1、安装<code>node.js</code></h2><p>​    <code>hexo</code>是基于<code>node.js</code>的，所以需要先安装<code>node.js</code></p>\n<p>​    直接去<a href=\"https://nodejs.org/zh-cn/\">官网</a>下载对应你电脑版本的安装即可</p>\n<h2 id=\"2、安装hexo\"><a href=\"#2、安装hexo\" class=\"headerlink\" title=\"2、安装hexo\"></a>2、安装<code>hexo</code></h2><p><a href=\"https://hexo.io/zh-cn/docs/\">官网参考文档</a>，可以参考一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli  # 安装hexo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这一步往往需要科学上网，不然会非常慢</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也有的教程是说改国内镜像源</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">但是适用国内镜像源会出一点小问题，所以我用了官网镜像源</span></span><br></pre></td></tr></table></figure>\n<p>出现下面就算成功了</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052138992.png\" alt=\"image-20220405213817866\"></p>\n<hr>\n<h1 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h1><h2 id=\"1、初始化\"><a href=\"#1、初始化\" class=\"headerlink\" title=\"1、初始化\"></a>1、初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成一个名为 folder 的文件夹</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这个文件夹里面就是你的博客了</span></span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;  # 切花到这个文件夹下</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、文件结构\"><a href=\"#2、文件结构\" class=\"headerlink\" title=\"2、文件结构\"></a>2、文件结构</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|—— _config.yml  # 配置文件</span><br><span class=\"line\">|—— package.json # 配置文件</span><br><span class=\"line\">|—— scaffolds # 生成的markdown模板</span><br><span class=\"line\">|—— source # 资源文件，图片或者文章都在这</span><br><span class=\"line\">|\t|—— _posts # 文章</span><br><span class=\"line\">|—— themes # 主题</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、下载主题\"><a href=\"#3、下载主题\" class=\"headerlink\" title=\"3、下载主题\"></a>3、下载主题</h2><p>​    每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到<a href=\"https://hexo.io/themes/\">主题网</a>下载自己喜欢的主题即可</p>\n<p>​    我使用的主题叫做<code>quiet</code>，所以接下来会使用这个主题作为教程，其他主题操作类似</p>\n<p>​    下载下来的主题，放到 <code>themes</code> 目录下，<strong>如图所示</strong>，我这里下载了多个主题，有一个就够了</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052155840.png\" alt=\"image-20220405215544804\"></p>\n<h2 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h2><p>​    首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述<code>&lt;folder&gt;</code>目录即可。</p>\n<p>​    发布，记住一条命令即可。</p>\n<ul>\n<li><strong>生成网页</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g  # 我们发现根目录下有 public 文件夹</span><br><span class=\"line\">hexo server # 生成服务</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后浏览器访问 https://localhost:4000即可</span></span><br></pre></td></tr></table></figure>\n<p>​    下图是我的文件根目录结构，只需要注意<strong>红框</strong>里面的即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052154141.png\" alt=\"image-20220405215423041\"></p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"1、更改hexo博客的配置\"><a href=\"#1、更改hexo博客的配置\" class=\"headerlink\" title=\"1、更改hexo博客的配置\"></a>1、更改<code>hexo</code>博客的配置</h2><p>​    更改<code>./_config.yml</code>的文件内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第5行处</span></span><br><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># 简单介绍</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"comment\"># 作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第100行左右</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">quiet</span> <span class=\"comment\"># 更改为自己的主题名字，themes/&lt;主题文件夹名&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用这个后面&lt;主题文件夹名&gt;就可以</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、更改quiet主题的配置\"><a href=\"#2、更改quiet主题的配置\" class=\"headerlink\" title=\"2、更改quiet主题的配置\"></a>2、更改<code>quiet</code>主题的配置</h2><p>​    更改文件<strong><code>themes/&lt;主题文件夹&gt;/_config.yml</code></strong>，这个是更改主题的配置，这里要根据自己的主题来。</p>\n<p>​    每个主题都不一样，只能作为参考，不能完全照抄。</p>\n<ul>\n<li><strong>基础设置</strong></li>\n</ul>\n<p>​    图片修改<strong><code>themes/&lt;folder&gt;/source/image/</code></strong>下面的图片即可，最好<strong>长宽比例</strong>不要变，不然丑，哈哈哈</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">主页</span></span><br><span class=\"line\"><span class=\"comment\"># 网站标题后缀</span></span><br><span class=\"line\"><span class=\"attr\">suffix:</span> <span class=\"string\">雨探青鸟</span></span><br><span class=\"line\"><span class=\"comment\"># 作者名称(会显示在首页文章下面)</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">MINZHI</span></span><br><span class=\"line\"><span class=\"comment\"># 首页简介（显示在首页顶部Logo的那句话）</span></span><br><span class=\"line\"><span class=\"attr\">home_describe:</span> <span class=\"string\">我</span>   <span class=\"string\">想</span>    <span class=\"string\">读</span>    <span class=\"string\">研</span>    <span class=\"string\">究</span>   <span class=\"string\">生</span></span><br><span class=\"line\"><span class=\"comment\"># 网站关键字</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">雨探青鸟的博客</span></span><br><span class=\"line\"><span class=\"attr\">is_article_img:</span> <span class=\"literal\">false</span>  <span class=\"comment\">#false是否开启文章背景图显示(随机图片)</span></span><br><span class=\"line\"><span class=\"comment\"># 网站描述</span></span><br><span class=\"line\"><span class=\"attr\">web_description:</span> <span class=\"string\">雨探青鸟的个人博客</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># logo</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/image/logo.png</span>  <span class=\"comment\"># 我更改了自己的图片</span></span><br><span class=\"line\"><span class=\"comment\"># 网页标签上那个小图标 一定要用本地存储</span></span><br><span class=\"line\"><span class=\"attr\">icon:</span> <span class=\"string\">/image/favicon.ico</span> <span class=\"comment\"># 我也更改了自己的icon</span></span><br><span class=\"line\"><span class=\"comment\">##### 上面的话，没有啥好讲的</span></span><br><span class=\"line\"><span class=\"comment\">#### 对应着下图的一些东西</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226682.png\" alt=\"image-20220405222601632\"></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052226063.png\" alt=\"image-20220405222631005\"></p>\n<ul>\n<li><strong>导航栏设置</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导航名称，原版是英文，我修改为中文</span></span><br><span class=\"line\"><span class=\"attr\">menus_title:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">主页</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"string\">档案</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">分类</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">标签</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span> <span class=\"string\">友链</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">关于</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052229553.png\" alt=\"image-20220405222935475\"></p>\n<ul>\n<li><strong>图标设置</strong></li>\n</ul>\n<p>图标我是在<a href=\"https://www.iconfont.cn/\">阿里巴巴</a>上面找到的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客</span></span><br><span class=\"line\"><span class=\"attr\">topIcon:</span></span><br><span class=\"line\">  <span class=\"attr\">homeIcon:</span> <span class=\"string\">&quot;/image/logo.png&quot;</span>  <span class=\"comment\"># 这个只能使用本地的文件，不然会有点问题</span></span><br><span class=\"line\">  <span class=\"attr\">archivesIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051903462.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tagIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051929205.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">linksIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051905452.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">categoriesIcon:</span> <span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051828739.png&quot;</span></span><br><span class=\"line\"> <span class=\"comment\"># 列如下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052233887.png\" alt=\"image-20220405223336833\"></p>\n<ul>\n<li><strong>访问量统计</strong></li>\n</ul>\n<p>​    我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。</p>\n<p>​    当然，如果你下载的主题有访问量统计，只需要配置一下就行。</p>\n<p><strong><code>_config.yml</code></strong>文件修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网页访问统计</span></span><br><span class=\"line\"><span class=\"attr\">web_analytics:</span>  </span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">#需要改为true</span></span><br><span class=\"line\">  <span class=\"attr\">baidu:</span> <span class=\"string\">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span>  <span class=\"comment\"># 不蒜子</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>themes/&lt;folder&gt;/layout/_partial/foot.ejs</code></strong>文件修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;Copyright&quot;</span>&gt;</span><br><span class=\"line\">\t©&lt;%= <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() %&gt; <span class=\"title class_\">By</span> &lt;%- theme.<span class=\"property\">author</span> %&gt;.    本站总访问量：</span><br><span class=\"line\">\t&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--这个是更改过的，注意上面第<span class=\"number\">3</span> <span class=\"number\">4</span>行，这个是重点--&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>底部图标</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 底部显示的图标（github 或者其他）</span></span><br><span class=\"line\"><span class=\"attr\">bottomIcon:</span> </span><br><span class=\"line\">  <span class=\"comment\">#可以多个</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#描述名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;Github&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#图标    </span></span><br><span class=\"line\">    <span class=\"attr\">iconLink:</span> <span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imggithub.png&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#跳转链接    </span></span><br><span class=\"line\">    <span class=\"attr\">toUrl:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo&#x27;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>友情链接</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 友情链接</span></span><br><span class=\"line\"><span class=\"attr\">linksList:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;本项目仓库&#x27;</span>, <span class=\"comment\"># 名字</span></span><br><span class=\"line\">    <span class=\"attr\">intro:</span> <span class=\"string\">&#x27;包含源码和发布文件&#x27;</span>, <span class=\"comment\"># 简单的描述</span></span><br><span class=\"line\">    <span class=\"attr\">link:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo/MinzhiYoyo.github.io&#x27;</span>, <span class=\"comment\"># 跳转链接</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052122364.jpg&#x27;</span> <span class=\"comment\"># 图片链接</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"1、GitHub配置\"><a href=\"#1、GitHub配置\" class=\"headerlink\" title=\"1、GitHub配置\"></a>1、<code>GitHub</code>配置</h2><h2 id=\"2、配置token\"><a href=\"#2、配置token\" class=\"headerlink\" title=\"2、配置token\"></a>2、配置<code>token</code></h2><h2 id=\"3、上传\"><a href=\"#3、上传\" class=\"headerlink\" title=\"3、上传\"></a>3、上传</h2> <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上述配置完成</span></span><br><span class=\"line\">hexo g -d  # 一条命令上传了</span><br></pre></td></tr></table></figure>\n"},{"title":"Python爬虫学习","cover":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052015303.png","date":"2022-04-05T12:07:16.000Z","excerpt":"爬虫是个好东西，轻易的下到别人下不到的东西","_content":"\n​\t\t***这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇[博客](https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/)。***\n\n## 1、`requests`模块的使用\n\n> **response的用法**\n>\n> ```python\n> # ====== 1、基础知识  ======== #\n> import requests\n> url = \"http://www.baidu.com\"\n> response = requests.get(url)\n> print(respones.text)\t\t\t# 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据\n> print(response.content.decode())   \t\n> # content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode('gbk')\n> # 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1\n> # 有些平台可能上述都不行，那就用bytes存储就好\n> print(responst.encoding)\t\t\t# 推测的遍码格式\n> \n> # 当然可以先设置encoding\n> response.encoding = \"utf8\"   # 注意不是写成 utf-8\n> print(response.text)   # 即可按照utf-8解码\n> \n> \n> \n> # ====== 2、常见的对象参数和方法  ======== #\n> # 响应的url\n> print(response.url)  \n> \n> # 状态码（一般来说，不要相信）\n> print(response.status_code)\n> \n> # 响应对应的请求头\n> print(response.request.headers)\n> \n> # 响应头\n> print(response.headers)\n> \n> # 响应对应请求的cookie 返回cookieJar类型\n> print(response.request._cookies)\n> \n> # 响应的cookie\n> print(response.cookies)\n> \n> # 自动将json字符串类型的响应内容转换成python对象\n> print(response.json())\n> \n> ```\n\n> **关闭代理**\n>\n> > ```python\n> > proxies = {\"http\": None, \"https\": None}\n> > response = rq.get(url, headers=headers, verify=False, proxies=proxies) # 关闭代理，关闭ssl认证\n> > ```\n> >\n> > \n\n---\n\n## 2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\n\n> **获取所有数据，勾选`All`**\n>\n> > ![image-20211201095759608](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052011268.png)\n>\n> **登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新**\n>\n> > ![image-20211201205357600](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008211.png)\n>\n> **查看请求数据和响应数据**\n>\n> > ![image-20211201195017543](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008042.png)\n>\n> **关于请求头的一些参数意义**\n>\n> > `Referer`：这个是解释从哪个网站跳转的\n> >\n> > `User-Agent`：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要\n> >\n> > `Cookie`：这个分为`请求cookie`和`响应cookie`，分开使用\n> >\n> > `host`：请求域名\n> >\n> > `Connection`：是否保持连接，例如`keep-alive`，`close`\n> >\n> > `Upgrade-Insecure-Requests`：升级为`https`\n>\n> **关于响应头的一些参数意义** - 响应头一般是返回参数，主要看请求头\n>\n> > `Set-Cookie`：设置的`cookie`\n> >\n> > 状态码：200表示成功，但是，一般不要关注状态码，因为其不可信\n>\n> **常见的单词意义**\n>\n> > `token`：这个是一般为了保持的浏览器的连接性\n>\n> **注意事项**\n>\n> > 上面的`host`是域名，不一定是请求`url`，请求url看下面图\n> >\n> > > ![image-20211201194750582](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008032.png)\n>\n> **其他帮助网站合集**\n>\n> > - [在线字符串转`json`](https://www.json.cn/)\n> >\n> > - **免费代理站点**\n> >\n> >   > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> >   >\n> >   > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> >   >\n> >   > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - \n\n## 3、爬虫入门一\n\n> **注意请求头中的一些参数**\n>\n> - `User-Agent`：包含了很多参数，如浏览器数据，系统数据等\n>\n> > ```python\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36'  # 最好不要加到这一行的值，因为会报错，不明白为什么\n> > }\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > response1 = requests.get(url, headers=headers)\n> > ```\n>\n> **发送带参数的请求**\n>\n> - `url`直接带参数\n>\n> > ```python\n> > # http://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=python&fenlei=256&rsv_pq=8cb91fd5000035bd&rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=9&rsv_sug1=7&rsv_sug7=101&rsv_sug2=0&rsv_btype=i&prefixsug=python&rsp=5&inputT=2667&rsv_sug4=6046\n> > \n> > # 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个\n> > # http://www.baidu.com/s?wd=python\n> > # 这个才是关键，然后进行get请求\n> > url = 'http://www.baidu.com/s?wd=python'\n> > headers = {\n> >     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > ##  注意，get请求不要使用https\n> > response = requests.get(url, headers=headers)\n> > ```\n>\n> - 使用`params`携带参数字典\n>\n> > ```python\n> > url = 'http://www.baidu.com/s?'  # 注意这里需要加上s?，这个是百度的特性\n> > data = {\n> >  'wd': 'python'\n> > }\n> > heads = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'}\n> > response = requests.get(url, params=data, headers=heads)\n> > ```\n>\n> **携带`cookie`信息，`cookie`一般有时效性，过段时间需要重新获取**\n>\n> - 以`github`为列\n>\n> > 见下列图片，浏览器抓包\n> >\n> > ![image-20211201111147337](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008253.png)\n>\n> - 在`headers`携带\n>\n> > ```python\n> > headers={\n> >  'cookie': 'xxxx',\n> >  'User-Agent': 'xxxx'\n> > }\n> > \n> > ```\n>\n> - 使用`cookie`参数来保持\n>\n> > ```python\n> > # 构建cookie字典\n> > # 需要先切割键值对\n> > # 如下列cookie\n> > cookies = '_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode={\"color_mode\":\"auto\",\"light_theme\":{\"name\":\"light\",\"color_mode\":\"light\"},\"dark_theme\":{\"name\":\"dark\",\"color_mode\":\"dark\"}}; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A=='\n> > cookies = cookies.splie(\"; \")\n> > cookies_ = {}\n> > for cookie in cookies:\n> >  cookies_[cookie.split('=')[0]] = cookie.splie('=')[-1]\n> > \n> > # 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对\n> > respose = requests.get(url,headers=headers,cookies=cookies_)\n> > ```\n>\n> - `cookieJar`对象转换成`cookie`字典，一般用不到\n>\n> > ```python\n> > # 什么是cookieJar对象呢，如下\n> > requests.get(url).cookie\t\t# 这个就是cookieJar对象\n> > dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   # cookiejar转换成字典\n> > \n> > jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  # 重新转化成cookiejar\n> > \n> > ```\n>\n> **`timeout`的用法**\n>\n> - 设置一下\n>\n> > ```python\n> > wresponse = requests.get(url, timeout=3)  # 设为3s，一般设个十秒左右就好\n> > ```\n> >\n> > \n>\n> **代理`Proxy`**\n>\n> > 代理分为正向代理和反向代理\n> >\n> > 代理还分为透明代理、匿名代理、高匿代理\n> >\n> > - 透明代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Your IP\n> > > ```\n> >\n> > - 匿名代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Proxy IP\n> > > ```\n> >\n> > - 高匿代理\n> >\n> > > ```shell\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = not determined\n> > > HTTP_X_FORWARDED_FOR = not determined\n> > > ```\n> >\n> > 代理还可分为，`http、https、socks`\n> >\n> > - `http`：目标`url`为`http`协议\n> > - `https`：目标`url`为`https`协议\n> > - `socks`：只传递数据包，不在乎什么应用协议，耗时少\n> >\n> > **用法**\n> >\n> > > ```python\n> > > proxies = {\n> > >  'http': 'http://127.0.0.1:7890',\n> > >  'https': 'http://127.0.0.1:7890'\n> > > }\n> > > response = requests.get(url, proxies=proxies)\n> > > ```\n> > >\n> > > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> > >\n> > > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> > >\n> > > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - 并且代理站点可能会给你添加一下信息，使得你更像一个浏览器\n> > - 代理也有可能截获你的数据，所以这个也要注意\n>\n> **`verify`忽略`CA`证书**\n>\n> > 很多情况如下图所示\n> >\n> > > ![image-20211201192347257](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008307.png)\n> >\n> > 爬虫过程遇到下列情况\n> >\n> > > ```python\n> > > requests.exceptions.SSLError: HTTPSConnection.....\n> > > ```\n> >\n> > 设置为`False`即可\n> >\n> > > ```python\n> > > # 默认是True，设置为False\n> > > # 运行过程会报警告的，但是 don't worry it 爬虫还是可以爬取内容的\n> > > response = requests.get(url, verify=False)\n> > > ```\n>\n> **`post`请求**\n>\n> > `post`用途\n> >\n> > - 一般有账号密码，都会使用`post`请求，因为`get`请求是在`url`中的明文\n> > - 大文件以及多数据，都是使用`post`\n> > - `web`工程师会认为`post`比`get`请求更加安全\n> >\n> > 简单实现\n> >\n> > > ```python\n> > > respose = requests.post(url, data) # data是一个字典\n> > > ```\n> >\n> > 找`data`的步骤寻找固定值：一般来说浏览器抓抓包就知道了\n> >\n> > - 寻找输入值：也一般来说浏览器抓抓包就知道了\n> > - 寻找预设值 - 静态文件：一般来说，需要从`html`文件中搜索，可以尝试，这个是反爬的\n> > - 寻找预设值 - 发请求：需要对指定地址发送请求\n> > - 寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用`Javascript`生成\n> >\n> > `data`反爬套路\n> >\n> > - 模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的\n> > - 注意时间戳什么的\n> > - 注意里面的`JS`文件\n> > - 有些可能是随机值\n> > - 从`html`提取，可以试试无痕浏览器\n>\n> **`requess.session`状态保持**\n>\n> - 自动保持`cookie`，一般多次请求（如登录之后再操作的），使用方法\n>\n> > ```python\n> > session = requests.session()\n> > session.headers = {\n> > \n> > }\n> > session.data = {\n> > \n> > }\n> > response = session.get(url)\n> > response = session.post(url)\n> > \n> > # 如下用法\n> > s = rq.session()\n> > s.trust_env\n> > s.verify\n> > s.headers\n> > s.proxies\n> > s.cookies\n> > s.get(url, data=data)\n> > s.post(url, data=data)\n> > ```\n\n## 正则表达式，这个也是重点\n\n> **首先如何使用正则表达式**\n>\n> > ```python\n> > response = requests.get(url)\n> > restr = response.content.decode()   # 转成utf-8或者gbk\n> > # 正则提取\n> > import re  # 导入正则模块\n> > str_tmp = \"<link href=\\\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"   # 临时字符串，不用写到代码里\n> > # 假如想要获取上面中的href，那么这样写正则表达式\n> > # 正则\n> > restr = '<link href=\\\"(.*?)\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">'   # 这个是以非贪婪模式匹配多个字符\n> > # 然后匹配一下全文，看看是否获取了对应的\n> > dst_list = re.findall(restr, str_tmp)   # 打印一下看看就知道了\n> > ```\n> >\n> > \n\n## 额外补充知识\n\n> **`form`表单**\n>\n> - 以`github`为例\n> - 一般来说，`form`表单上面会有很多消息可挖掘，如下图所示\n>\n> > ![image-20211201205057556](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052010824.png)\n> >\n> > - 其中，`action`指的是提交给的路径\n> > - `method`是提交方法\n> > - `token`这个一般用来表示保持的意思，同行的`value`表示`token`的值\n> > - 而下面这个`name`，就是输入标签将里面的值提交给什么了，这里是提交给`login`\n>\n> **往往需要多次抓包，多次比较才行，找出差异**\n>\n> - 如在无痕串口进行多次退出和登录\n> - 主要是为了找出`post`的变值（不包括输入值，除非输入值不是明文传输）\n>\n> **注意多次爬虫，需要注意页面的跳转**\n>\n> - 比如登录的时候，一般会跳转的\n\n\n## 结束语\n\n​\t\t**技术永远是好东西，只是拿来做什么**\n\n","source":"_posts/Python爬虫学习.md","raw":"---\ntitle: Python爬虫学习\ncover: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052015303.png'\ndate: 2022-04-05 20:07:16\ntags:\n  - Python\n  - 爬虫\nexcerpt: '爬虫是个好东西，轻易的下到别人下不到的东西'\ncategories: \n  - Python\n  - 爬虫\n---\n\n​\t\t***这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇[博客](https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/)。***\n\n## 1、`requests`模块的使用\n\n> **response的用法**\n>\n> ```python\n> # ====== 1、基础知识  ======== #\n> import requests\n> url = \"http://www.baidu.com\"\n> response = requests.get(url)\n> print(respones.text)\t\t\t# 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据\n> print(response.content.decode())   \t\n> # content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode('gbk')\n> # 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1\n> # 有些平台可能上述都不行，那就用bytes存储就好\n> print(responst.encoding)\t\t\t# 推测的遍码格式\n> \n> # 当然可以先设置encoding\n> response.encoding = \"utf8\"   # 注意不是写成 utf-8\n> print(response.text)   # 即可按照utf-8解码\n> \n> \n> \n> # ====== 2、常见的对象参数和方法  ======== #\n> # 响应的url\n> print(response.url)  \n> \n> # 状态码（一般来说，不要相信）\n> print(response.status_code)\n> \n> # 响应对应的请求头\n> print(response.request.headers)\n> \n> # 响应头\n> print(response.headers)\n> \n> # 响应对应请求的cookie 返回cookieJar类型\n> print(response.request._cookies)\n> \n> # 响应的cookie\n> print(response.cookies)\n> \n> # 自动将json字符串类型的响应内容转换成python对象\n> print(response.json())\n> \n> ```\n\n> **关闭代理**\n>\n> > ```python\n> > proxies = {\"http\": None, \"https\": None}\n> > response = rq.get(url, headers=headers, verify=False, proxies=proxies) # 关闭代理，关闭ssl认证\n> > ```\n> >\n> > \n\n---\n\n## 2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\n\n> **获取所有数据，勾选`All`**\n>\n> > ![image-20211201095759608](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052011268.png)\n>\n> **登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新**\n>\n> > ![image-20211201205357600](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008211.png)\n>\n> **查看请求数据和响应数据**\n>\n> > ![image-20211201195017543](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008042.png)\n>\n> **关于请求头的一些参数意义**\n>\n> > `Referer`：这个是解释从哪个网站跳转的\n> >\n> > `User-Agent`：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要\n> >\n> > `Cookie`：这个分为`请求cookie`和`响应cookie`，分开使用\n> >\n> > `host`：请求域名\n> >\n> > `Connection`：是否保持连接，例如`keep-alive`，`close`\n> >\n> > `Upgrade-Insecure-Requests`：升级为`https`\n>\n> **关于响应头的一些参数意义** - 响应头一般是返回参数，主要看请求头\n>\n> > `Set-Cookie`：设置的`cookie`\n> >\n> > 状态码：200表示成功，但是，一般不要关注状态码，因为其不可信\n>\n> **常见的单词意义**\n>\n> > `token`：这个是一般为了保持的浏览器的连接性\n>\n> **注意事项**\n>\n> > 上面的`host`是域名，不一定是请求`url`，请求url看下面图\n> >\n> > > ![image-20211201194750582](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008032.png)\n>\n> **其他帮助网站合集**\n>\n> > - [在线字符串转`json`](https://www.json.cn/)\n> >\n> > - **免费代理站点**\n> >\n> >   > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> >   >\n> >   > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> >   >\n> >   > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - \n\n## 3、爬虫入门一\n\n> **注意请求头中的一些参数**\n>\n> - `User-Agent`：包含了很多参数，如浏览器数据，系统数据等\n>\n> > ```python\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36'  # 最好不要加到这一行的值，因为会报错，不明白为什么\n> > }\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > response1 = requests.get(url, headers=headers)\n> > ```\n>\n> **发送带参数的请求**\n>\n> - `url`直接带参数\n>\n> > ```python\n> > # http://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=python&fenlei=256&rsv_pq=8cb91fd5000035bd&rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=9&rsv_sug1=7&rsv_sug7=101&rsv_sug2=0&rsv_btype=i&prefixsug=python&rsp=5&inputT=2667&rsv_sug4=6046\n> > \n> > # 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个\n> > # http://www.baidu.com/s?wd=python\n> > # 这个才是关键，然后进行get请求\n> > url = 'http://www.baidu.com/s?wd=python'\n> > headers = {\n> >     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > ##  注意，get请求不要使用https\n> > response = requests.get(url, headers=headers)\n> > ```\n>\n> - 使用`params`携带参数字典\n>\n> > ```python\n> > url = 'http://www.baidu.com/s?'  # 注意这里需要加上s?，这个是百度的特性\n> > data = {\n> >  'wd': 'python'\n> > }\n> > heads = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'}\n> > response = requests.get(url, params=data, headers=heads)\n> > ```\n>\n> **携带`cookie`信息，`cookie`一般有时效性，过段时间需要重新获取**\n>\n> - 以`github`为列\n>\n> > 见下列图片，浏览器抓包\n> >\n> > ![image-20211201111147337](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008253.png)\n>\n> - 在`headers`携带\n>\n> > ```python\n> > headers={\n> >  'cookie': 'xxxx',\n> >  'User-Agent': 'xxxx'\n> > }\n> > \n> > ```\n>\n> - 使用`cookie`参数来保持\n>\n> > ```python\n> > # 构建cookie字典\n> > # 需要先切割键值对\n> > # 如下列cookie\n> > cookies = '_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode={\"color_mode\":\"auto\",\"light_theme\":{\"name\":\"light\",\"color_mode\":\"light\"},\"dark_theme\":{\"name\":\"dark\",\"color_mode\":\"dark\"}}; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A=='\n> > cookies = cookies.splie(\"; \")\n> > cookies_ = {}\n> > for cookie in cookies:\n> >  cookies_[cookie.split('=')[0]] = cookie.splie('=')[-1]\n> > \n> > # 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对\n> > respose = requests.get(url,headers=headers,cookies=cookies_)\n> > ```\n>\n> - `cookieJar`对象转换成`cookie`字典，一般用不到\n>\n> > ```python\n> > # 什么是cookieJar对象呢，如下\n> > requests.get(url).cookie\t\t# 这个就是cookieJar对象\n> > dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   # cookiejar转换成字典\n> > \n> > jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  # 重新转化成cookiejar\n> > \n> > ```\n>\n> **`timeout`的用法**\n>\n> - 设置一下\n>\n> > ```python\n> > wresponse = requests.get(url, timeout=3)  # 设为3s，一般设个十秒左右就好\n> > ```\n> >\n> > \n>\n> **代理`Proxy`**\n>\n> > 代理分为正向代理和反向代理\n> >\n> > 代理还分为透明代理、匿名代理、高匿代理\n> >\n> > - 透明代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Your IP\n> > > ```\n> >\n> > - 匿名代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Proxy IP\n> > > ```\n> >\n> > - 高匿代理\n> >\n> > > ```shell\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = not determined\n> > > HTTP_X_FORWARDED_FOR = not determined\n> > > ```\n> >\n> > 代理还可分为，`http、https、socks`\n> >\n> > - `http`：目标`url`为`http`协议\n> > - `https`：目标`url`为`https`协议\n> > - `socks`：只传递数据包，不在乎什么应用协议，耗时少\n> >\n> > **用法**\n> >\n> > > ```python\n> > > proxies = {\n> > >  'http': 'http://127.0.0.1:7890',\n> > >  'https': 'http://127.0.0.1:7890'\n> > > }\n> > > response = requests.get(url, proxies=proxies)\n> > > ```\n> > >\n> > > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> > >\n> > > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> > >\n> > > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - 并且代理站点可能会给你添加一下信息，使得你更像一个浏览器\n> > - 代理也有可能截获你的数据，所以这个也要注意\n>\n> **`verify`忽略`CA`证书**\n>\n> > 很多情况如下图所示\n> >\n> > > ![image-20211201192347257](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008307.png)\n> >\n> > 爬虫过程遇到下列情况\n> >\n> > > ```python\n> > > requests.exceptions.SSLError: HTTPSConnection.....\n> > > ```\n> >\n> > 设置为`False`即可\n> >\n> > > ```python\n> > > # 默认是True，设置为False\n> > > # 运行过程会报警告的，但是 don't worry it 爬虫还是可以爬取内容的\n> > > response = requests.get(url, verify=False)\n> > > ```\n>\n> **`post`请求**\n>\n> > `post`用途\n> >\n> > - 一般有账号密码，都会使用`post`请求，因为`get`请求是在`url`中的明文\n> > - 大文件以及多数据，都是使用`post`\n> > - `web`工程师会认为`post`比`get`请求更加安全\n> >\n> > 简单实现\n> >\n> > > ```python\n> > > respose = requests.post(url, data) # data是一个字典\n> > > ```\n> >\n> > 找`data`的步骤寻找固定值：一般来说浏览器抓抓包就知道了\n> >\n> > - 寻找输入值：也一般来说浏览器抓抓包就知道了\n> > - 寻找预设值 - 静态文件：一般来说，需要从`html`文件中搜索，可以尝试，这个是反爬的\n> > - 寻找预设值 - 发请求：需要对指定地址发送请求\n> > - 寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用`Javascript`生成\n> >\n> > `data`反爬套路\n> >\n> > - 模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的\n> > - 注意时间戳什么的\n> > - 注意里面的`JS`文件\n> > - 有些可能是随机值\n> > - 从`html`提取，可以试试无痕浏览器\n>\n> **`requess.session`状态保持**\n>\n> - 自动保持`cookie`，一般多次请求（如登录之后再操作的），使用方法\n>\n> > ```python\n> > session = requests.session()\n> > session.headers = {\n> > \n> > }\n> > session.data = {\n> > \n> > }\n> > response = session.get(url)\n> > response = session.post(url)\n> > \n> > # 如下用法\n> > s = rq.session()\n> > s.trust_env\n> > s.verify\n> > s.headers\n> > s.proxies\n> > s.cookies\n> > s.get(url, data=data)\n> > s.post(url, data=data)\n> > ```\n\n## 正则表达式，这个也是重点\n\n> **首先如何使用正则表达式**\n>\n> > ```python\n> > response = requests.get(url)\n> > restr = response.content.decode()   # 转成utf-8或者gbk\n> > # 正则提取\n> > import re  # 导入正则模块\n> > str_tmp = \"<link href=\\\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"   # 临时字符串，不用写到代码里\n> > # 假如想要获取上面中的href，那么这样写正则表达式\n> > # 正则\n> > restr = '<link href=\\\"(.*?)\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">'   # 这个是以非贪婪模式匹配多个字符\n> > # 然后匹配一下全文，看看是否获取了对应的\n> > dst_list = re.findall(restr, str_tmp)   # 打印一下看看就知道了\n> > ```\n> >\n> > \n\n## 额外补充知识\n\n> **`form`表单**\n>\n> - 以`github`为例\n> - 一般来说，`form`表单上面会有很多消息可挖掘，如下图所示\n>\n> > ![image-20211201205057556](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052010824.png)\n> >\n> > - 其中，`action`指的是提交给的路径\n> > - `method`是提交方法\n> > - `token`这个一般用来表示保持的意思，同行的`value`表示`token`的值\n> > - 而下面这个`name`，就是输入标签将里面的值提交给什么了，这里是提交给`login`\n>\n> **往往需要多次抓包，多次比较才行，找出差异**\n>\n> - 如在无痕串口进行多次退出和登录\n> - 主要是为了找出`post`的变值（不包括输入值，除非输入值不是明文传输）\n>\n> **注意多次爬虫，需要注意页面的跳转**\n>\n> - 比如登录的时候，一般会跳转的\n\n\n## 结束语\n\n​\t\t**技术永远是好东西，只是拿来做什么**\n\n","slug":"Python爬虫学习","published":1,"updated":"2022-04-07T13:47:51.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y1w000728u5hwsjbblu","content":"<p>​        <strong><em>这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇<a href=\"https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/\">博客</a>。</em></strong></p>\n<h2 id=\"1、requests模块的使用\"><a href=\"#1、requests模块的使用\" class=\"headerlink\" title=\"1、requests模块的使用\"></a>1、<code>requests</code>模块的使用</h2><blockquote>\n<p><strong>response的用法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ====== 1、基础知识  ======== #</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.baidu.com&quot;</span></span><br><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(respones.text)\t\t\t<span class=\"comment\"># 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.content.decode())   \t</span><br><span class=\"line\"><span class=\"comment\"># content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode(&#x27;gbk&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1</span></span><br><span class=\"line\"><span class=\"comment\"># 有些平台可能上述都不行，那就用bytes存储就好</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(responst.encoding)\t\t\t<span class=\"comment\"># 推测的遍码格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然可以先设置encoding</span></span><br><span class=\"line\">response.encoding = <span class=\"string\">&quot;utf8&quot;</span>   <span class=\"comment\"># 注意不是写成 utf-8</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)   <span class=\"comment\"># 即可按照utf-8解码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ====== 2、常见的对象参数和方法  ======== #</span></span><br><span class=\"line\"><span class=\"comment\"># 响应的url</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.url)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 状态码（一般来说，不要相信）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应的请求头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应请求的cookie 返回cookieJar类型</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request._cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应的cookie</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动将json字符串类型的响应内容转换成python对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.json())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>关闭代理</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxies = &#123;<span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>, <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\">response = rq.get(url, headers=headers, verify=<span class=\"literal\">False</span>, proxies=proxies) <span class=\"comment\"># 关闭代理，关闭ssl认证</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"><a href=\"#2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\" class=\"headerlink\" title=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"></a>2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）</h2><blockquote>\n<p><strong>获取所有数据，勾选<code>All</code></strong></p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052011268.png\" alt=\"image-20211201095759608\"></p>\n</blockquote>\n<p><strong>登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新</strong></p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008211.png\" alt=\"image-20211201205357600\"></p>\n</blockquote>\n<p><strong>查看请求数据和响应数据</strong></p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008042.png\" alt=\"image-20211201195017543\"></p>\n</blockquote>\n<p><strong>关于请求头的一些参数意义</strong></p>\n<blockquote>\n<p><code>Referer</code>：这个是解释从哪个网站跳转的</p>\n<p><code>User-Agent</code>：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要</p>\n<p><code>Cookie</code>：这个分为<code>请求cookie</code>和<code>响应cookie</code>，分开使用</p>\n<p><code>host</code>：请求域名</p>\n<p><code>Connection</code>：是否保持连接，例如<code>keep-alive</code>，<code>close</code></p>\n<p><code>Upgrade-Insecure-Requests</code>：升级为<code>https</code></p>\n</blockquote>\n<p><strong>关于响应头的一些参数意义</strong> - 响应头一般是返回参数，主要看请求头</p>\n<blockquote>\n<p><code>Set-Cookie</code>：设置的<code>cookie</code></p>\n<p>状态码：200表示成功，但是，一般不要关注状态码，因为其不可信</p>\n</blockquote>\n<p><strong>常见的单词意义</strong></p>\n<blockquote>\n<p><code>token</code>：这个是一般为了保持的浏览器的连接性</p>\n</blockquote>\n<p><strong>注意事项</strong></p>\n<blockquote>\n<p>上面的<code>host</code>是域名，不一定是请求<code>url</code>，请求url看下面图</p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008032.png\" alt=\"image-20211201194750582\"></p>\n</blockquote>\n</blockquote>\n<p><strong>其他帮助网站合集</strong></p>\n<blockquote>\n<ul>\n<li><p><a href=\"https://www.json.cn/\">在线字符串转<code>json</code></a></p>\n</li>\n<li><p><strong>免费代理站点</strong></p>\n<blockquote>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"3、爬虫入门一\"><a href=\"#3、爬虫入门一\" class=\"headerlink\" title=\"3、爬虫入门一\"></a>3、爬虫入门一</h2><blockquote>\n<p><strong>注意请求头中的一些参数</strong></p>\n<ul>\n<li><code>User-Agent</code>：包含了很多参数，如浏览器数据，系统数据等</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span>  <span class=\"comment\"># 最好不要加到这一行的值，因为会报错，不明白为什么</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response1 = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>发送带参数的请求</strong></p>\n<ul>\n<li><code>url</code>直接带参数</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=python&amp;fenlei=256&amp;rsv_pq=8cb91fd5000035bd&amp;rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=9&amp;rsv_sug1=7&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;prefixsug=python&amp;rsp=5&amp;inputT=2667&amp;rsv_sug4=6046</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个</span></span><br><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?wd=python</span></span><br><span class=\"line\"><span class=\"comment\"># 这个才是关键，然后进行get请求</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?wd=python&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">##  注意，get请求不要使用https</span></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>params</code>携带参数字典</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?&#x27;</span>  <span class=\"comment\"># 注意这里需要加上s?，这个是百度的特性</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;wd&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">heads = &#123;<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span>&#125;</span><br><span class=\"line\">response = requests.get(url, params=data, headers=heads)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>携带<code>cookie</code>信息，<code>cookie</code>一般有时效性，过段时间需要重新获取</strong></p>\n<ul>\n<li>以<code>github</code>为列</li>\n</ul>\n<blockquote>\n<p>见下列图片，浏览器抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008253.png\" alt=\"image-20211201111147337\"></p>\n</blockquote>\n<ul>\n<li>在<code>headers</code>携带</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers=&#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;cookie&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>cookie</code>参数来保持</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建cookie字典</span></span><br><span class=\"line\"><span class=\"comment\"># 需要先切割键值对</span></span><br><span class=\"line\"><span class=\"comment\"># 如下列cookie</span></span><br><span class=\"line\">cookies = <span class=\"string\">&#x27;_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode=&#123;&quot;color_mode&quot;:&quot;auto&quot;,&quot;light_theme&quot;:&#123;&quot;name&quot;:&quot;light&quot;,&quot;color_mode&quot;:&quot;light&quot;&#125;,&quot;dark_theme&quot;:&#123;&quot;name&quot;:&quot;dark&quot;,&quot;color_mode&quot;:&quot;dark&quot;&#125;&#125;; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A==&#x27;</span></span><br><span class=\"line\">cookies = cookies.splie(<span class=\"string\">&quot;; &quot;</span>)</span><br><span class=\"line\">cookies_ = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cookies:</span><br><span class=\"line\"> cookies_[cookie.split(<span class=\"string\">&#x27;=&#x27;</span>)[<span class=\"number\">0</span>]] = cookie.splie(<span class=\"string\">&#x27;=&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对</span></span><br><span class=\"line\">respose = requests.get(url,headers=headers,cookies=cookies_)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><code>cookieJar</code>对象转换成<code>cookie</code>字典，一般用不到</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 什么是cookieJar对象呢，如下</span></span><br><span class=\"line\">requests.get(url).cookie\t\t<span class=\"comment\"># 这个就是cookieJar对象</span></span><br><span class=\"line\">dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   <span class=\"comment\"># cookiejar转换成字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  <span class=\"comment\"># 重新转化成cookiejar</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong><code>timeout</code>的用法</strong></p>\n<ul>\n<li>设置一下</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">wresponse = requests.get(url, timeout=<span class=\"number\">3</span>)  <span class=\"comment\"># 设为3s，一般设个十秒左右就好</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>代理<code>Proxy</code></strong></p>\n<blockquote>\n<p>代理分为正向代理和反向代理</p>\n<p>代理还分为透明代理、匿名代理、高匿代理</p>\n<ul>\n<li>透明代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Your IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>匿名代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Proxy IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>高匿代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = not determined</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = not determined</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>代理还可分为，<code>http、https、socks</code></p>\n<ul>\n<li><code>http</code>：目标<code>url</code>为<code>http</code>协议</li>\n<li><code>https</code>：目标<code>url</code>为<code>https</code>协议</li>\n<li><code>socks</code>：只传递数据包，不在乎什么应用协议，耗时少</li>\n</ul>\n<p><strong>用法</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;https&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n<ul>\n<li>并且代理站点可能会给你添加一下信息，使得你更像一个浏览器</li>\n<li>代理也有可能截获你的数据，所以这个也要注意</li>\n</ul>\n</blockquote>\n<p><strong><code>verify</code>忽略<code>CA</code>证书</strong></p>\n<blockquote>\n<p>很多情况如下图所示</p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008307.png\" alt=\"image-20211201192347257\"></p>\n</blockquote>\n<p>爬虫过程遇到下列情况</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">requests.exceptions.SSLError: HTTPSConnection.....</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>设置为<code>False</code>即可</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认是True，设置为False</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程会报警告的，但是 don&#x27;t worry it 爬虫还是可以爬取内容的</span></span><br><span class=\"line\">response = requests.get(url, verify=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><strong><code>post</code>请求</strong></p>\n<blockquote>\n<p><code>post</code>用途</p>\n<ul>\n<li>一般有账号密码，都会使用<code>post</code>请求，因为<code>get</code>请求是在<code>url</code>中的明文</li>\n<li>大文件以及多数据，都是使用<code>post</code></li>\n<li><code>web</code>工程师会认为<code>post</code>比<code>get</code>请求更加安全</li>\n</ul>\n<p>简单实现</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">respose = requests.post(url, data) <span class=\"comment\"># data是一个字典</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>找<code>data</code>的步骤寻找固定值：一般来说浏览器抓抓包就知道了</p>\n<ul>\n<li>寻找输入值：也一般来说浏览器抓抓包就知道了</li>\n<li>寻找预设值 - 静态文件：一般来说，需要从<code>html</code>文件中搜索，可以尝试，这个是反爬的</li>\n<li>寻找预设值 - 发请求：需要对指定地址发送请求</li>\n<li>寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用<code>Javascript</code>生成</li>\n</ul>\n<p><code>data</code>反爬套路</p>\n<ul>\n<li>模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的</li>\n<li>注意时间戳什么的</li>\n<li>注意里面的<code>JS</code>文件</li>\n<li>有些可能是随机值</li>\n<li>从<code>html</code>提取，可以试试无痕浏览器</li>\n</ul>\n</blockquote>\n<p><strong><code>requess.session</code>状态保持</strong></p>\n<ul>\n<li>自动保持<code>cookie</code>，一般多次请求（如登录之后再操作的），使用方法</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">session.data = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = session.get(url)</span><br><span class=\"line\">response = session.post(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下用法</span></span><br><span class=\"line\">s = rq.session()</span><br><span class=\"line\">s.trust_env</span><br><span class=\"line\">s.verify</span><br><span class=\"line\">s.headers</span><br><span class=\"line\">s.proxies</span><br><span class=\"line\">s.cookies</span><br><span class=\"line\">s.get(url, data=data)</span><br><span class=\"line\">s.post(url, data=data)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"正则表达式，这个也是重点\"><a href=\"#正则表达式，这个也是重点\" class=\"headerlink\" title=\"正则表达式，这个也是重点\"></a>正则表达式，这个也是重点</h2><blockquote>\n<p><strong>首先如何使用正则表达式</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\">restr = response.content.decode()   <span class=\"comment\"># 转成utf-8或者gbk</span></span><br><span class=\"line\"><span class=\"comment\"># 正则提取</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re  <span class=\"comment\"># 导入正则模块</span></span><br><span class=\"line\">str_tmp = <span class=\"string\">&quot;&lt;link href=\\&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&quot;</span>   <span class=\"comment\"># 临时字符串，不用写到代码里</span></span><br><span class=\"line\"><span class=\"comment\"># 假如想要获取上面中的href，那么这样写正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">restr = <span class=\"string\">&#x27;&lt;link href=\\&quot;(.*?)\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&#x27;</span>   <span class=\"comment\"># 这个是以非贪婪模式匹配多个字符</span></span><br><span class=\"line\"><span class=\"comment\"># 然后匹配一下全文，看看是否获取了对应的</span></span><br><span class=\"line\">dst_list = re.findall(restr, str_tmp)   <span class=\"comment\"># 打印一下看看就知道了</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"额外补充知识\"><a href=\"#额外补充知识\" class=\"headerlink\" title=\"额外补充知识\"></a>额外补充知识</h2><blockquote>\n<p><strong><code>form</code>表单</strong></p>\n<ul>\n<li>以<code>github</code>为例</li>\n<li>一般来说，<code>form</code>表单上面会有很多消息可挖掘，如下图所示</li>\n</ul>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052010824.png\" alt=\"image-20211201205057556\"></p>\n<ul>\n<li>其中，<code>action</code>指的是提交给的路径</li>\n<li><code>method</code>是提交方法</li>\n<li><code>token</code>这个一般用来表示保持的意思，同行的<code>value</code>表示<code>token</code>的值</li>\n<li>而下面这个<code>name</code>，就是输入标签将里面的值提交给什么了，这里是提交给<code>login</code></li>\n</ul>\n</blockquote>\n<p><strong>往往需要多次抓包，多次比较才行，找出差异</strong></p>\n<ul>\n<li>如在无痕串口进行多次退出和登录</li>\n<li>主要是为了找出<code>post</code>的变值（不包括输入值，除非输入值不是明文传输）</li>\n</ul>\n<p><strong>注意多次爬虫，需要注意页面的跳转</strong></p>\n<ul>\n<li>比如登录的时候，一般会跳转的</li>\n</ul>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>​        <strong>技术永远是好东西，只是拿来做什么</strong></p>\n","site":{"data":{}},"more":"<p>​        <strong><em>这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇<a href=\"https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/\">博客</a>。</em></strong></p>\n<h2 id=\"1、requests模块的使用\"><a href=\"#1、requests模块的使用\" class=\"headerlink\" title=\"1、requests模块的使用\"></a>1、<code>requests</code>模块的使用</h2><blockquote>\n<p><strong>response的用法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ====== 1、基础知识  ======== #</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.baidu.com&quot;</span></span><br><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(respones.text)\t\t\t<span class=\"comment\"># 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.content.decode())   \t</span><br><span class=\"line\"><span class=\"comment\"># content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode(&#x27;gbk&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1</span></span><br><span class=\"line\"><span class=\"comment\"># 有些平台可能上述都不行，那就用bytes存储就好</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(responst.encoding)\t\t\t<span class=\"comment\"># 推测的遍码格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然可以先设置encoding</span></span><br><span class=\"line\">response.encoding = <span class=\"string\">&quot;utf8&quot;</span>   <span class=\"comment\"># 注意不是写成 utf-8</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)   <span class=\"comment\"># 即可按照utf-8解码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ====== 2、常见的对象参数和方法  ======== #</span></span><br><span class=\"line\"><span class=\"comment\"># 响应的url</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.url)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 状态码（一般来说，不要相信）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应的请求头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应请求的cookie 返回cookieJar类型</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request._cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应的cookie</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动将json字符串类型的响应内容转换成python对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.json())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>关闭代理</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxies = &#123;<span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>, <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\">response = rq.get(url, headers=headers, verify=<span class=\"literal\">False</span>, proxies=proxies) <span class=\"comment\"># 关闭代理，关闭ssl认证</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"><a href=\"#2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\" class=\"headerlink\" title=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"></a>2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）</h2><blockquote>\n<p><strong>获取所有数据，勾选<code>All</code></strong></p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052011268.png\" alt=\"image-20211201095759608\"></p>\n</blockquote>\n<p><strong>登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新</strong></p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008211.png\" alt=\"image-20211201205357600\"></p>\n</blockquote>\n<p><strong>查看请求数据和响应数据</strong></p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008042.png\" alt=\"image-20211201195017543\"></p>\n</blockquote>\n<p><strong>关于请求头的一些参数意义</strong></p>\n<blockquote>\n<p><code>Referer</code>：这个是解释从哪个网站跳转的</p>\n<p><code>User-Agent</code>：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要</p>\n<p><code>Cookie</code>：这个分为<code>请求cookie</code>和<code>响应cookie</code>，分开使用</p>\n<p><code>host</code>：请求域名</p>\n<p><code>Connection</code>：是否保持连接，例如<code>keep-alive</code>，<code>close</code></p>\n<p><code>Upgrade-Insecure-Requests</code>：升级为<code>https</code></p>\n</blockquote>\n<p><strong>关于响应头的一些参数意义</strong> - 响应头一般是返回参数，主要看请求头</p>\n<blockquote>\n<p><code>Set-Cookie</code>：设置的<code>cookie</code></p>\n<p>状态码：200表示成功，但是，一般不要关注状态码，因为其不可信</p>\n</blockquote>\n<p><strong>常见的单词意义</strong></p>\n<blockquote>\n<p><code>token</code>：这个是一般为了保持的浏览器的连接性</p>\n</blockquote>\n<p><strong>注意事项</strong></p>\n<blockquote>\n<p>上面的<code>host</code>是域名，不一定是请求<code>url</code>，请求url看下面图</p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008032.png\" alt=\"image-20211201194750582\"></p>\n</blockquote>\n</blockquote>\n<p><strong>其他帮助网站合集</strong></p>\n<blockquote>\n<ul>\n<li><p><a href=\"https://www.json.cn/\">在线字符串转<code>json</code></a></p>\n</li>\n<li><p><strong>免费代理站点</strong></p>\n<blockquote>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"3、爬虫入门一\"><a href=\"#3、爬虫入门一\" class=\"headerlink\" title=\"3、爬虫入门一\"></a>3、爬虫入门一</h2><blockquote>\n<p><strong>注意请求头中的一些参数</strong></p>\n<ul>\n<li><code>User-Agent</code>：包含了很多参数，如浏览器数据，系统数据等</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span>  <span class=\"comment\"># 最好不要加到这一行的值，因为会报错，不明白为什么</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response1 = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>发送带参数的请求</strong></p>\n<ul>\n<li><code>url</code>直接带参数</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=python&amp;fenlei=256&amp;rsv_pq=8cb91fd5000035bd&amp;rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=9&amp;rsv_sug1=7&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;prefixsug=python&amp;rsp=5&amp;inputT=2667&amp;rsv_sug4=6046</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个</span></span><br><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?wd=python</span></span><br><span class=\"line\"><span class=\"comment\"># 这个才是关键，然后进行get请求</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?wd=python&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">##  注意，get请求不要使用https</span></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>params</code>携带参数字典</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?&#x27;</span>  <span class=\"comment\"># 注意这里需要加上s?，这个是百度的特性</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;wd&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">heads = &#123;<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span>&#125;</span><br><span class=\"line\">response = requests.get(url, params=data, headers=heads)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>携带<code>cookie</code>信息，<code>cookie</code>一般有时效性，过段时间需要重新获取</strong></p>\n<ul>\n<li>以<code>github</code>为列</li>\n</ul>\n<blockquote>\n<p>见下列图片，浏览器抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008253.png\" alt=\"image-20211201111147337\"></p>\n</blockquote>\n<ul>\n<li>在<code>headers</code>携带</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers=&#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;cookie&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>cookie</code>参数来保持</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建cookie字典</span></span><br><span class=\"line\"><span class=\"comment\"># 需要先切割键值对</span></span><br><span class=\"line\"><span class=\"comment\"># 如下列cookie</span></span><br><span class=\"line\">cookies = <span class=\"string\">&#x27;_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode=&#123;&quot;color_mode&quot;:&quot;auto&quot;,&quot;light_theme&quot;:&#123;&quot;name&quot;:&quot;light&quot;,&quot;color_mode&quot;:&quot;light&quot;&#125;,&quot;dark_theme&quot;:&#123;&quot;name&quot;:&quot;dark&quot;,&quot;color_mode&quot;:&quot;dark&quot;&#125;&#125;; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A==&#x27;</span></span><br><span class=\"line\">cookies = cookies.splie(<span class=\"string\">&quot;; &quot;</span>)</span><br><span class=\"line\">cookies_ = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cookies:</span><br><span class=\"line\"> cookies_[cookie.split(<span class=\"string\">&#x27;=&#x27;</span>)[<span class=\"number\">0</span>]] = cookie.splie(<span class=\"string\">&#x27;=&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对</span></span><br><span class=\"line\">respose = requests.get(url,headers=headers,cookies=cookies_)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><code>cookieJar</code>对象转换成<code>cookie</code>字典，一般用不到</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 什么是cookieJar对象呢，如下</span></span><br><span class=\"line\">requests.get(url).cookie\t\t<span class=\"comment\"># 这个就是cookieJar对象</span></span><br><span class=\"line\">dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   <span class=\"comment\"># cookiejar转换成字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  <span class=\"comment\"># 重新转化成cookiejar</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong><code>timeout</code>的用法</strong></p>\n<ul>\n<li>设置一下</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">wresponse = requests.get(url, timeout=<span class=\"number\">3</span>)  <span class=\"comment\"># 设为3s，一般设个十秒左右就好</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>代理<code>Proxy</code></strong></p>\n<blockquote>\n<p>代理分为正向代理和反向代理</p>\n<p>代理还分为透明代理、匿名代理、高匿代理</p>\n<ul>\n<li>透明代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Your IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>匿名代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Proxy IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>高匿代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = not determined</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = not determined</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>代理还可分为，<code>http、https、socks</code></p>\n<ul>\n<li><code>http</code>：目标<code>url</code>为<code>http</code>协议</li>\n<li><code>https</code>：目标<code>url</code>为<code>https</code>协议</li>\n<li><code>socks</code>：只传递数据包，不在乎什么应用协议，耗时少</li>\n</ul>\n<p><strong>用法</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;https&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n<ul>\n<li>并且代理站点可能会给你添加一下信息，使得你更像一个浏览器</li>\n<li>代理也有可能截获你的数据，所以这个也要注意</li>\n</ul>\n</blockquote>\n<p><strong><code>verify</code>忽略<code>CA</code>证书</strong></p>\n<blockquote>\n<p>很多情况如下图所示</p>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052008307.png\" alt=\"image-20211201192347257\"></p>\n</blockquote>\n<p>爬虫过程遇到下列情况</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">requests.exceptions.SSLError: HTTPSConnection.....</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>设置为<code>False</code>即可</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认是True，设置为False</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程会报警告的，但是 don&#x27;t worry it 爬虫还是可以爬取内容的</span></span><br><span class=\"line\">response = requests.get(url, verify=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><strong><code>post</code>请求</strong></p>\n<blockquote>\n<p><code>post</code>用途</p>\n<ul>\n<li>一般有账号密码，都会使用<code>post</code>请求，因为<code>get</code>请求是在<code>url</code>中的明文</li>\n<li>大文件以及多数据，都是使用<code>post</code></li>\n<li><code>web</code>工程师会认为<code>post</code>比<code>get</code>请求更加安全</li>\n</ul>\n<p>简单实现</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">respose = requests.post(url, data) <span class=\"comment\"># data是一个字典</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>找<code>data</code>的步骤寻找固定值：一般来说浏览器抓抓包就知道了</p>\n<ul>\n<li>寻找输入值：也一般来说浏览器抓抓包就知道了</li>\n<li>寻找预设值 - 静态文件：一般来说，需要从<code>html</code>文件中搜索，可以尝试，这个是反爬的</li>\n<li>寻找预设值 - 发请求：需要对指定地址发送请求</li>\n<li>寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用<code>Javascript</code>生成</li>\n</ul>\n<p><code>data</code>反爬套路</p>\n<ul>\n<li>模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的</li>\n<li>注意时间戳什么的</li>\n<li>注意里面的<code>JS</code>文件</li>\n<li>有些可能是随机值</li>\n<li>从<code>html</code>提取，可以试试无痕浏览器</li>\n</ul>\n</blockquote>\n<p><strong><code>requess.session</code>状态保持</strong></p>\n<ul>\n<li>自动保持<code>cookie</code>，一般多次请求（如登录之后再操作的），使用方法</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">session.data = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = session.get(url)</span><br><span class=\"line\">response = session.post(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下用法</span></span><br><span class=\"line\">s = rq.session()</span><br><span class=\"line\">s.trust_env</span><br><span class=\"line\">s.verify</span><br><span class=\"line\">s.headers</span><br><span class=\"line\">s.proxies</span><br><span class=\"line\">s.cookies</span><br><span class=\"line\">s.get(url, data=data)</span><br><span class=\"line\">s.post(url, data=data)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"正则表达式，这个也是重点\"><a href=\"#正则表达式，这个也是重点\" class=\"headerlink\" title=\"正则表达式，这个也是重点\"></a>正则表达式，这个也是重点</h2><blockquote>\n<p><strong>首先如何使用正则表达式</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\">restr = response.content.decode()   <span class=\"comment\"># 转成utf-8或者gbk</span></span><br><span class=\"line\"><span class=\"comment\"># 正则提取</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re  <span class=\"comment\"># 导入正则模块</span></span><br><span class=\"line\">str_tmp = <span class=\"string\">&quot;&lt;link href=\\&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&quot;</span>   <span class=\"comment\"># 临时字符串，不用写到代码里</span></span><br><span class=\"line\"><span class=\"comment\"># 假如想要获取上面中的href，那么这样写正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">restr = <span class=\"string\">&#x27;&lt;link href=\\&quot;(.*?)\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&#x27;</span>   <span class=\"comment\"># 这个是以非贪婪模式匹配多个字符</span></span><br><span class=\"line\"><span class=\"comment\"># 然后匹配一下全文，看看是否获取了对应的</span></span><br><span class=\"line\">dst_list = re.findall(restr, str_tmp)   <span class=\"comment\"># 打印一下看看就知道了</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"额外补充知识\"><a href=\"#额外补充知识\" class=\"headerlink\" title=\"额外补充知识\"></a>额外补充知识</h2><blockquote>\n<p><strong><code>form</code>表单</strong></p>\n<ul>\n<li>以<code>github</code>为例</li>\n<li>一般来说，<code>form</code>表单上面会有很多消息可挖掘，如下图所示</li>\n</ul>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052010824.png\" alt=\"image-20211201205057556\"></p>\n<ul>\n<li>其中，<code>action</code>指的是提交给的路径</li>\n<li><code>method</code>是提交方法</li>\n<li><code>token</code>这个一般用来表示保持的意思，同行的<code>value</code>表示<code>token</code>的值</li>\n<li>而下面这个<code>name</code>，就是输入标签将里面的值提交给什么了，这里是提交给<code>login</code></li>\n</ul>\n</blockquote>\n<p><strong>往往需要多次抓包，多次比较才行，找出差异</strong></p>\n<ul>\n<li>如在无痕串口进行多次退出和登录</li>\n<li>主要是为了找出<code>post</code>的变值（不包括输入值，除非输入值不是明文传输）</li>\n</ul>\n<p><strong>注意多次爬虫，需要注意页面的跳转</strong></p>\n<ul>\n<li>比如登录的时候，一般会跳转的</li>\n</ul>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>​        <strong>技术永远是好东西，只是拿来做什么</strong></p>\n"},{"title":"Python爬虫学习-更加友好的教程","cover":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052018349.png","date":"2022-04-05T12:07:16.000Z","excerpt":"准备拿来社团授课的教程，比之前那一篇更加清晰一点","_content":"\n# `Python`爬虫入门教程\n\n---\n\n## 基础知识\n\n### 什么是`HTML、CSS、JavaScript`\n\n> 网页往往采用`html+css+js`开发，`html`是一门标记语言\n>\n> 如下：\n>\n> ```html\n> <!- 将下面这句话放入html文件中，-->\n> <!- 然后浏览器就会将这句话解释为下面那张图片，-->\n> <!- 这个就是浏览器渲染的功能-->\n> <!- 这里我们知道了一个词——浏览器的渲染   -->\n> <!- 并且我们发现，浏览器会在下面这个网址 自动 -->\n> <!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 -->\n> <img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png\"\n> width=\"300px\">\n> ```\n>\n> <img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png\" width=\"300px\">\n\n### 什么是请求，什么是响应\n\n> 请求：就是前端向后端发送一个请求，如请求我的账户浏览记录\n>\n> 响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应\n>\n> `JavaScript`中有请求，浏览器渲染到其中的请求，就会向后端发送请求\n\n### 什么是`GET`，什么是`POST`\n\n> 这个是两种请求方式而已，`get`直接把请求数据放在链接里面，`post`一般以则不是\n\n### 什么是`Cookie`\n\n> 曲奇饼干？不是\n>\n> 打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园\n>\n> 那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码\n>\n> 然后，你一天可以通过刷脸，这个刷脸就是`cookie`，今天进出校园不需要再申请了\n>\n> 这个就是`cookie`的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录\n\n### `Python`基本语法\n\n> 这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点\n>\n> ```python\n> a = 1\n> b = 2\n> # if结构\n> if a > b:\n>  print(\"a大于b\")\n> else:\n>  print(\"a不大于b\")\n> \n> # while循环\n> while True:\n>  print(\"这里面是while循环\")\n> \n> # 列表和字典\n> m = [\"hello\", 2, 4.5]  # 列表支持不同数据类型，并且可以随意扩充和删减\n> n = {\t\t\t# 字典里面每个元素都是   键值:值   组成\n>  \"key1\": 3,\n>  \"key3\": \"hello\"\n> }\n> m[0]    ## 索引到第0个元素，即 \"hello\"\n> n[\"key1\"]   ## 索引到键值为\"key1\"的值，即 3\n> ```\n\n### 什么是抓包\n\n> 打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包\n>\n```mermaid\ngraph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)\n```\n>\n> **那么我们需要抓什么包呢？抓包的用处在哪呢？**\n>\n> 答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应\n\n### 什么是代理\n\n> 不进行代理应该是下列图：\n>\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A\n```\n>\n> \n>\n> 代理就是如下：\n>\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A\n```\n\n### 如何伪造呢？\n\n> 1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览\n>\n> 2、欸，但我就想用代码进行浏览，怎么办呢？\n>\n> 3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器\n>\n> 4、具体就是抓包，分析数据，用代码发送请求\n\n---\n\n## 浏览器抓包\n\n### 进入调试模式\n\n> 打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式\n>\n> ![image-20211219160806912](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019536.png)\n>\n> 一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。\n> 如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。\n>\n> <img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019319.png\" width=\"300px\">\n\n> - 红圈1、找到页面上的元素分别对应哪句`html`标签\n> - 红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个\n> - 红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录\n> - 红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型\n\n### 如何寻找数据呢？\n\n> ![image-20211219162409621](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019519.png)\n>\n> 我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦\n>\n> 听起来是不是很简单呢？\n>\n> <kbd>简单</kbd> 打在公屏上\n\n---\n\n## 分析数据\n\n### 浏览器人性化查看数据\n\n> <center><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033311.png\" width=\"450px\"><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033151.png\" width=\"450px\"></center>\n>\n> 第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的\n>\n> 第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项\n\n### 分析请求标头\n\n> **这么多的数据，我应该怎么办呢？**\n>\n> - `User-Agent`：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36`，这个代表是`chrome`浏览器的标识\n> - `Referer`：它其实是`refer`，就是代表这个网也从哪个网页来的\n> - `cookie`：就是`cookie`，前面基础知识提到过\n> - `请求网址`：就是你向哪个网址发送请求，请求的对象是哪个\n>\n> **查看载荷**\n>\n> 如上面第二张图中的请求网址是：![image-20211219170540421](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019090.png)\n>\n> 分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的\n>\n> 多个<kbd>字符串参数</kbd>用`&`链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd>\n>\n> ![image-20211219170645219](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019096.png)\n>\n> **POST请求不仅仅只有请求头还有请求数据**\n>\n> 下面是百度翻译的`post`请求的载荷\n>\n> ![image-20211219170803923](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019112.png)\n>\n> 上面和`get`请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分\n\n这些都是基础概念，之后会用到，现在先学学\n\n### 分析响应数据\n\n> 响应数据多种多样，常见的有：`html`文本，图片文件，表单数据，视频文件等等\n>\n> 其中，图片文件和视频文件等都是二进制格式\n>\n> `html`文本和表单数据是文本格式\n\n> - `html`文本\n>\n> 一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等\n>\n> 我们一般都需要分析一下这个文件\n>\n> - 图片文件\n>\n> 直接以二进制的形式写入本地就相当于下载下来\n>\n> - 表单数据\n>\n> 返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了\n\n## 代码编写\n\n有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。\n\n[***`requests`教程***](https://docs.python-requests.org/zh_CN/latest/user/quickstart.html)\n\n#### 导入`requests`包\n\n> 下载：`pip install requests`\n>\n> 导入：`import requests`\n>\n> `emmmmm `怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧\n\n#### `requests`包的使用\n\n> 这个教程顺序可能和网上很多都不一样\n>\n> ```python\n> import requests as rq\n> import json\n> import re\n> \n> tool = rq.session()   # 这个会返回一个爬虫工具箱，并且它会自动维持cookie\n> \n> verify=False   # 设置是否进行SSL验证，一般设置为否\n> url=\"https://baidu.com\"  # 这里请求百度的数据\n> headers={   # 设置请求头\n>  \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\"\n>   \"537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n> }\n> proxies={    # 设置代理\n>  \"http\": None,\n>  \"https\": None\n> }\n> params={   # 设置字符串参数\n> \n> }\n> data={  # 设置请求表单\n> \n> }\n> \n> # 发送get请求，得到get响应\n> responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)\n> # 发送post请求，得到post响应\n> responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)\n> \n> # 解析响应\n> # 1、假如响应是文本数据，如html文本\n> response = responseGet\n> response.content # 这个是内容，是二进制编码\n> response.content.decode(\"gbk\")  # 使用gbk解码，不加参数就是utf-8解码\n> # 2、假如响应是图片数据\n> with open(\"1.png\", \"wb\") as f:\n>  f.write(response.content)   # 直接以二进制写入文件\n> # 3、假如响应是表单数据\n> dat = json.loads(response.content.decode())   # 返回的就是一个字典数据了\n> \n> ```\n\n#### 正则表达式简单用法\n\n> 爬虫中的正则表达式一般会比较简单\n>\n> ```python\n> import re   # 导入正则表达式包\n> # 假如有下列字符串需要被匹配\n> # str1 = \"<link href=\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\"\n> # rel=\"stylesheet\" type=\"text/css\">\"\n> # 其中href中的是我们需要的那么\n> html = response.content.decode()\n> restr = \"<link\\\\shref=\\\"(.*?)\\\"\\\\srel=\\\"stylesheet\\\"\\\\stype=\\\"text/css\\\">\"\n> dst_list = re.findall(restr, html)   # 返回一个列表\n> # 上面这条语句，会将html里面所有形如str1中的href都返回到列表中\n> \n> # 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了\n> # 只需要进行如下操作遍历列表就行\n> for pngurl in dst_list:\n>  print(pngurl)\n> ```\n\n---\n\n# 结束语\n\n​\t\t爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。***概不负责***。\n\n​\t\t爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。\n\n​\t\t本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能`emmmmmm...`。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。\n\n​\t\t任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。\n","source":"_posts/Python爬虫学习——面向初学者.md","raw":"---\ntitle: Python爬虫学习-更加友好的教程\ncover: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052018349.png'\ndate: 2022-04-05 20:07:16\ntags:\n  - Python\n  - 爬虫\nexcerpt: '准备拿来社团授课的教程，比之前那一篇更加清晰一点'\ncategories: \n  - Python\n  - 爬虫\n---\n\n# `Python`爬虫入门教程\n\n---\n\n## 基础知识\n\n### 什么是`HTML、CSS、JavaScript`\n\n> 网页往往采用`html+css+js`开发，`html`是一门标记语言\n>\n> 如下：\n>\n> ```html\n> <!- 将下面这句话放入html文件中，-->\n> <!- 然后浏览器就会将这句话解释为下面那张图片，-->\n> <!- 这个就是浏览器渲染的功能-->\n> <!- 这里我们知道了一个词——浏览器的渲染   -->\n> <!- 并且我们发现，浏览器会在下面这个网址 自动 -->\n> <!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 -->\n> <img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png\"\n> width=\"300px\">\n> ```\n>\n> <img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png\" width=\"300px\">\n\n### 什么是请求，什么是响应\n\n> 请求：就是前端向后端发送一个请求，如请求我的账户浏览记录\n>\n> 响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应\n>\n> `JavaScript`中有请求，浏览器渲染到其中的请求，就会向后端发送请求\n\n### 什么是`GET`，什么是`POST`\n\n> 这个是两种请求方式而已，`get`直接把请求数据放在链接里面，`post`一般以则不是\n\n### 什么是`Cookie`\n\n> 曲奇饼干？不是\n>\n> 打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园\n>\n> 那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码\n>\n> 然后，你一天可以通过刷脸，这个刷脸就是`cookie`，今天进出校园不需要再申请了\n>\n> 这个就是`cookie`的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录\n\n### `Python`基本语法\n\n> 这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点\n>\n> ```python\n> a = 1\n> b = 2\n> # if结构\n> if a > b:\n>  print(\"a大于b\")\n> else:\n>  print(\"a不大于b\")\n> \n> # while循环\n> while True:\n>  print(\"这里面是while循环\")\n> \n> # 列表和字典\n> m = [\"hello\", 2, 4.5]  # 列表支持不同数据类型，并且可以随意扩充和删减\n> n = {\t\t\t# 字典里面每个元素都是   键值:值   组成\n>  \"key1\": 3,\n>  \"key3\": \"hello\"\n> }\n> m[0]    ## 索引到第0个元素，即 \"hello\"\n> n[\"key1\"]   ## 索引到键值为\"key1\"的值，即 3\n> ```\n\n### 什么是抓包\n\n> 打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包\n>\n```mermaid\ngraph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)\n```\n>\n> **那么我们需要抓什么包呢？抓包的用处在哪呢？**\n>\n> 答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应\n\n### 什么是代理\n\n> 不进行代理应该是下列图：\n>\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A\n```\n>\n> \n>\n> 代理就是如下：\n>\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A\n```\n\n### 如何伪造呢？\n\n> 1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览\n>\n> 2、欸，但我就想用代码进行浏览，怎么办呢？\n>\n> 3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器\n>\n> 4、具体就是抓包，分析数据，用代码发送请求\n\n---\n\n## 浏览器抓包\n\n### 进入调试模式\n\n> 打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式\n>\n> ![image-20211219160806912](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019536.png)\n>\n> 一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。\n> 如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。\n>\n> <img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019319.png\" width=\"300px\">\n\n> - 红圈1、找到页面上的元素分别对应哪句`html`标签\n> - 红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个\n> - 红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录\n> - 红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型\n\n### 如何寻找数据呢？\n\n> ![image-20211219162409621](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019519.png)\n>\n> 我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦\n>\n> 听起来是不是很简单呢？\n>\n> <kbd>简单</kbd> 打在公屏上\n\n---\n\n## 分析数据\n\n### 浏览器人性化查看数据\n\n> <center><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033311.png\" width=\"450px\"><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033151.png\" width=\"450px\"></center>\n>\n> 第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的\n>\n> 第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项\n\n### 分析请求标头\n\n> **这么多的数据，我应该怎么办呢？**\n>\n> - `User-Agent`：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36`，这个代表是`chrome`浏览器的标识\n> - `Referer`：它其实是`refer`，就是代表这个网也从哪个网页来的\n> - `cookie`：就是`cookie`，前面基础知识提到过\n> - `请求网址`：就是你向哪个网址发送请求，请求的对象是哪个\n>\n> **查看载荷**\n>\n> 如上面第二张图中的请求网址是：![image-20211219170540421](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019090.png)\n>\n> 分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的\n>\n> 多个<kbd>字符串参数</kbd>用`&`链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd>\n>\n> ![image-20211219170645219](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019096.png)\n>\n> **POST请求不仅仅只有请求头还有请求数据**\n>\n> 下面是百度翻译的`post`请求的载荷\n>\n> ![image-20211219170803923](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019112.png)\n>\n> 上面和`get`请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分\n\n这些都是基础概念，之后会用到，现在先学学\n\n### 分析响应数据\n\n> 响应数据多种多样，常见的有：`html`文本，图片文件，表单数据，视频文件等等\n>\n> 其中，图片文件和视频文件等都是二进制格式\n>\n> `html`文本和表单数据是文本格式\n\n> - `html`文本\n>\n> 一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等\n>\n> 我们一般都需要分析一下这个文件\n>\n> - 图片文件\n>\n> 直接以二进制的形式写入本地就相当于下载下来\n>\n> - 表单数据\n>\n> 返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了\n\n## 代码编写\n\n有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。\n\n[***`requests`教程***](https://docs.python-requests.org/zh_CN/latest/user/quickstart.html)\n\n#### 导入`requests`包\n\n> 下载：`pip install requests`\n>\n> 导入：`import requests`\n>\n> `emmmmm `怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧\n\n#### `requests`包的使用\n\n> 这个教程顺序可能和网上很多都不一样\n>\n> ```python\n> import requests as rq\n> import json\n> import re\n> \n> tool = rq.session()   # 这个会返回一个爬虫工具箱，并且它会自动维持cookie\n> \n> verify=False   # 设置是否进行SSL验证，一般设置为否\n> url=\"https://baidu.com\"  # 这里请求百度的数据\n> headers={   # 设置请求头\n>  \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\"\n>   \"537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n> }\n> proxies={    # 设置代理\n>  \"http\": None,\n>  \"https\": None\n> }\n> params={   # 设置字符串参数\n> \n> }\n> data={  # 设置请求表单\n> \n> }\n> \n> # 发送get请求，得到get响应\n> responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)\n> # 发送post请求，得到post响应\n> responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)\n> \n> # 解析响应\n> # 1、假如响应是文本数据，如html文本\n> response = responseGet\n> response.content # 这个是内容，是二进制编码\n> response.content.decode(\"gbk\")  # 使用gbk解码，不加参数就是utf-8解码\n> # 2、假如响应是图片数据\n> with open(\"1.png\", \"wb\") as f:\n>  f.write(response.content)   # 直接以二进制写入文件\n> # 3、假如响应是表单数据\n> dat = json.loads(response.content.decode())   # 返回的就是一个字典数据了\n> \n> ```\n\n#### 正则表达式简单用法\n\n> 爬虫中的正则表达式一般会比较简单\n>\n> ```python\n> import re   # 导入正则表达式包\n> # 假如有下列字符串需要被匹配\n> # str1 = \"<link href=\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\"\n> # rel=\"stylesheet\" type=\"text/css\">\"\n> # 其中href中的是我们需要的那么\n> html = response.content.decode()\n> restr = \"<link\\\\shref=\\\"(.*?)\\\"\\\\srel=\\\"stylesheet\\\"\\\\stype=\\\"text/css\\\">\"\n> dst_list = re.findall(restr, html)   # 返回一个列表\n> # 上面这条语句，会将html里面所有形如str1中的href都返回到列表中\n> \n> # 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了\n> # 只需要进行如下操作遍历列表就行\n> for pngurl in dst_list:\n>  print(pngurl)\n> ```\n\n---\n\n# 结束语\n\n​\t\t爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。***概不负责***。\n\n​\t\t爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。\n\n​\t\t本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能`emmmmmm...`。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。\n\n​\t\t任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。\n","slug":"Python爬虫学习——面向初学者","published":1,"updated":"2022-04-05T13:12:11.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y1y000928u5106mbux9","content":"<h1 id=\"Python爬虫入门教程\"><a href=\"#Python爬虫入门教程\" class=\"headerlink\" title=\"Python爬虫入门教程\"></a><code>Python</code>爬虫入门教程</h1><hr>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是HTML、CSS、JavaScript\"><a href=\"#什么是HTML、CSS、JavaScript\" class=\"headerlink\" title=\"什么是HTML、CSS、JavaScript\"></a>什么是<code>HTML、CSS、JavaScript</code></h3><blockquote>\n<p>网页往往采用<code>html+css+js</code>开发，<code>html</code>是一门标记语言</p>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!- 将下面这句话放入html文件中，--&gt;</span><br><span class=\"line\">&lt;!- 然后浏览器就会将这句话解释为下面那张图片，--&gt;</span><br><span class=\"line\">&lt;!- 这个就是浏览器渲染的功能--&gt;</span><br><span class=\"line\">&lt;!- 这里我们知道了一个词——浏览器的渲染   --&gt;</span><br><span class=\"line\">&lt;!- 并且我们发现，浏览器会在下面这个网址 自动 --&gt;</span><br><span class=\"line\">&lt;!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 --&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">width</span>=<span class=\"string\">&quot;300px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png\" width=\"300px\"></p>\n</blockquote>\n<h3 id=\"什么是请求，什么是响应\"><a href=\"#什么是请求，什么是响应\" class=\"headerlink\" title=\"什么是请求，什么是响应\"></a>什么是请求，什么是响应</h3><blockquote>\n<p>请求：就是前端向后端发送一个请求，如请求我的账户浏览记录</p>\n<p>响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应</p>\n<p><code>JavaScript</code>中有请求，浏览器渲染到其中的请求，就会向后端发送请求</p>\n</blockquote>\n<h3 id=\"什么是GET，什么是POST\"><a href=\"#什么是GET，什么是POST\" class=\"headerlink\" title=\"什么是GET，什么是POST\"></a>什么是<code>GET</code>，什么是<code>POST</code></h3><blockquote>\n<p>这个是两种请求方式而已，<code>get</code>直接把请求数据放在链接里面，<code>post</code>一般以则不是</p>\n</blockquote>\n<h3 id=\"什么是Cookie\"><a href=\"#什么是Cookie\" class=\"headerlink\" title=\"什么是Cookie\"></a>什么是<code>Cookie</code></h3><blockquote>\n<p>曲奇饼干？不是</p>\n<p>打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园</p>\n<p>那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码</p>\n<p>然后，你一天可以通过刷脸，这个刷脸就是<code>cookie</code>，今天进出校园不需要再申请了</p>\n<p>这个就是<code>cookie</code>的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录</p>\n</blockquote>\n<h3 id=\"Python基本语法\"><a href=\"#Python基本语法\" class=\"headerlink\" title=\"Python基本语法\"></a><code>Python</code>基本语法</h3><blockquote>\n<p>这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># if结构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a大于b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a不大于b&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># while循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这里面是while循环&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表和字典</span></span><br><span class=\"line\">m = [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">4.5</span>]  <span class=\"comment\"># 列表支持不同数据类型，并且可以随意扩充和删减</span></span><br><span class=\"line\">n = &#123;\t\t\t<span class=\"comment\"># 字典里面每个元素都是   键值:值   组成</span></span><br><span class=\"line\"> <span class=\"string\">&quot;key1&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;key3&quot;</span>: <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m[<span class=\"number\">0</span>]    <span class=\"comment\">## 索引到第0个元素，即 &quot;hello&quot;</span></span><br><span class=\"line\">n[<span class=\"string\">&quot;key1&quot;</span>]   <span class=\"comment\">## 索引到键值为&quot;key1&quot;的值，即 3</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"什么是抓包\"><a href=\"#什么是抓包\" class=\"headerlink\" title=\"什么是抓包\"></a>什么是抓包</h3><blockquote>\n<p>打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包</p>\n<pre class=\"mermaid\">graph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)</pre>\n\n<p><strong>那么我们需要抓什么包呢？抓包的用处在哪呢？</strong></p>\n<p>答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应</p>\n</blockquote>\n<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><blockquote>\n<p>不进行代理应该是下列图：</p>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A</pre>\n\n\n\n<p>代理就是如下：</p>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A</pre>\n\n</blockquote>\n<h3 id=\"如何伪造呢？\"><a href=\"#如何伪造呢？\" class=\"headerlink\" title=\"如何伪造呢？\"></a>如何伪造呢？</h3><blockquote>\n<p>1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览</p>\n<p>2、欸，但我就想用代码进行浏览，怎么办呢？</p>\n<p>3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器</p>\n<p>4、具体就是抓包，分析数据，用代码发送请求</p>\n</blockquote>\n<hr>\n<h2 id=\"浏览器抓包\"><a href=\"#浏览器抓包\" class=\"headerlink\" title=\"浏览器抓包\"></a>浏览器抓包</h2><h3 id=\"进入调试模式\"><a href=\"#进入调试模式\" class=\"headerlink\" title=\"进入调试模式\"></a>进入调试模式</h3><blockquote>\n<p>打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019536.png\" alt=\"image-20211219160806912\"></p>\n<p>一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。<br>如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019319.png\" width=\"300px\"></p>\n<ul>\n<li>红圈1、找到页面上的元素分别对应哪句<code>html</code>标签</li>\n<li>红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个</li>\n<li>红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录</li>\n<li>红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型</li>\n</ul>\n</blockquote>\n<h3 id=\"如何寻找数据呢？\"><a href=\"#如何寻找数据呢？\" class=\"headerlink\" title=\"如何寻找数据呢？\"></a>如何寻找数据呢？</h3><blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019519.png\" alt=\"image-20211219162409621\"></p>\n<p>我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦</p>\n<p>听起来是不是很简单呢？</p>\n<p><kbd>简单</kbd> 打在公屏上</p>\n</blockquote>\n<hr>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><h3 id=\"浏览器人性化查看数据\"><a href=\"#浏览器人性化查看数据\" class=\"headerlink\" title=\"浏览器人性化查看数据\"></a>浏览器人性化查看数据</h3><blockquote>\n<center><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033311.png\" width=\"450px\"><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033151.png\" width=\"450px\"></center>\n\n<p>第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的</p>\n<p>第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项</p>\n</blockquote>\n<h3 id=\"分析请求标头\"><a href=\"#分析请求标头\" class=\"headerlink\" title=\"分析请求标头\"></a>分析请求标头</h3><blockquote>\n<p><strong>这么多的数据，我应该怎么办呢？</strong></p>\n<ul>\n<li><code>User-Agent</code>：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</code>，这个代表是<code>chrome</code>浏览器的标识</li>\n<li><code>Referer</code>：它其实是<code>refer</code>，就是代表这个网也从哪个网页来的</li>\n<li><code>cookie</code>：就是<code>cookie</code>，前面基础知识提到过</li>\n<li><code>请求网址</code>：就是你向哪个网址发送请求，请求的对象是哪个</li>\n</ul>\n<p><strong>查看载荷</strong></p>\n<p>如上面第二张图中的请求网址是：<img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019090.png\" alt=\"image-20211219170540421\"></p>\n<p>分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的</p>\n<p>多个<kbd>字符串参数</kbd>用<code>&amp;</code>链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019096.png\" alt=\"image-20211219170645219\"></p>\n<p><strong>POST请求不仅仅只有请求头还有请求数据</strong></p>\n<p>下面是百度翻译的<code>post</code>请求的载荷</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019112.png\" alt=\"image-20211219170803923\"></p>\n<p>上面和<code>get</code>请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分</p>\n</blockquote>\n<p>这些都是基础概念，之后会用到，现在先学学</p>\n<h3 id=\"分析响应数据\"><a href=\"#分析响应数据\" class=\"headerlink\" title=\"分析响应数据\"></a>分析响应数据</h3><blockquote>\n<p>响应数据多种多样，常见的有：<code>html</code>文本，图片文件，表单数据，视频文件等等</p>\n<p>其中，图片文件和视频文件等都是二进制格式</p>\n<p><code>html</code>文本和表单数据是文本格式</p>\n<ul>\n<li><code>html</code>文本</li>\n</ul>\n<p>一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等</p>\n<p>我们一般都需要分析一下这个文件</p>\n<ul>\n<li>图片文件</li>\n</ul>\n<p>直接以二进制的形式写入本地就相当于下载下来</p>\n<ul>\n<li>表单数据</li>\n</ul>\n<p>返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了</p>\n</blockquote>\n<h2 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h2><p>有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。</p>\n<p><a href=\"https://docs.python-requests.org/zh_CN/latest/user/quickstart.html\"><strong><em><code>requests</code>教程</em></strong></a></p>\n<h4 id=\"导入requests包\"><a href=\"#导入requests包\" class=\"headerlink\" title=\"导入requests包\"></a>导入<code>requests</code>包</h4><blockquote>\n<p>下载：<code>pip install requests</code></p>\n<p>导入：<code>import requests</code></p>\n<p><code>emmmmm</code>怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧</p>\n</blockquote>\n<h4 id=\"requests包的使用\"><a href=\"#requests包的使用\" class=\"headerlink\" title=\"requests包的使用\"></a><code>requests</code>包的使用</h4><blockquote>\n<p>这个教程顺序可能和网上很多都不一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">tool = rq.session()   <span class=\"comment\"># 这个会返回一个爬虫工具箱，并且它会自动维持cookie</span></span><br><span class=\"line\"></span><br><span class=\"line\">verify=<span class=\"literal\">False</span>   <span class=\"comment\"># 设置是否进行SSL验证，一般设置为否</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;https://baidu.com&quot;</span>  <span class=\"comment\"># 这里请求百度的数据</span></span><br><span class=\"line\">headers=&#123;   <span class=\"comment\"># 设置请求头</span></span><br><span class=\"line\"> <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">proxies=&#123;    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"> <span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params=&#123;   <span class=\"comment\"># 设置字符串参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data=&#123;  <span class=\"comment\"># 设置请求表单</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送get请求，得到get响应</span></span><br><span class=\"line\">responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"><span class=\"comment\"># 发送post请求，得到post响应</span></span><br><span class=\"line\">responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析响应</span></span><br><span class=\"line\"><span class=\"comment\"># 1、假如响应是文本数据，如html文本</span></span><br><span class=\"line\">response = responseGet</span><br><span class=\"line\">response.content <span class=\"comment\"># 这个是内容，是二进制编码</span></span><br><span class=\"line\">response.content.decode(<span class=\"string\">&quot;gbk&quot;</span>)  <span class=\"comment\"># 使用gbk解码，不加参数就是utf-8解码</span></span><br><span class=\"line\"><span class=\"comment\"># 2、假如响应是图片数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.png&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> f.write(response.content)   <span class=\"comment\"># 直接以二进制写入文件</span></span><br><span class=\"line\"><span class=\"comment\"># 3、假如响应是表单数据</span></span><br><span class=\"line\">dat = json.loads(response.content.decode())   <span class=\"comment\"># 返回的就是一个字典数据了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"正则表达式简单用法\"><a href=\"#正则表达式简单用法\" class=\"headerlink\" title=\"正则表达式简单用法\"></a>正则表达式简单用法</h4><blockquote>\n<p>爬虫中的正则表达式一般会比较简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re   <span class=\"comment\"># 导入正则表达式包</span></span><br><span class=\"line\"><span class=\"comment\"># 假如有下列字符串需要被匹配</span></span><br><span class=\"line\"><span class=\"comment\"># str1 = &quot;&lt;link href=&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其中href中的是我们需要的那么</span></span><br><span class=\"line\">html = response.content.decode()</span><br><span class=\"line\">restr = <span class=\"string\">&quot;&lt;link\\\\shref=\\&quot;(.*?)\\&quot;\\\\srel=\\&quot;stylesheet\\&quot;\\\\stype=\\&quot;text/css\\&quot;&gt;&quot;</span></span><br><span class=\"line\">dst_list = re.findall(restr, html)   <span class=\"comment\"># 返回一个列表</span></span><br><span class=\"line\"><span class=\"comment\"># 上面这条语句，会将html里面所有形如str1中的href都返回到列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了</span></span><br><span class=\"line\"><span class=\"comment\"># 只需要进行如下操作遍历列表就行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pngurl <span class=\"keyword\">in</span> dst_list:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(pngurl)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>​        爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。<strong><em>概不负责</em></strong>。</p>\n<p>​        爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。</p>\n<p>​        本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能<code>emmmmmm...</code>。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。</p>\n<p>​        任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。</p>\n","site":{"data":{}},"more":"<h1 id=\"Python爬虫入门教程\"><a href=\"#Python爬虫入门教程\" class=\"headerlink\" title=\"Python爬虫入门教程\"></a><code>Python</code>爬虫入门教程</h1><hr>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是HTML、CSS、JavaScript\"><a href=\"#什么是HTML、CSS、JavaScript\" class=\"headerlink\" title=\"什么是HTML、CSS、JavaScript\"></a>什么是<code>HTML、CSS、JavaScript</code></h3><blockquote>\n<p>网页往往采用<code>html+css+js</code>开发，<code>html</code>是一门标记语言</p>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!- 将下面这句话放入html文件中，--&gt;</span><br><span class=\"line\">&lt;!- 然后浏览器就会将这句话解释为下面那张图片，--&gt;</span><br><span class=\"line\">&lt;!- 这个就是浏览器渲染的功能--&gt;</span><br><span class=\"line\">&lt;!- 这里我们知道了一个词——浏览器的渲染   --&gt;</span><br><span class=\"line\">&lt;!- 并且我们发现，浏览器会在下面这个网址 自动 --&gt;</span><br><span class=\"line\">&lt;!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 --&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">width</span>=<span class=\"string\">&quot;300px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019260.png\" width=\"300px\"></p>\n</blockquote>\n<h3 id=\"什么是请求，什么是响应\"><a href=\"#什么是请求，什么是响应\" class=\"headerlink\" title=\"什么是请求，什么是响应\"></a>什么是请求，什么是响应</h3><blockquote>\n<p>请求：就是前端向后端发送一个请求，如请求我的账户浏览记录</p>\n<p>响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应</p>\n<p><code>JavaScript</code>中有请求，浏览器渲染到其中的请求，就会向后端发送请求</p>\n</blockquote>\n<h3 id=\"什么是GET，什么是POST\"><a href=\"#什么是GET，什么是POST\" class=\"headerlink\" title=\"什么是GET，什么是POST\"></a>什么是<code>GET</code>，什么是<code>POST</code></h3><blockquote>\n<p>这个是两种请求方式而已，<code>get</code>直接把请求数据放在链接里面，<code>post</code>一般以则不是</p>\n</blockquote>\n<h3 id=\"什么是Cookie\"><a href=\"#什么是Cookie\" class=\"headerlink\" title=\"什么是Cookie\"></a>什么是<code>Cookie</code></h3><blockquote>\n<p>曲奇饼干？不是</p>\n<p>打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园</p>\n<p>那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码</p>\n<p>然后，你一天可以通过刷脸，这个刷脸就是<code>cookie</code>，今天进出校园不需要再申请了</p>\n<p>这个就是<code>cookie</code>的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录</p>\n</blockquote>\n<h3 id=\"Python基本语法\"><a href=\"#Python基本语法\" class=\"headerlink\" title=\"Python基本语法\"></a><code>Python</code>基本语法</h3><blockquote>\n<p>这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># if结构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a大于b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a不大于b&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># while循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这里面是while循环&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表和字典</span></span><br><span class=\"line\">m = [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">4.5</span>]  <span class=\"comment\"># 列表支持不同数据类型，并且可以随意扩充和删减</span></span><br><span class=\"line\">n = &#123;\t\t\t<span class=\"comment\"># 字典里面每个元素都是   键值:值   组成</span></span><br><span class=\"line\"> <span class=\"string\">&quot;key1&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;key3&quot;</span>: <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m[<span class=\"number\">0</span>]    <span class=\"comment\">## 索引到第0个元素，即 &quot;hello&quot;</span></span><br><span class=\"line\">n[<span class=\"string\">&quot;key1&quot;</span>]   <span class=\"comment\">## 索引到键值为&quot;key1&quot;的值，即 3</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"什么是抓包\"><a href=\"#什么是抓包\" class=\"headerlink\" title=\"什么是抓包\"></a>什么是抓包</h3><blockquote>\n<p>打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包</p>\n<pre class=\"mermaid\">graph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)</pre>\n\n<p><strong>那么我们需要抓什么包呢？抓包的用处在哪呢？</strong></p>\n<p>答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应</p>\n</blockquote>\n<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><blockquote>\n<p>不进行代理应该是下列图：</p>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A</pre>\n\n\n\n<p>代理就是如下：</p>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A</pre>\n\n</blockquote>\n<h3 id=\"如何伪造呢？\"><a href=\"#如何伪造呢？\" class=\"headerlink\" title=\"如何伪造呢？\"></a>如何伪造呢？</h3><blockquote>\n<p>1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览</p>\n<p>2、欸，但我就想用代码进行浏览，怎么办呢？</p>\n<p>3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器</p>\n<p>4、具体就是抓包，分析数据，用代码发送请求</p>\n</blockquote>\n<hr>\n<h2 id=\"浏览器抓包\"><a href=\"#浏览器抓包\" class=\"headerlink\" title=\"浏览器抓包\"></a>浏览器抓包</h2><h3 id=\"进入调试模式\"><a href=\"#进入调试模式\" class=\"headerlink\" title=\"进入调试模式\"></a>进入调试模式</h3><blockquote>\n<p>打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019536.png\" alt=\"image-20211219160806912\"></p>\n<p>一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。<br>如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019319.png\" width=\"300px\"></p>\n<ul>\n<li>红圈1、找到页面上的元素分别对应哪句<code>html</code>标签</li>\n<li>红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个</li>\n<li>红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录</li>\n<li>红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型</li>\n</ul>\n</blockquote>\n<h3 id=\"如何寻找数据呢？\"><a href=\"#如何寻找数据呢？\" class=\"headerlink\" title=\"如何寻找数据呢？\"></a>如何寻找数据呢？</h3><blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019519.png\" alt=\"image-20211219162409621\"></p>\n<p>我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦</p>\n<p>听起来是不是很简单呢？</p>\n<p><kbd>简单</kbd> 打在公屏上</p>\n</blockquote>\n<hr>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><h3 id=\"浏览器人性化查看数据\"><a href=\"#浏览器人性化查看数据\" class=\"headerlink\" title=\"浏览器人性化查看数据\"></a>浏览器人性化查看数据</h3><blockquote>\n<center><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033311.png\" width=\"450px\"><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052033151.png\" width=\"450px\"></center>\n\n<p>第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的</p>\n<p>第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项</p>\n</blockquote>\n<h3 id=\"分析请求标头\"><a href=\"#分析请求标头\" class=\"headerlink\" title=\"分析请求标头\"></a>分析请求标头</h3><blockquote>\n<p><strong>这么多的数据，我应该怎么办呢？</strong></p>\n<ul>\n<li><code>User-Agent</code>：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</code>，这个代表是<code>chrome</code>浏览器的标识</li>\n<li><code>Referer</code>：它其实是<code>refer</code>，就是代表这个网也从哪个网页来的</li>\n<li><code>cookie</code>：就是<code>cookie</code>，前面基础知识提到过</li>\n<li><code>请求网址</code>：就是你向哪个网址发送请求，请求的对象是哪个</li>\n</ul>\n<p><strong>查看载荷</strong></p>\n<p>如上面第二张图中的请求网址是：<img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019090.png\" alt=\"image-20211219170540421\"></p>\n<p>分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的</p>\n<p>多个<kbd>字符串参数</kbd>用<code>&amp;</code>链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019096.png\" alt=\"image-20211219170645219\"></p>\n<p><strong>POST请求不仅仅只有请求头还有请求数据</strong></p>\n<p>下面是百度翻译的<code>post</code>请求的载荷</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052019112.png\" alt=\"image-20211219170803923\"></p>\n<p>上面和<code>get</code>请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分</p>\n</blockquote>\n<p>这些都是基础概念，之后会用到，现在先学学</p>\n<h3 id=\"分析响应数据\"><a href=\"#分析响应数据\" class=\"headerlink\" title=\"分析响应数据\"></a>分析响应数据</h3><blockquote>\n<p>响应数据多种多样，常见的有：<code>html</code>文本，图片文件，表单数据，视频文件等等</p>\n<p>其中，图片文件和视频文件等都是二进制格式</p>\n<p><code>html</code>文本和表单数据是文本格式</p>\n<ul>\n<li><code>html</code>文本</li>\n</ul>\n<p>一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等</p>\n<p>我们一般都需要分析一下这个文件</p>\n<ul>\n<li>图片文件</li>\n</ul>\n<p>直接以二进制的形式写入本地就相当于下载下来</p>\n<ul>\n<li>表单数据</li>\n</ul>\n<p>返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了</p>\n</blockquote>\n<h2 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h2><p>有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。</p>\n<p><a href=\"https://docs.python-requests.org/zh_CN/latest/user/quickstart.html\"><strong><em><code>requests</code>教程</em></strong></a></p>\n<h4 id=\"导入requests包\"><a href=\"#导入requests包\" class=\"headerlink\" title=\"导入requests包\"></a>导入<code>requests</code>包</h4><blockquote>\n<p>下载：<code>pip install requests</code></p>\n<p>导入：<code>import requests</code></p>\n<p><code>emmmmm</code>怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧</p>\n</blockquote>\n<h4 id=\"requests包的使用\"><a href=\"#requests包的使用\" class=\"headerlink\" title=\"requests包的使用\"></a><code>requests</code>包的使用</h4><blockquote>\n<p>这个教程顺序可能和网上很多都不一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">tool = rq.session()   <span class=\"comment\"># 这个会返回一个爬虫工具箱，并且它会自动维持cookie</span></span><br><span class=\"line\"></span><br><span class=\"line\">verify=<span class=\"literal\">False</span>   <span class=\"comment\"># 设置是否进行SSL验证，一般设置为否</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;https://baidu.com&quot;</span>  <span class=\"comment\"># 这里请求百度的数据</span></span><br><span class=\"line\">headers=&#123;   <span class=\"comment\"># 设置请求头</span></span><br><span class=\"line\"> <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">proxies=&#123;    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"> <span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params=&#123;   <span class=\"comment\"># 设置字符串参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data=&#123;  <span class=\"comment\"># 设置请求表单</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送get请求，得到get响应</span></span><br><span class=\"line\">responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"><span class=\"comment\"># 发送post请求，得到post响应</span></span><br><span class=\"line\">responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析响应</span></span><br><span class=\"line\"><span class=\"comment\"># 1、假如响应是文本数据，如html文本</span></span><br><span class=\"line\">response = responseGet</span><br><span class=\"line\">response.content <span class=\"comment\"># 这个是内容，是二进制编码</span></span><br><span class=\"line\">response.content.decode(<span class=\"string\">&quot;gbk&quot;</span>)  <span class=\"comment\"># 使用gbk解码，不加参数就是utf-8解码</span></span><br><span class=\"line\"><span class=\"comment\"># 2、假如响应是图片数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.png&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> f.write(response.content)   <span class=\"comment\"># 直接以二进制写入文件</span></span><br><span class=\"line\"><span class=\"comment\"># 3、假如响应是表单数据</span></span><br><span class=\"line\">dat = json.loads(response.content.decode())   <span class=\"comment\"># 返回的就是一个字典数据了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"正则表达式简单用法\"><a href=\"#正则表达式简单用法\" class=\"headerlink\" title=\"正则表达式简单用法\"></a>正则表达式简单用法</h4><blockquote>\n<p>爬虫中的正则表达式一般会比较简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re   <span class=\"comment\"># 导入正则表达式包</span></span><br><span class=\"line\"><span class=\"comment\"># 假如有下列字符串需要被匹配</span></span><br><span class=\"line\"><span class=\"comment\"># str1 = &quot;&lt;link href=&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其中href中的是我们需要的那么</span></span><br><span class=\"line\">html = response.content.decode()</span><br><span class=\"line\">restr = <span class=\"string\">&quot;&lt;link\\\\shref=\\&quot;(.*?)\\&quot;\\\\srel=\\&quot;stylesheet\\&quot;\\\\stype=\\&quot;text/css\\&quot;&gt;&quot;</span></span><br><span class=\"line\">dst_list = re.findall(restr, html)   <span class=\"comment\"># 返回一个列表</span></span><br><span class=\"line\"><span class=\"comment\"># 上面这条语句，会将html里面所有形如str1中的href都返回到列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了</span></span><br><span class=\"line\"><span class=\"comment\"># 只需要进行如下操作遍历列表就行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pngurl <span class=\"keyword\">in</span> dst_list:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(pngurl)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>​        爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。<strong><em>概不负责</em></strong>。</p>\n<p>​        爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。</p>\n<p>​        本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能<code>emmmmmm...</code>。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。</p>\n<p>​        任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。</p>\n"},{"title":"Windows右键打开注册表配置","date":"2022-04-05T11:27:00.000Z","excerpt":"使得能右键以某个软件打开","cover":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051934962.png","_content":"win+R regedit调出注册表\n\n```shell\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\\n```\n\n> 上面这个路径下新建项：Open with ……\n\n> 然后Open with ……新建项Command\n\n> Command 默认为 路径\\…….。exe  \"%1\"\n\n> 然后Open with ……新建Icon字符串值\n\n> 为路径\\…….。exe\n\n![image-20210102212700378](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936063.png)\n\n![image-20210102212729670](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936887.png)\n","source":"_posts/Windows右键打开注册表配置.md","raw":"---\ntitle: Windows右键打开注册表配置\ndate: 2022-04-05 19:27:00\ntags: \n\t- 计算机妙招\n\t- 注册表\n\t- Windows\nexcerpt: 使得能右键以某个软件打开\ncover: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051934962.png'\ncategories: 计算机事半功倍\n---\nwin+R regedit调出注册表\n\n```shell\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\\n```\n\n> 上面这个路径下新建项：Open with ……\n\n> 然后Open with ……新建项Command\n\n> Command 默认为 路径\\…….。exe  \"%1\"\n\n> 然后Open with ……新建Icon字符串值\n\n> 为路径\\…….。exe\n\n![image-20210102212700378](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936063.png)\n\n![image-20210102212729670](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936887.png)\n","slug":"Windows右键打开注册表配置","published":1,"updated":"2022-04-05T11:47:19.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y1z000b28u51okhgv23","content":"<p>win+R regedit调出注册表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面这个路径下新建项：Open with ……</p>\n<p>然后Open with ……新建项Command</p>\n<p>Command 默认为 路径\\…….。exe  “%1”</p>\n<p>然后Open with ……新建Icon字符串值</p>\n<p>为路径\\…….。exe</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936063.png\" alt=\"image-20210102212700378\"></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936887.png\" alt=\"image-20210102212729670\"></p>\n","site":{"data":{}},"more":"<p>win+R regedit调出注册表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面这个路径下新建项：Open with ……</p>\n<p>然后Open with ……新建项Command</p>\n<p>Command 默认为 路径\\…….。exe  “%1”</p>\n<p>然后Open with ……新建Icon字符串值</p>\n<p>为路径\\…….。exe</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936063.png\" alt=\"image-20210102212700378\"></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051936887.png\" alt=\"image-20210102212729670\"></p>\n"},{"title":"Windows局域网共享文件","date":"2022-04-05T11:27:37.000Z","excerpt":"采取原始的网络连接方式，让数据传输变得快速","cover":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051949856.png","_content":"\n## 开启地方1、设置\n\n![image-20220309223046115](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051946490.png)\n\n控制面板 --> 网络和Internet --> 网络和共享中心 --> 高级共享设置\n\n记得关闭 密码保护共享\n\n## 开启地方2、文件夹\n\n右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享\n\n![image-20220405195030682](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051950781.png)\n\n\n\n关闭共享如下图所示\n\n![image-20220405195106733](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051951817.png)\n\n","source":"_posts/Windows局域网共享文件.md","raw":"---\ntitle: Windows局域网共享文件\ndate: 2022-04-05 19:27:37\ntags: \n\t- 计算机妙招\n\t- 局域网共享\n\t- Windows\nexcerpt: 采取原始的网络连接方式，让数据传输变得快速\ncover: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051949856.png'\ncategories: 计算机事半功倍\n---\n\n## 开启地方1、设置\n\n![image-20220309223046115](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051946490.png)\n\n控制面板 --> 网络和Internet --> 网络和共享中心 --> 高级共享设置\n\n记得关闭 密码保护共享\n\n## 开启地方2、文件夹\n\n右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享\n\n![image-20220405195030682](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051950781.png)\n\n\n\n关闭共享如下图所示\n\n![image-20220405195106733](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051951817.png)\n\n","slug":"Windows局域网共享文件","published":1,"updated":"2022-04-05T11:51:11.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y21000f28u54y2f17l1","content":"<h2 id=\"开启地方1、设置\"><a href=\"#开启地方1、设置\" class=\"headerlink\" title=\"开启地方1、设置\"></a>开启地方1、设置</h2><p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051946490.png\" alt=\"image-20220309223046115\"></p>\n<p>控制面板 —&gt; 网络和Internet —&gt; 网络和共享中心 —&gt; 高级共享设置</p>\n<p>记得关闭 密码保护共享</p>\n<h2 id=\"开启地方2、文件夹\"><a href=\"#开启地方2、文件夹\" class=\"headerlink\" title=\"开启地方2、文件夹\"></a>开启地方2、文件夹</h2><p>右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051950781.png\" alt=\"image-20220405195030682\"></p>\n<p>关闭共享如下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051951817.png\" alt=\"image-20220405195106733\"></p>\n","site":{"data":{}},"more":"<h2 id=\"开启地方1、设置\"><a href=\"#开启地方1、设置\" class=\"headerlink\" title=\"开启地方1、设置\"></a>开启地方1、设置</h2><p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051946490.png\" alt=\"image-20220309223046115\"></p>\n<p>控制面板 —&gt; 网络和Internet —&gt; 网络和共享中心 —&gt; 高级共享设置</p>\n<p>记得关闭 密码保护共享</p>\n<h2 id=\"开启地方2、文件夹\"><a href=\"#开启地方2、文件夹\" class=\"headerlink\" title=\"开启地方2、文件夹\"></a>开启地方2、文件夹</h2><p>右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051950781.png\" alt=\"image-20220405195030682\"></p>\n<p>关闭共享如下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051951817.png\" alt=\"image-20220405195106733\"></p>\n"},{"title":"图床搭建","excerpt":"搭建图床，目前只介绍了 Gitee","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181415436.png","date":"2022-05-18T05:54:33.000Z","_content":"\n# ImageRepository\n\n# 介绍\n图床，个人用来存图的图床\n\n## 简单的讲讲教程\n> 主要是害怕自己忘了，hhh\n> 因为直接在网页上写的，不想搞图片了，直接用文字代替了\n\n### 1、gitee上的操作\n>（1）在gitee上建一个仓库，然后记一下仓库名称 \n> > - 比如该仓库名称是: lmz2498369702/image-repository\n> > - 发现，是进入仓库，上面链接 gitee.com/后面的内容\n\n> (2) 生成私人令牌\n> > - 点击右上角个人头像的三角形\n> > - 点击设置\n> > - 点击左下角`私人令牌`\n> > - 之后`私人令牌`只会生成一次明码，一定要复制下来，后面有用\n\n### 2、`PicGo`设置\n>（1）下载\n> > - [`点击下载PicGo`](https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0)\n\n> (2) 设置图床\n> > - 点击`PicGo`左侧`图床设置`，选择`gitee`\n> > - `repo`中填入`仓库名称`,如`lmz2498369702/image-repository`\n> > - `token`中填入`私人令牌`\n\n> (3) 设置服务器端口\n> > 如果使用`Typora`的话，就需要这一步\n> > - 点击`PicGo`左侧`PicGo设置`\n> > - 往下滑，点击`设置Server`\n> > - 将监听端口改为`36677`，因为`Typora`默认的就是`36677`\n> > - 如果`36677`端口被用了，自行查找更改`Typora`的端口和这个端口，反正要一致\n\n### 3、`Typora`设置\n> (1) 下载，这个好像不用说吧\n\n> (2) 设置图床\n> > - 点到`偏好设置`中的`图像`\n> > - 选择`上传服务`中的`PicGo(app)`\n> > - `PicGo路径`选择你电脑安装的`PicGo`路径即可\n> > - 然后点击`验证图片上传选项`，出现上传成功即可\n\n","source":"_posts/图床搭建.md","raw":"---\ntitle: 图床搭建\ntags: \n- 图床\nexcerpt: 搭建图床，目前只介绍了 Gitee\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181415436.png\ncategories: 计算机事半功倍\ndate: 2022-05-18 13:54:33\n---\n\n# ImageRepository\n\n# 介绍\n图床，个人用来存图的图床\n\n## 简单的讲讲教程\n> 主要是害怕自己忘了，hhh\n> 因为直接在网页上写的，不想搞图片了，直接用文字代替了\n\n### 1、gitee上的操作\n>（1）在gitee上建一个仓库，然后记一下仓库名称 \n> > - 比如该仓库名称是: lmz2498369702/image-repository\n> > - 发现，是进入仓库，上面链接 gitee.com/后面的内容\n\n> (2) 生成私人令牌\n> > - 点击右上角个人头像的三角形\n> > - 点击设置\n> > - 点击左下角`私人令牌`\n> > - 之后`私人令牌`只会生成一次明码，一定要复制下来，后面有用\n\n### 2、`PicGo`设置\n>（1）下载\n> > - [`点击下载PicGo`](https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0)\n\n> (2) 设置图床\n> > - 点击`PicGo`左侧`图床设置`，选择`gitee`\n> > - `repo`中填入`仓库名称`,如`lmz2498369702/image-repository`\n> > - `token`中填入`私人令牌`\n\n> (3) 设置服务器端口\n> > 如果使用`Typora`的话，就需要这一步\n> > - 点击`PicGo`左侧`PicGo设置`\n> > - 往下滑，点击`设置Server`\n> > - 将监听端口改为`36677`，因为`Typora`默认的就是`36677`\n> > - 如果`36677`端口被用了，自行查找更改`Typora`的端口和这个端口，反正要一致\n\n### 3、`Typora`设置\n> (1) 下载，这个好像不用说吧\n\n> (2) 设置图床\n> > - 点到`偏好设置`中的`图像`\n> > - 选择`上传服务`中的`PicGo(app)`\n> > - `PicGo路径`选择你电脑安装的`PicGo`路径即可\n> > - 然后点击`验证图片上传选项`，出现上传成功即可\n\n","slug":"图床搭建","published":1,"updated":"2022-05-18T06:16:00.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y22000g28u5067z03w7","content":"<h1 id=\"ImageRepository\"><a href=\"#ImageRepository\" class=\"headerlink\" title=\"ImageRepository\"></a>ImageRepository</h1><h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>图床，个人用来存图的图床</p>\n<h2 id=\"简单的讲讲教程\"><a href=\"#简单的讲讲教程\" class=\"headerlink\" title=\"简单的讲讲教程\"></a>简单的讲讲教程</h2><blockquote>\n<p>主要是害怕自己忘了，hhh<br>因为直接在网页上写的，不想搞图片了，直接用文字代替了</p>\n</blockquote>\n<h3 id=\"1、gitee上的操作\"><a href=\"#1、gitee上的操作\" class=\"headerlink\" title=\"1、gitee上的操作\"></a>1、gitee上的操作</h3><blockquote>\n<p>（1）在gitee上建一个仓库，然后记一下仓库名称 </p>\n<blockquote>\n<ul>\n<li>比如该仓库名称是: lmz2498369702/image-repository</li>\n<li>发现，是进入仓库，上面链接 gitee.com/后面的内容</li>\n</ul>\n</blockquote>\n<p>(2) 生成私人令牌</p>\n<blockquote>\n<ul>\n<li>点击右上角个人头像的三角形</li>\n<li>点击设置</li>\n<li>点击左下角<code>私人令牌</code></li>\n<li>之后<code>私人令牌</code>只会生成一次明码，一定要复制下来，后面有用</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"2、PicGo设置\"><a href=\"#2、PicGo设置\" class=\"headerlink\" title=\"2、PicGo设置\"></a>2、<code>PicGo</code>设置</h3><blockquote>\n<p>（1）下载</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0\"><code>点击下载PicGo</code></a></li>\n</ul>\n</blockquote>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>图床设置</code>，选择<code>gitee</code></li>\n<li><code>repo</code>中填入<code>仓库名称</code>,如<code>lmz2498369702/image-repository</code></li>\n<li><code>token</code>中填入<code>私人令牌</code></li>\n</ul>\n</blockquote>\n<p>(3) 设置服务器端口</p>\n<blockquote>\n<p>如果使用<code>Typora</code>的话，就需要这一步</p>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>PicGo设置</code></li>\n<li>往下滑，点击<code>设置Server</code></li>\n<li>将监听端口改为<code>36677</code>，因为<code>Typora</code>默认的就是<code>36677</code></li>\n<li>如果<code>36677</code>端口被用了，自行查找更改<code>Typora</code>的端口和这个端口，反正要一致</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"3、Typora设置\"><a href=\"#3、Typora设置\" class=\"headerlink\" title=\"3、Typora设置\"></a>3、<code>Typora</code>设置</h3><blockquote>\n<p>(1) 下载，这个好像不用说吧</p>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点到<code>偏好设置</code>中的<code>图像</code></li>\n<li>选择<code>上传服务</code>中的<code>PicGo(app)</code></li>\n<li><code>PicGo路径</code>选择你电脑安装的<code>PicGo</code>路径即可</li>\n<li>然后点击<code>验证图片上传选项</code>，出现上传成功即可</li>\n</ul>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"more":"<h1 id=\"ImageRepository\"><a href=\"#ImageRepository\" class=\"headerlink\" title=\"ImageRepository\"></a>ImageRepository</h1><h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>图床，个人用来存图的图床</p>\n<h2 id=\"简单的讲讲教程\"><a href=\"#简单的讲讲教程\" class=\"headerlink\" title=\"简单的讲讲教程\"></a>简单的讲讲教程</h2><blockquote>\n<p>主要是害怕自己忘了，hhh<br>因为直接在网页上写的，不想搞图片了，直接用文字代替了</p>\n</blockquote>\n<h3 id=\"1、gitee上的操作\"><a href=\"#1、gitee上的操作\" class=\"headerlink\" title=\"1、gitee上的操作\"></a>1、gitee上的操作</h3><blockquote>\n<p>（1）在gitee上建一个仓库，然后记一下仓库名称 </p>\n<blockquote>\n<ul>\n<li>比如该仓库名称是: lmz2498369702/image-repository</li>\n<li>发现，是进入仓库，上面链接 gitee.com/后面的内容</li>\n</ul>\n</blockquote>\n<p>(2) 生成私人令牌</p>\n<blockquote>\n<ul>\n<li>点击右上角个人头像的三角形</li>\n<li>点击设置</li>\n<li>点击左下角<code>私人令牌</code></li>\n<li>之后<code>私人令牌</code>只会生成一次明码，一定要复制下来，后面有用</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"2、PicGo设置\"><a href=\"#2、PicGo设置\" class=\"headerlink\" title=\"2、PicGo设置\"></a>2、<code>PicGo</code>设置</h3><blockquote>\n<p>（1）下载</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0\"><code>点击下载PicGo</code></a></li>\n</ul>\n</blockquote>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>图床设置</code>，选择<code>gitee</code></li>\n<li><code>repo</code>中填入<code>仓库名称</code>,如<code>lmz2498369702/image-repository</code></li>\n<li><code>token</code>中填入<code>私人令牌</code></li>\n</ul>\n</blockquote>\n<p>(3) 设置服务器端口</p>\n<blockquote>\n<p>如果使用<code>Typora</code>的话，就需要这一步</p>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>PicGo设置</code></li>\n<li>往下滑，点击<code>设置Server</code></li>\n<li>将监听端口改为<code>36677</code>，因为<code>Typora</code>默认的就是<code>36677</code></li>\n<li>如果<code>36677</code>端口被用了，自行查找更改<code>Typora</code>的端口和这个端口，反正要一致</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"3、Typora设置\"><a href=\"#3、Typora设置\" class=\"headerlink\" title=\"3、Typora设置\"></a>3、<code>Typora</code>设置</h3><blockquote>\n<p>(1) 下载，这个好像不用说吧</p>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点到<code>偏好设置</code>中的<code>图像</code></li>\n<li>选择<code>上传服务</code>中的<code>PicGo(app)</code></li>\n<li><code>PicGo路径</code>选择你电脑安装的<code>PicGo</code>路径即可</li>\n<li>然后点击<code>验证图片上传选项</code>，出现上传成功即可</li>\n</ul>\n</blockquote>\n</blockquote>\n"},{"title":"数据结构--图","excerpt":"数据结构——图 学习与记录","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161215408.png","date":"2022-05-16T02:10:42.000Z","_content":"\n___\n\n# 图\n\n## 1、基本概念\n\n### 极大连通、极小连通、极大连通子图、极小连通子图、连通分量\n\n- 极大连通\n\n  > 在无向图中，指的是任意两点都有直接或者间接的路径\n\n- 极小连通\n\n  > 在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；**n**个节点应该有**n-1**条边\n\n- 极大连通子图和极小连通子图\n\n  > 满足上述极大连通和极小连通的子图\n  \n- 连通分量\n\n  > 指的是极大连通子图的数目\n\n- 思考：假如一个图有**n**个节点\n\n  > 如果边数小于**n-1**的话，此图必定是非连通图\n  >\n  > 非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由**n-1**构成完全图，如果此时再加入一条边，那么就会形成连通图了\n\n  \n\n### 强连通图、强连通分量\n\n- 强连通图\n\n  > 有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图\n\n- 强连通分量\n\n  > 有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’\n  >\n  > 如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}\n\n  ![image-20220516103614869](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png)\n\n- 思考：假如有n个节点的有向图\n\n  > 强连通情况下，至少需要**n**条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。\n\n### 生成树与最小生成树\n\n- 生成树\n\n  > 无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$\n  >\n  > ***生成树不唯一***\n  >\n  > 维基百科如下图定义\n\n  ![](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png)\n\n- 最小生成树\n\n  > 每条边都有权值，最小生成树就是最后生成的树，权值和最小\n\n---\n\n## 2、最小生成树算法\n\n### `Prim`算法\n\n### `Kruskal`算法\n\n## 3、最短路径算法\n\n### `Dijkstra`算法\n\n### `Floyd`算法\n\n## 4、拓扑排序与关键路径（AOV与AOE）\n\n## 5、`Graphviz`简单介绍\n\n​\t`Graphviz`是用来可视化图和树的工具，常用`.dot`文件或者`api`进行操作，[官网链接](https://graphviz.org/)。\n\n### 用法一、dot文件使用\n\n***目前还不会使用这个软件，先挖坑。***\n","source":"_posts/数据结构-图.md","raw":"---\ntitle: 数据结构--图\ntags: \n- 数据结构\n- 考研\n- 图\nexcerpt: 数据结构——图 学习与记录\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161215408.png\ncategories:\n- 数据结构与算法\ndate: 2022-05-16 10:10:42\n---\n\n___\n\n# 图\n\n## 1、基本概念\n\n### 极大连通、极小连通、极大连通子图、极小连通子图、连通分量\n\n- 极大连通\n\n  > 在无向图中，指的是任意两点都有直接或者间接的路径\n\n- 极小连通\n\n  > 在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；**n**个节点应该有**n-1**条边\n\n- 极大连通子图和极小连通子图\n\n  > 满足上述极大连通和极小连通的子图\n  \n- 连通分量\n\n  > 指的是极大连通子图的数目\n\n- 思考：假如一个图有**n**个节点\n\n  > 如果边数小于**n-1**的话，此图必定是非连通图\n  >\n  > 非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由**n-1**构成完全图，如果此时再加入一条边，那么就会形成连通图了\n\n  \n\n### 强连通图、强连通分量\n\n- 强连通图\n\n  > 有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图\n\n- 强连通分量\n\n  > 有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’\n  >\n  > 如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}\n\n  ![image-20220516103614869](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png)\n\n- 思考：假如有n个节点的有向图\n\n  > 强连通情况下，至少需要**n**条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。\n\n### 生成树与最小生成树\n\n- 生成树\n\n  > 无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$\n  >\n  > ***生成树不唯一***\n  >\n  > 维基百科如下图定义\n\n  ![](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png)\n\n- 最小生成树\n\n  > 每条边都有权值，最小生成树就是最后生成的树，权值和最小\n\n---\n\n## 2、最小生成树算法\n\n### `Prim`算法\n\n### `Kruskal`算法\n\n## 3、最短路径算法\n\n### `Dijkstra`算法\n\n### `Floyd`算法\n\n## 4、拓扑排序与关键路径（AOV与AOE）\n\n## 5、`Graphviz`简单介绍\n\n​\t`Graphviz`是用来可视化图和树的工具，常用`.dot`文件或者`api`进行操作，[官网链接](https://graphviz.org/)。\n\n### 用法一、dot文件使用\n\n***目前还不会使用这个软件，先挖坑。***\n","slug":"数据结构-图","published":1,"updated":"2022-05-17T05:34:45.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y24000k28u500co67z2","content":"<hr>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"><a href=\"#极大连通、极小连通、极大连通子图、极小连通子图、连通分量\" class=\"headerlink\" title=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"></a>极大连通、极小连通、极大连通子图、极小连通子图、连通分量</h3><ul>\n<li><p>极大连通</p>\n<blockquote>\n<p>在无向图中，指的是任意两点都有直接或者间接的路径</p>\n</blockquote>\n</li>\n<li><p>极小连通</p>\n<blockquote>\n<p>在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；<strong>n</strong>个节点应该有<strong>n-1</strong>条边</p>\n</blockquote>\n</li>\n<li><p>极大连通子图和极小连通子图</p>\n<blockquote>\n<p>满足上述极大连通和极小连通的子图</p>\n</blockquote>\n</li>\n<li><p>连通分量</p>\n<blockquote>\n<p>指的是极大连通子图的数目</p>\n</blockquote>\n</li>\n<li><p>思考：假如一个图有<strong>n</strong>个节点</p>\n<blockquote>\n<p>如果边数小于<strong>n-1</strong>的话，此图必定是非连通图</p>\n<p>非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由<strong>n-1</strong>构成完全图，如果此时再加入一条边，那么就会形成连通图了</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"强连通图、强连通分量\"><a href=\"#强连通图、强连通分量\" class=\"headerlink\" title=\"强连通图、强连通分量\"></a>强连通图、强连通分量</h3><ul>\n<li><p>强连通图</p>\n<blockquote>\n<p>有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图</p>\n</blockquote>\n</li>\n<li><p>强连通分量</p>\n<blockquote>\n<p>有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’</p>\n<p>如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png\" alt=\"image-20220516103614869\"></p>\n</li>\n<li><p>思考：假如有n个节点的有向图</p>\n<blockquote>\n<p>强连通情况下，至少需要<strong>n</strong>条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"生成树与最小生成树\"><a href=\"#生成树与最小生成树\" class=\"headerlink\" title=\"生成树与最小生成树\"></a>生成树与最小生成树</h3><ul>\n<li><p>生成树</p>\n<blockquote>\n<p>无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$</p>\n<p><strong><em>生成树不唯一</em></strong></p>\n<p>维基百科如下图定义</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png\" alt=\"\"></p>\n</li>\n<li><p>最小生成树</p>\n<blockquote>\n<p>每条边都有权值，最小生成树就是最后生成的树，权值和最小</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"2、最小生成树算法\"><a href=\"#2、最小生成树算法\" class=\"headerlink\" title=\"2、最小生成树算法\"></a>2、最小生成树算法</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a><code>Prim</code>算法</h3><h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a><code>Kruskal</code>算法</h3><h2 id=\"3、最短路径算法\"><a href=\"#3、最短路径算法\" class=\"headerlink\" title=\"3、最短路径算法\"></a>3、最短路径算法</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a><code>Dijkstra</code>算法</h3><h3 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a><code>Floyd</code>算法</h3><h2 id=\"4、拓扑排序与关键路径（AOV与AOE）\"><a href=\"#4、拓扑排序与关键路径（AOV与AOE）\" class=\"headerlink\" title=\"4、拓扑排序与关键路径（AOV与AOE）\"></a>4、拓扑排序与关键路径（AOV与AOE）</h2><h2 id=\"5、Graphviz简单介绍\"><a href=\"#5、Graphviz简单介绍\" class=\"headerlink\" title=\"5、Graphviz简单介绍\"></a>5、<code>Graphviz</code>简单介绍</h2><p>​    <code>Graphviz</code>是用来可视化图和树的工具，常用<code>.dot</code>文件或者<code>api</code>进行操作，<a href=\"https://graphviz.org/\">官网链接</a>。</p>\n<h3 id=\"用法一、dot文件使用\"><a href=\"#用法一、dot文件使用\" class=\"headerlink\" title=\"用法一、dot文件使用\"></a>用法一、dot文件使用</h3><p><strong><em>目前还不会使用这个软件，先挖坑。</em></strong></p>\n","site":{"data":{}},"more":"<hr>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"><a href=\"#极大连通、极小连通、极大连通子图、极小连通子图、连通分量\" class=\"headerlink\" title=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"></a>极大连通、极小连通、极大连通子图、极小连通子图、连通分量</h3><ul>\n<li><p>极大连通</p>\n<blockquote>\n<p>在无向图中，指的是任意两点都有直接或者间接的路径</p>\n</blockquote>\n</li>\n<li><p>极小连通</p>\n<blockquote>\n<p>在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；<strong>n</strong>个节点应该有<strong>n-1</strong>条边</p>\n</blockquote>\n</li>\n<li><p>极大连通子图和极小连通子图</p>\n<blockquote>\n<p>满足上述极大连通和极小连通的子图</p>\n</blockquote>\n</li>\n<li><p>连通分量</p>\n<blockquote>\n<p>指的是极大连通子图的数目</p>\n</blockquote>\n</li>\n<li><p>思考：假如一个图有<strong>n</strong>个节点</p>\n<blockquote>\n<p>如果边数小于<strong>n-1</strong>的话，此图必定是非连通图</p>\n<p>非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由<strong>n-1</strong>构成完全图，如果此时再加入一条边，那么就会形成连通图了</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"强连通图、强连通分量\"><a href=\"#强连通图、强连通分量\" class=\"headerlink\" title=\"强连通图、强连通分量\"></a>强连通图、强连通分量</h3><ul>\n<li><p>强连通图</p>\n<blockquote>\n<p>有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图</p>\n</blockquote>\n</li>\n<li><p>强连通分量</p>\n<blockquote>\n<p>有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’</p>\n<p>如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png\" alt=\"image-20220516103614869\"></p>\n</li>\n<li><p>思考：假如有n个节点的有向图</p>\n<blockquote>\n<p>强连通情况下，至少需要<strong>n</strong>条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"生成树与最小生成树\"><a href=\"#生成树与最小生成树\" class=\"headerlink\" title=\"生成树与最小生成树\"></a>生成树与最小生成树</h3><ul>\n<li><p>生成树</p>\n<blockquote>\n<p>无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$</p>\n<p><strong><em>生成树不唯一</em></strong></p>\n<p>维基百科如下图定义</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png\" alt=\"\"></p>\n</li>\n<li><p>最小生成树</p>\n<blockquote>\n<p>每条边都有权值，最小生成树就是最后生成的树，权值和最小</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"2、最小生成树算法\"><a href=\"#2、最小生成树算法\" class=\"headerlink\" title=\"2、最小生成树算法\"></a>2、最小生成树算法</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a><code>Prim</code>算法</h3><h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a><code>Kruskal</code>算法</h3><h2 id=\"3、最短路径算法\"><a href=\"#3、最短路径算法\" class=\"headerlink\" title=\"3、最短路径算法\"></a>3、最短路径算法</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a><code>Dijkstra</code>算法</h3><h3 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a><code>Floyd</code>算法</h3><h2 id=\"4、拓扑排序与关键路径（AOV与AOE）\"><a href=\"#4、拓扑排序与关键路径（AOV与AOE）\" class=\"headerlink\" title=\"4、拓扑排序与关键路径（AOV与AOE）\"></a>4、拓扑排序与关键路径（AOV与AOE）</h2><h2 id=\"5、Graphviz简单介绍\"><a href=\"#5、Graphviz简单介绍\" class=\"headerlink\" title=\"5、Graphviz简单介绍\"></a>5、<code>Graphviz</code>简单介绍</h2><p>​    <code>Graphviz</code>是用来可视化图和树的工具，常用<code>.dot</code>文件或者<code>api</code>进行操作，<a href=\"https://graphviz.org/\">官网链接</a>。</p>\n<h3 id=\"用法一、dot文件使用\"><a href=\"#用法一、dot文件使用\" class=\"headerlink\" title=\"用法一、dot文件使用\"></a>用法一、dot文件使用</h3><p><strong><em>目前还不会使用这个软件，先挖坑。</em></strong></p>\n"},{"title":"数据结构——串 KMP算法","excerpt":"数据结构——字符串 KMP算法 学习与记录","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161227444.png","date":"2022-05-16T04:25:41.000Z","_content":"\n# 字符串\n\n## 1、字符串存储\n\n## 2、字符串的模式匹配\n\n### KMP算法基本\n\n### `Next`数组求解\n\n### KMP算法优化，`NextVal`数组求解\n\n","source":"_posts/数据结构——串-KMP算法.md","raw":"---\ntitle: 数据结构——串 KMP算法\ntags: \n- 数据结构\n- 考研\n- 字符串\n- KMP\nexcerpt: 数据结构——字符串 KMP算法 学习与记录\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161227444.png\ncategories:\n- 数据结构与算法\ndate: 2022-05-16 12:25:41\n---\n\n# 字符串\n\n## 1、字符串存储\n\n## 2、字符串的模式匹配\n\n### KMP算法基本\n\n### `Next`数组求解\n\n### KMP算法优化，`NextVal`数组求解\n\n","slug":"数据结构——串-KMP算法","published":1,"updated":"2022-05-21T07:33:47.878Z","_id":"cl3e84y2i002228u56ps5gruo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"1、字符串存储\"><a href=\"#1、字符串存储\" class=\"headerlink\" title=\"1、字符串存储\"></a>1、字符串存储</h2><h2 id=\"2、字符串的模式匹配\"><a href=\"#2、字符串的模式匹配\" class=\"headerlink\" title=\"2、字符串的模式匹配\"></a>2、字符串的模式匹配</h2><h3 id=\"KMP算法基本\"><a href=\"#KMP算法基本\" class=\"headerlink\" title=\"KMP算法基本\"></a>KMP算法基本</h3><h3 id=\"Next数组求解\"><a href=\"#Next数组求解\" class=\"headerlink\" title=\"Next数组求解\"></a><code>Next</code>数组求解</h3><h3 id=\"KMP算法优化，NextVal数组求解\"><a href=\"#KMP算法优化，NextVal数组求解\" class=\"headerlink\" title=\"KMP算法优化，NextVal数组求解\"></a>KMP算法优化，<code>NextVal</code>数组求解</h3><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"1、字符串存储\"><a href=\"#1、字符串存储\" class=\"headerlink\" title=\"1、字符串存储\"></a>1、字符串存储</h2><h2 id=\"2、字符串的模式匹配\"><a href=\"#2、字符串的模式匹配\" class=\"headerlink\" title=\"2、字符串的模式匹配\"></a>2、字符串的模式匹配</h2><h3 id=\"KMP算法基本\"><a href=\"#KMP算法基本\" class=\"headerlink\" title=\"KMP算法基本\"></a>KMP算法基本</h3><h3 id=\"Next数组求解\"><a href=\"#Next数组求解\" class=\"headerlink\" title=\"Next数组求解\"></a><code>Next</code>数组求解</h3><h3 id=\"KMP算法优化，NextVal数组求解\"><a href=\"#KMP算法优化，NextVal数组求解\" class=\"headerlink\" title=\"KMP算法优化，NextVal数组求解\"></a>KMP算法优化，<code>NextVal</code>数组求解</h3>"},{"title":"数据结构之排序大法","excerpt":"几大排序","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181820625.png","mathjax":true,"date":"2022-05-18T10:19:55.000Z","_content":"\n# 排序大法\n\n## 1、基本概念\n\n- 排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。\n- 算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。\n\n## 2、分类\n\n### 内部排序\n\n- [插入排序]()\n\n  > - 直接插入排序\n  > \n  >   > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序，适用线性表和链式表\n  > \n  > - 折半插入排序\n  > \n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序\n  > \n  > - 希尔排序\n  > \n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 不稳定排序，只适用于线性表\n\n- [交换排序]()\n\n  > - 冒泡排序\n  > \n  >    > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 稳定排序：适用于线性表和链式表\n  > \n  > \n  >   - 快速排序\n  > \n  >     > 时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$\n  >     >\n  >     > 空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$\n  >     >\n  >     > 不稳定排序\n  >     > \n  \n\n\n- [选择排序]()\n  >  - 简单选择排序\n  >  \n  >      > 时间复杂度：$O(n^2)$\n  >      >\n  >      > 空间复杂度：$O(1)$\n  >      >\n  >      > 不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了\n  >  \n  >  - 堆排序\n  >\n  >    > 时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 不稳定排序：选择排序都不是稳定的，因为没有整体后移\n\n- [归并排序]()\n\n    > 时间复杂度：$O(nlog_2n)$\n    >\n    > 空间复杂度：$O(n)$\n    >\n    > 稳定排序\n\n- [基数排序]()\n\n    > 时间复杂度：$O(r)$\n    >\n    > 空间复杂度：$O(d(n+r))$\n    >\n    > 稳定排序\n\n### 外部排序\n\n","source":"_posts/数据结构之排序大法.md","raw":"---\ntitle: 数据结构之排序大法\ntags: \n- 数据结构\n- 排序\n- 考研\nexcerpt: 几大排序\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181820625.png\ncategories:\n- 数据结构与算法\nmathjax: true\ndate: 2022-05-18 18:19:55\n---\n\n# 排序大法\n\n## 1、基本概念\n\n- 排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。\n- 算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。\n\n## 2、分类\n\n### 内部排序\n\n- [插入排序]()\n\n  > - 直接插入排序\n  > \n  >   > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序，适用线性表和链式表\n  > \n  > - 折半插入排序\n  > \n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序\n  > \n  > - 希尔排序\n  > \n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 不稳定排序，只适用于线性表\n\n- [交换排序]()\n\n  > - 冒泡排序\n  > \n  >    > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 稳定排序：适用于线性表和链式表\n  > \n  > \n  >   - 快速排序\n  > \n  >     > 时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$\n  >     >\n  >     > 空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$\n  >     >\n  >     > 不稳定排序\n  >     > \n  \n\n\n- [选择排序]()\n  >  - 简单选择排序\n  >  \n  >      > 时间复杂度：$O(n^2)$\n  >      >\n  >      > 空间复杂度：$O(1)$\n  >      >\n  >      > 不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了\n  >  \n  >  - 堆排序\n  >\n  >    > 时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 不稳定排序：选择排序都不是稳定的，因为没有整体后移\n\n- [归并排序]()\n\n    > 时间复杂度：$O(nlog_2n)$\n    >\n    > 空间复杂度：$O(n)$\n    >\n    > 稳定排序\n\n- [基数排序]()\n\n    > 时间复杂度：$O(r)$\n    >\n    > 空间复杂度：$O(d(n+r))$\n    >\n    > 稳定排序\n\n### 外部排序\n\n","slug":"数据结构之排序大法","published":1,"updated":"2022-05-20T09:08:03.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y2j002328u56vk254zw","content":"<h1 id=\"排序大法\"><a href=\"#排序大法\" class=\"headerlink\" title=\"排序大法\"></a>排序大法</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><ul>\n<li>排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。</li>\n<li>算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。</li>\n</ul>\n<h2 id=\"2、分类\"><a href=\"#2、分类\" class=\"headerlink\" title=\"2、分类\"></a>2、分类</h2><h3 id=\"内部排序\"><a href=\"#内部排序\" class=\"headerlink\" title=\"内部排序\"></a>内部排序</h3><ul>\n<li><p><a href=\"\">插入排序</a></p>\n<blockquote>\n<ul>\n<li><p>直接插入排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序，适用线性表和链式表</p>\n</blockquote>\n</li>\n<li><p>折半插入排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p>希尔排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序，只适用于线性表</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">交换排序</a></p>\n<blockquote>\n<ul>\n<li><p>冒泡排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序：适用于线性表和链式表</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>快速排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$</p>\n<p>空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$</p>\n<p>不稳定排序</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"\">选择排序</a></p>\n<blockquote>\n<ul>\n<li><p>简单选择排序</p>\n<blockquote>\n<p>时间复杂度：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了</p>\n</blockquote>\n</li>\n<li><p>堆排序</p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：选择排序都不是稳定的，因为没有整体后移</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">归并排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$</p>\n<p>空间复杂度：$O(n)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p><a href=\"\">基数排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(r)$</p>\n<p>空间复杂度：$O(d(n+r))$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"外部排序\"><a href=\"#外部排序\" class=\"headerlink\" title=\"外部排序\"></a>外部排序</h3>","site":{"data":{}},"more":"<h1 id=\"排序大法\"><a href=\"#排序大法\" class=\"headerlink\" title=\"排序大法\"></a>排序大法</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><ul>\n<li>排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。</li>\n<li>算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。</li>\n</ul>\n<h2 id=\"2、分类\"><a href=\"#2、分类\" class=\"headerlink\" title=\"2、分类\"></a>2、分类</h2><h3 id=\"内部排序\"><a href=\"#内部排序\" class=\"headerlink\" title=\"内部排序\"></a>内部排序</h3><ul>\n<li><p><a href=\"\">插入排序</a></p>\n<blockquote>\n<ul>\n<li><p>直接插入排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序，适用线性表和链式表</p>\n</blockquote>\n</li>\n<li><p>折半插入排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p>希尔排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序，只适用于线性表</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">交换排序</a></p>\n<blockquote>\n<ul>\n<li><p>冒泡排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序：适用于线性表和链式表</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>快速排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$</p>\n<p>空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$</p>\n<p>不稳定排序</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"\">选择排序</a></p>\n<blockquote>\n<ul>\n<li><p>简单选择排序</p>\n<blockquote>\n<p>时间复杂度：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了</p>\n</blockquote>\n</li>\n<li><p>堆排序</p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：选择排序都不是稳定的，因为没有整体后移</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">归并排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$</p>\n<p>空间复杂度：$O(n)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p><a href=\"\">基数排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(r)$</p>\n<p>空间复杂度：$O(d(n+r))$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"外部排序\"><a href=\"#外部排序\" class=\"headerlink\" title=\"外部排序\"></a>外部排序</h3>"},{"title":"数据结构之查找","excerpt":"数据结构之查找、二分查找、红黑树、树","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181200710.png","mathjax":true,"date":"2022-05-18T03:55:45.000Z","_content":"\n# 查找大法\n\n## 1、顺序查找与二分法查找\n\n---\n## 2、顺序二叉树与平衡二叉树\n\n### 顺序二叉树\n\n- 题目：下列哪个序列不是顺序二叉树的搜索序列\n\n  > 如：$$a_1, a_2, a_3, a_4,a_5,a_6$$\n  >\n  > 如何判断：对于$$a_i$$来说，如果$$a_{i+1}>a_i$$，那么，所有$$n>i都有a_n>a_i$$。\n\n### 平衡二叉树\n\n- 平衡因子：**左**子树的高度**减**去**右**子树的高度，$$h_左-h_右$$\n- 分支节点：度不为0的节点\n\n- 平衡二叉树的**旋转**\n\n  > - 对节点`A`左旋：\n  >\n  >   > 1、`A` **右**孩子的**左**孩子变成`A`的**右**孩子：`A->right = A->right->left`\n  >   >\n  >   > 2、`A`的**右**孩子取代`A`的位置\n  >   >\n  >   > 3、`A`变成**右**孩子的**左**孩子：`A->right->left = A`\n  >\n  > - 对节点`A`右旋：\n  >\n  >   > 1、`A` 左孩子的右孩子变成`A`的左孩子：`A->left = A->left->right`\n  >   >\n  >   > 2、`A`的左孩子取代A的位置\n  >   >\n  >   > 3、`A`变成左孩子的右孩子：`A->left->right = A`\n\n\n\n\n- 平衡二叉树的**插入**（王道书  $$P_{274}$$）\n\n  > - 基本假设：找到**插入路径**上离**插入点**最近的**不平衡**节点`A`，`A`一般是插入树`C`的**爷爷**，设`B`是`C`的**父亲**\n  >\n  >   > 第一是找**不平衡节点**\n  >   >\n  >   > 第二是`C`可能是新节点也可能不是，是在`C`的**子树**或者`C`处插入，但是`C`没有失衡\n  >   >\n  >   > 第三是`B`必须是**插入路径**上的节点，插入路径和排序二叉树一样的\n  >\n  > - 核心思想：将中间大小的节点旋转到`A`的位置，这里很混乱，没关系，看下面的\n  >\n  > - 1、`LL`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`A`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A>B>C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 2、`RR`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`A`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A<B<C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 3、`LR`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`B`**左**旋，后对`A`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`B<C<A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`左旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`右旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n  >\n  > - 4、`RL`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`B`**右**旋，后对`A`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`B>C>A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`右旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`左旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n\n\n\n- 平衡二叉树的**删除**\n\n  > - 基本假设：`w`是需要**删除**的节点，从`w`向上面找，离`w`**最近且失衡**的节点为`z`\n  >\n  >   > `z`有左右子树，左右子树高度差大于1，设高度较**高**的**子树根节点**为`y`\n  >   >\n  >   > `y`有左右子树，左右子树高度差小于等于1，设高度较**高**的**子树根节点**为`x`\n  >   >\n  >   > 如果`y`的左右子树高度相等，那么`x`任意左还是右\n  >   >\n  >   > 还是有，`z`是爷爷，`y`是父亲，`x`是孙子\n  >\n  > - 核心思想：还是把中间大小的节点旋转到`z`处\n  >\n  > - 1、`LL`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`z`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z>y>x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 2、`RR`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`z`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z<y<x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 3、`LR`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`y`**左**旋，后对`z`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`y<x<z`，最后是把`x`旋转到`z`的位置\n  >   \n  > - 4、`RL`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`y`**右**旋，后对`z`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`y>x>z`，最后是把`x`旋转到`z`的位置\n  >\n\n\n\n- 树高为`h`时，节点数`n`的最小值怎么计算\n\n  > 1、先给出答案：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n  >\n  > ​\t\t\t且 $$n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;$$ 这个应该很好得知，就像下面图示一样，\n  >\n  > 2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目\n  >\n  > 3、假设现在有两棵$AVL$，且$AVL_1$的树高为`h-1`，$AVL_2$的树高为`h-2`\n  >\n  > 4、树高为`h`的`AVL`，左右子树也是一颗`AVL`，且左右子树的树高差不超过`1`\n  >\n  > 5、也就是说，左右子树的树高要么都为`h-1`（方法1）；\n  >\n  > ​\t\t\t\t\t\t要么一个为`h-1`，一个为`h-2`（方法2）。\n  >\n  > 6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。\n  >\n  > ​\t\t不妨设左子树为`h-1`，右子树为`h-2`\n  >\n  > 7、那就可以用上述的$AVL_1 和 AVL_2$来作为`AVL`的两棵子树，再加上一个新的根节点\n  >\n  > 8、那么节点数目递推公式就是：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n\n  $$\n  \\begin{cases}\n  n(h)_{min} & 高度为 h 的最小节点数目\\\\\n  n(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\n  n(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n  1 & 额外的根节点数目\n  \\end{cases}\n  $$\n\n```mermaid\ngraph TB\nA \nB --> C\n显然左边分别是h为1和2的情况\n```\n\n\n\n\n\n---\n## 3、重头戏——红黑树\n\n","source":"_posts/数据结构之查找.md","raw":"---\ntitle: 数据结构之查找\ntags: \n- 数据结构\n- 红黑树\n- 字符串\n- 查找\n- 平衡二叉树\n- 二分法\n- 考研\nexcerpt: 数据结构之查找、二分查找、红黑树、树\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181200710.png\ncategories:\n- 数据结构与算法\nmathjax: true\ndate: 2022-05-18 11:55:45\n---\n\n# 查找大法\n\n## 1、顺序查找与二分法查找\n\n---\n## 2、顺序二叉树与平衡二叉树\n\n### 顺序二叉树\n\n- 题目：下列哪个序列不是顺序二叉树的搜索序列\n\n  > 如：$$a_1, a_2, a_3, a_4,a_5,a_6$$\n  >\n  > 如何判断：对于$$a_i$$来说，如果$$a_{i+1}>a_i$$，那么，所有$$n>i都有a_n>a_i$$。\n\n### 平衡二叉树\n\n- 平衡因子：**左**子树的高度**减**去**右**子树的高度，$$h_左-h_右$$\n- 分支节点：度不为0的节点\n\n- 平衡二叉树的**旋转**\n\n  > - 对节点`A`左旋：\n  >\n  >   > 1、`A` **右**孩子的**左**孩子变成`A`的**右**孩子：`A->right = A->right->left`\n  >   >\n  >   > 2、`A`的**右**孩子取代`A`的位置\n  >   >\n  >   > 3、`A`变成**右**孩子的**左**孩子：`A->right->left = A`\n  >\n  > - 对节点`A`右旋：\n  >\n  >   > 1、`A` 左孩子的右孩子变成`A`的左孩子：`A->left = A->left->right`\n  >   >\n  >   > 2、`A`的左孩子取代A的位置\n  >   >\n  >   > 3、`A`变成左孩子的右孩子：`A->left->right = A`\n\n\n\n\n- 平衡二叉树的**插入**（王道书  $$P_{274}$$）\n\n  > - 基本假设：找到**插入路径**上离**插入点**最近的**不平衡**节点`A`，`A`一般是插入树`C`的**爷爷**，设`B`是`C`的**父亲**\n  >\n  >   > 第一是找**不平衡节点**\n  >   >\n  >   > 第二是`C`可能是新节点也可能不是，是在`C`的**子树**或者`C`处插入，但是`C`没有失衡\n  >   >\n  >   > 第三是`B`必须是**插入路径**上的节点，插入路径和排序二叉树一样的\n  >\n  > - 核心思想：将中间大小的节点旋转到`A`的位置，这里很混乱，没关系，看下面的\n  >\n  > - 1、`LL`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`A`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A>B>C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 2、`RR`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`A`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A<B<C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 3、`LR`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`B`**左**旋，后对`A`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`B<C<A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`左旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`右旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n  >\n  > - 4、`RL`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`B`**右**旋，后对`A`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`B>C>A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`右旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`左旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n\n\n\n- 平衡二叉树的**删除**\n\n  > - 基本假设：`w`是需要**删除**的节点，从`w`向上面找，离`w`**最近且失衡**的节点为`z`\n  >\n  >   > `z`有左右子树，左右子树高度差大于1，设高度较**高**的**子树根节点**为`y`\n  >   >\n  >   > `y`有左右子树，左右子树高度差小于等于1，设高度较**高**的**子树根节点**为`x`\n  >   >\n  >   > 如果`y`的左右子树高度相等，那么`x`任意左还是右\n  >   >\n  >   > 还是有，`z`是爷爷，`y`是父亲，`x`是孙子\n  >\n  > - 核心思想：还是把中间大小的节点旋转到`z`处\n  >\n  > - 1、`LL`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`z`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z>y>x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 2、`RR`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`z`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z<y<x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 3、`LR`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`y`**左**旋，后对`z`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`y<x<z`，最后是把`x`旋转到`z`的位置\n  >   \n  > - 4、`RL`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`y`**右**旋，后对`z`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`y>x>z`，最后是把`x`旋转到`z`的位置\n  >\n\n\n\n- 树高为`h`时，节点数`n`的最小值怎么计算\n\n  > 1、先给出答案：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n  >\n  > ​\t\t\t且 $$n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;$$ 这个应该很好得知，就像下面图示一样，\n  >\n  > 2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目\n  >\n  > 3、假设现在有两棵$AVL$，且$AVL_1$的树高为`h-1`，$AVL_2$的树高为`h-2`\n  >\n  > 4、树高为`h`的`AVL`，左右子树也是一颗`AVL`，且左右子树的树高差不超过`1`\n  >\n  > 5、也就是说，左右子树的树高要么都为`h-1`（方法1）；\n  >\n  > ​\t\t\t\t\t\t要么一个为`h-1`，一个为`h-2`（方法2）。\n  >\n  > 6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。\n  >\n  > ​\t\t不妨设左子树为`h-1`，右子树为`h-2`\n  >\n  > 7、那就可以用上述的$AVL_1 和 AVL_2$来作为`AVL`的两棵子树，再加上一个新的根节点\n  >\n  > 8、那么节点数目递推公式就是：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n\n  $$\n  \\begin{cases}\n  n(h)_{min} & 高度为 h 的最小节点数目\\\\\n  n(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\n  n(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n  1 & 额外的根节点数目\n  \\end{cases}\n  $$\n\n```mermaid\ngraph TB\nA \nB --> C\n显然左边分别是h为1和2的情况\n```\n\n\n\n\n\n---\n## 3、重头戏——红黑树\n\n","slug":"数据结构之查找","published":1,"updated":"2022-05-21T06:24:35.598Z","_id":"cl3e84y2k002528u5cbqf6zwr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"查找大法\"><a href=\"#查找大法\" class=\"headerlink\" title=\"查找大法\"></a>查找大法</h1><h2 id=\"1、顺序查找与二分法查找\"><a href=\"#1、顺序查找与二分法查找\" class=\"headerlink\" title=\"1、顺序查找与二分法查找\"></a>1、顺序查找与二分法查找</h2><hr>\n<h2 id=\"2、顺序二叉树与平衡二叉树\"><a href=\"#2、顺序二叉树与平衡二叉树\" class=\"headerlink\" title=\"2、顺序二叉树与平衡二叉树\"></a>2、顺序二叉树与平衡二叉树</h2><h3 id=\"顺序二叉树\"><a href=\"#顺序二叉树\" class=\"headerlink\" title=\"顺序二叉树\"></a>顺序二叉树</h3><ul>\n<li><p>题目：下列哪个序列不是顺序二叉树的搜索序列</p>\n<blockquote>\n<p>如：<script type=\"math/tex\">a_1, a_2, a_3, a_4,a_5,a_6</script></p>\n<p>如何判断：对于<script type=\"math/tex\">a_i</script>来说，如果<script type=\"math/tex\">a_{i+1}>a_i</script>，那么，所有<script type=\"math/tex\">n>i都有a_n>a_i</script>。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><ul>\n<li>平衡因子：<strong>左</strong>子树的高度<strong>减</strong>去<strong>右</strong>子树的高度，<script type=\"math/tex\">h_左-h_右</script></li>\n<li><p>分支节点：度不为0的节点</p>\n</li>\n<li><p>平衡二叉树的<strong>旋转</strong></p>\n<blockquote>\n<ul>\n<li><p>对节点<code>A</code>左旋：</p>\n<blockquote>\n<p>1、<code>A</code> <strong>右</strong>孩子的<strong>左</strong>孩子变成<code>A</code>的<strong>右</strong>孩子：<code>A-&gt;right = A-&gt;right-&gt;left</code></p>\n<p>2、<code>A</code>的<strong>右</strong>孩子取代<code>A</code>的位置</p>\n<p>3、<code>A</code>变成<strong>右</strong>孩子的<strong>左</strong>孩子：<code>A-&gt;right-&gt;left = A</code></p>\n</blockquote>\n</li>\n<li><p>对节点<code>A</code>右旋：</p>\n<blockquote>\n<p>1、<code>A</code> 左孩子的右孩子变成<code>A</code>的左孩子：<code>A-&gt;left = A-&gt;left-&gt;right</code></p>\n<p>2、<code>A</code>的左孩子取代A的位置</p>\n<p>3、<code>A</code>变成左孩子的右孩子：<code>A-&gt;left-&gt;right = A</code></p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>插入</strong>（王道书  <script type=\"math/tex\">P_{274}</script>）</p>\n<blockquote>\n<ul>\n<li><p>基本假设：找到<strong>插入路径</strong>上离<strong>插入点</strong>最近的<strong>不平衡</strong>节点<code>A</code>，<code>A</code>一般是插入树<code>C</code>的<strong>爷爷</strong>，设<code>B</code>是<code>C</code>的<strong>父亲</strong></p>\n<blockquote>\n<p>第一是找<strong>不平衡节点</strong></p>\n<p>第二是<code>C</code>可能是新节点也可能不是，是在<code>C</code>的<strong>子树</strong>或者<code>C</code>处插入，但是<code>C</code>没有失衡</p>\n<p>第三是<code>B</code>必须是<strong>插入路径</strong>上的节点，插入路径和排序二叉树一样的</p>\n</blockquote>\n</li>\n<li><p>核心思想：将中间大小的节点旋转到<code>A</code>的位置，这里很混乱，没关系，看下面的</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>A</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>A&gt;B&gt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>A</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>A&lt;B&lt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>B</code><strong>左</strong>旋，后对<code>A</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>B&lt;C&lt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>左旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>右旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>B</code><strong>右</strong>旋，后对<code>A</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>B&gt;C&gt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>右旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>左旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>删除</strong></p>\n<blockquote>\n<ul>\n<li><p>基本假设：<code>w</code>是需要<strong>删除</strong>的节点，从<code>w</code>向上面找，离<code>w</code><strong>最近且失衡</strong>的节点为<code>z</code></p>\n<blockquote>\n<p><code>z</code>有左右子树，左右子树高度差大于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>y</code></p>\n<p><code>y</code>有左右子树，左右子树高度差小于等于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>x</code></p>\n<p>如果<code>y</code>的左右子树高度相等，那么<code>x</code>任意左还是右</p>\n<p>还是有，<code>z</code>是爷爷，<code>y</code>是父亲，<code>x</code>是孙子</p>\n</blockquote>\n</li>\n<li><p>核心思想：还是把中间大小的节点旋转到<code>z</code>处</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>z</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>z&gt;y&gt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>z</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>z&lt;y&lt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>y</code><strong>左</strong>旋，后对<code>z</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>y&lt;x&lt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>y</code><strong>右</strong>旋，后对<code>z</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>y&gt;x&gt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>树高为<code>h</code>时，节点数<code>n</code>的最小值怎么计算</p>\n<blockquote>\n<p>1、先给出答案：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n<p>​            且 <script type=\"math/tex\">n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;</script> 这个应该很好得知，就像下面图示一样，</p>\n<p>2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目</p>\n<p>3、假设现在有两棵$AVL$，且$AVL_1$的树高为<code>h-1</code>，$AVL_2$的树高为<code>h-2</code></p>\n<p>4、树高为<code>h</code>的<code>AVL</code>，左右子树也是一颗<code>AVL</code>，且左右子树的树高差不超过<code>1</code></p>\n<p>5、也就是说，左右子树的树高要么都为<code>h-1</code>（方法1）；</p>\n<p>​                        要么一个为<code>h-1</code>，一个为<code>h-2</code>（方法2）。</p>\n<p>6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。</p>\n<p>​        不妨设左子树为<code>h-1</code>，右子树为<code>h-2</code></p>\n<p>7、那就可以用上述的$AVL_1 和 AVL_2$来作为<code>AVL</code>的两棵子树，再加上一个新的根节点</p>\n<p>8、那么节点数目递推公式就是：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n</blockquote>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\nn(h)_{min} & 高度为 h 的最小节点数目\\\\\nn(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\nn(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n1 & 额外的根节点数目\n\\end{cases}</script></li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA \nB --> C\n显然左边分别是h为1和2的情况</pre>\n\n\n\n\n\n<hr>\n<h2 id=\"3、重头戏——红黑树\"><a href=\"#3、重头戏——红黑树\" class=\"headerlink\" title=\"3、重头戏——红黑树\"></a>3、重头戏——红黑树</h2>","site":{"data":{}},"more":"<h1 id=\"查找大法\"><a href=\"#查找大法\" class=\"headerlink\" title=\"查找大法\"></a>查找大法</h1><h2 id=\"1、顺序查找与二分法查找\"><a href=\"#1、顺序查找与二分法查找\" class=\"headerlink\" title=\"1、顺序查找与二分法查找\"></a>1、顺序查找与二分法查找</h2><hr>\n<h2 id=\"2、顺序二叉树与平衡二叉树\"><a href=\"#2、顺序二叉树与平衡二叉树\" class=\"headerlink\" title=\"2、顺序二叉树与平衡二叉树\"></a>2、顺序二叉树与平衡二叉树</h2><h3 id=\"顺序二叉树\"><a href=\"#顺序二叉树\" class=\"headerlink\" title=\"顺序二叉树\"></a>顺序二叉树</h3><ul>\n<li><p>题目：下列哪个序列不是顺序二叉树的搜索序列</p>\n<blockquote>\n<p>如：<script type=\"math/tex\">a_1, a_2, a_3, a_4,a_5,a_6</script></p>\n<p>如何判断：对于<script type=\"math/tex\">a_i</script>来说，如果<script type=\"math/tex\">a_{i+1}>a_i</script>，那么，所有<script type=\"math/tex\">n>i都有a_n>a_i</script>。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><ul>\n<li>平衡因子：<strong>左</strong>子树的高度<strong>减</strong>去<strong>右</strong>子树的高度，<script type=\"math/tex\">h_左-h_右</script></li>\n<li><p>分支节点：度不为0的节点</p>\n</li>\n<li><p>平衡二叉树的<strong>旋转</strong></p>\n<blockquote>\n<ul>\n<li><p>对节点<code>A</code>左旋：</p>\n<blockquote>\n<p>1、<code>A</code> <strong>右</strong>孩子的<strong>左</strong>孩子变成<code>A</code>的<strong>右</strong>孩子：<code>A-&gt;right = A-&gt;right-&gt;left</code></p>\n<p>2、<code>A</code>的<strong>右</strong>孩子取代<code>A</code>的位置</p>\n<p>3、<code>A</code>变成<strong>右</strong>孩子的<strong>左</strong>孩子：<code>A-&gt;right-&gt;left = A</code></p>\n</blockquote>\n</li>\n<li><p>对节点<code>A</code>右旋：</p>\n<blockquote>\n<p>1、<code>A</code> 左孩子的右孩子变成<code>A</code>的左孩子：<code>A-&gt;left = A-&gt;left-&gt;right</code></p>\n<p>2、<code>A</code>的左孩子取代A的位置</p>\n<p>3、<code>A</code>变成左孩子的右孩子：<code>A-&gt;left-&gt;right = A</code></p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>插入</strong>（王道书  <script type=\"math/tex\">P_{274}</script>）</p>\n<blockquote>\n<ul>\n<li><p>基本假设：找到<strong>插入路径</strong>上离<strong>插入点</strong>最近的<strong>不平衡</strong>节点<code>A</code>，<code>A</code>一般是插入树<code>C</code>的<strong>爷爷</strong>，设<code>B</code>是<code>C</code>的<strong>父亲</strong></p>\n<blockquote>\n<p>第一是找<strong>不平衡节点</strong></p>\n<p>第二是<code>C</code>可能是新节点也可能不是，是在<code>C</code>的<strong>子树</strong>或者<code>C</code>处插入，但是<code>C</code>没有失衡</p>\n<p>第三是<code>B</code>必须是<strong>插入路径</strong>上的节点，插入路径和排序二叉树一样的</p>\n</blockquote>\n</li>\n<li><p>核心思想：将中间大小的节点旋转到<code>A</code>的位置，这里很混乱，没关系，看下面的</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>A</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>A&gt;B&gt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>A</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>A&lt;B&lt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>B</code><strong>左</strong>旋，后对<code>A</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>B&lt;C&lt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>左旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>右旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>B</code><strong>右</strong>旋，后对<code>A</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>B&gt;C&gt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>右旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>左旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>删除</strong></p>\n<blockquote>\n<ul>\n<li><p>基本假设：<code>w</code>是需要<strong>删除</strong>的节点，从<code>w</code>向上面找，离<code>w</code><strong>最近且失衡</strong>的节点为<code>z</code></p>\n<blockquote>\n<p><code>z</code>有左右子树，左右子树高度差大于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>y</code></p>\n<p><code>y</code>有左右子树，左右子树高度差小于等于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>x</code></p>\n<p>如果<code>y</code>的左右子树高度相等，那么<code>x</code>任意左还是右</p>\n<p>还是有，<code>z</code>是爷爷，<code>y</code>是父亲，<code>x</code>是孙子</p>\n</blockquote>\n</li>\n<li><p>核心思想：还是把中间大小的节点旋转到<code>z</code>处</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>z</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>z&gt;y&gt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>z</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>z&lt;y&lt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>y</code><strong>左</strong>旋，后对<code>z</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>y&lt;x&lt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>y</code><strong>右</strong>旋，后对<code>z</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>y&gt;x&gt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>树高为<code>h</code>时，节点数<code>n</code>的最小值怎么计算</p>\n<blockquote>\n<p>1、先给出答案：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n<p>​            且 <script type=\"math/tex\">n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;</script> 这个应该很好得知，就像下面图示一样，</p>\n<p>2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目</p>\n<p>3、假设现在有两棵$AVL$，且$AVL_1$的树高为<code>h-1</code>，$AVL_2$的树高为<code>h-2</code></p>\n<p>4、树高为<code>h</code>的<code>AVL</code>，左右子树也是一颗<code>AVL</code>，且左右子树的树高差不超过<code>1</code></p>\n<p>5、也就是说，左右子树的树高要么都为<code>h-1</code>（方法1）；</p>\n<p>​                        要么一个为<code>h-1</code>，一个为<code>h-2</code>（方法2）。</p>\n<p>6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。</p>\n<p>​        不妨设左子树为<code>h-1</code>，右子树为<code>h-2</code></p>\n<p>7、那就可以用上述的$AVL_1 和 AVL_2$来作为<code>AVL</code>的两棵子树，再加上一个新的根节点</p>\n<p>8、那么节点数目递推公式就是：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n</blockquote>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\nn(h)_{min} & 高度为 h 的最小节点数目\\\\\nn(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\nn(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n1 & 额外的根节点数目\n\\end{cases}</script></li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA \nB --> C\n显然左边分别是h为1和2的情况</pre>\n\n\n\n\n\n<hr>\n<h2 id=\"3、重头戏——红黑树\"><a href=\"#3、重头戏——红黑树\" class=\"headerlink\" title=\"3、重头戏——红黑树\"></a>3、重头戏——红黑树</h2>"},{"title":"编译Linux与Uboot","cover":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052005616.png","date":"2022-04-05T11:53:21.000Z","excerpt":"编译你自己的Linux和uboot","_content":"\n# 一、前言\n\n目前没有前言\n\n# 二、准备工作\n\n准备太久了\n\n# 三、PCB绘制\n\n不是我绘制的\n\n# 四、下载编译工具链\n\n我下的是`arm-linux-gnueabi-`\n\n# 五、u-boot移植\n\n## 1、下载`u-boot`\n\n```shell\ngit clone https://github.com/Lichee-Pi/u-boot.git\ngit branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot\ngit checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支\n```\n\n## 2、选取`config`配置\n\n考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。\n\n### *对几个config简单介绍：*\n\n>`f1c100s_nano_uboot_defconfig`：`SPI Flash`支持版\n>\n>`licheepi_nano_defconfig`：不带`SPI Flash`，从`TF`卡启动\n>\n>`licheepi_nano_spiflash_defconfig`：从`SPI`设备启动\n\n其实上面三种我也分不清楚，我第一次采用的是 `licheepi_nano_defconfig`。我也找不到 `f1c100s_nano_uboot_defconfig`，但是在[这](https://gitee.com/LicheePiNano/u-boot)可以找到，这个是荔枝派的 `u-boot`，可能毕竟这款 `f1c100s`是国产芯片，在`GitHub`上面找不到。\n\n### 选取`config`操作\n\n```shell\ncd ~/u-boot  # 切换到 下载的 u-boot 的根目录\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  \n# 参数介绍：\n# ARCH=arm 是arm架构的\n# CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链\n# licheepi_nano_defconfig 选取的默认config\n```\n\n## 3、可视化配置\n\n### 打开菜单命令\n\n```shell\nmake ARCH=arm menuconfig\n# 之后上下键进行移动\n# 空格或者回车进行选择\n# 左右可以选择下方菜单\n# ctrl+退格才能删除已经填入的默认参数\n```\n\n### 参数讲解\n\n注意下面这两个参数就行\n\n![image-20220305195147976](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958695.png)\n\n#### `boot arguments`\n\n> - `console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw`\n>\n> > **`console=ttyS0,115200`** 表示终端为ttyS0即串口0,波特率为115200；\n> >\n> > **`panic=5` **字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。\n> >\n> > `rootwait` 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。\n> >\n> > **root=/dev/mmcblk0p2** 表示根文件系统的位置在mmc的0:2分区处，**/dev**是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成**mmcblk0p2**设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。\n> >\n> > **`earlyprintk`** 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。\n\n#### `bootcmd`\n\n> - `load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;`\n>\n> > ![image-20220305195531843](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959333.png)\n\n\n\n## 、遇到问题不要慌\n\n### （1）` execute 'swig'`\n\n> 没有`swig`这个东西，安装即可：`sudo apt install swig`\n>\n> `swig`：我从[网上](https://zh.wikipedia.org/wiki/SWIG)了解到是一个将`C/C++`的类封装成库，给`Python、Lua、PHP`等脚本语言调用。（题外话）\n\n## 、参考链接\n\n> [参考博客](https://cnblogs.com/twzy/p/14865952.html)\n>\n> [参考荔枝派](https://wiki.sipeed.com/soft/Lichee/zh/Nano-Doc-Backup/get_started/first_eat.html)![image-20220305205126696](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959649.png)\n\n# 六、`Linux`的移植\n\n## 1、分区操作\n\n​\t一个硬盘对于`Linux`来说，需要进行**挂载**命令是：`mount`，一般插上自动挂载），然后再能使用，然后需要**卸载**（命令：`umount`）才能操作，如格式化，分区之类的。我们借助了`Ubuntu`下图形化工具——**`Gparted`**，命令行进行下载就行了。\n\n​\t然后，买到手的`sd`卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如*`/dev/sdb contains a mounted filesystem`*，我的建议，使用一个全0的映像文件写入`sd`卡，将前面的数据覆盖。\n\n​\t之后便是分区了，将只有一个未分区的，且没有任何分区的`sd`卡连接`Ubuntu`。\n\n### 分区1、`boot`\n\n> 新建一个分区\n>\n> 之前剩余空间为**1M**，新大小为**32M**，文件系统为**`fat16`**，卷标就设置为**`boot`**\n>\n> 对于之前的`1M`，是留给**`uboot`**的，而且在`gparted`是看不到的\n>\n> **图片来源于网络**\n>\n> ![image-20220314221728714](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958740.png)\n\n### 分区2、`rootfs`\n\n> 新建一个分区\n>\n> 之前剩余空间为**0M**，新大小为**100M**，文件系统为**`ext4`**，卷标就设置为**`rootfs`**\n>\n> ***图片来源于网络***\n>\n> ![image-20220314221807562](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958803.png)\n\n### 最后的效果\n\n![image-20220314221850652](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958789.png)\n\n## 2、编译**`Linux`**\n\n### 更改设备树\n\n# 七、编译`rootfs`\n\n","source":"_posts/编译Linux与Uboot.md","raw":"---\ntitle: 编译Linux与Uboot\ncover: 'https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204052005616.png'\ndate: 2022-04-05 19:53:21\ntags: \n\t- Linux\n\t- Uboot\n\t- 编译\nexcerpt: 编译你自己的Linux和uboot\ncategories: Linux\n---\n\n# 一、前言\n\n目前没有前言\n\n# 二、准备工作\n\n准备太久了\n\n# 三、PCB绘制\n\n不是我绘制的\n\n# 四、下载编译工具链\n\n我下的是`arm-linux-gnueabi-`\n\n# 五、u-boot移植\n\n## 1、下载`u-boot`\n\n```shell\ngit clone https://github.com/Lichee-Pi/u-boot.git\ngit branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot\ngit checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支\n```\n\n## 2、选取`config`配置\n\n考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。\n\n### *对几个config简单介绍：*\n\n>`f1c100s_nano_uboot_defconfig`：`SPI Flash`支持版\n>\n>`licheepi_nano_defconfig`：不带`SPI Flash`，从`TF`卡启动\n>\n>`licheepi_nano_spiflash_defconfig`：从`SPI`设备启动\n\n其实上面三种我也分不清楚，我第一次采用的是 `licheepi_nano_defconfig`。我也找不到 `f1c100s_nano_uboot_defconfig`，但是在[这](https://gitee.com/LicheePiNano/u-boot)可以找到，这个是荔枝派的 `u-boot`，可能毕竟这款 `f1c100s`是国产芯片，在`GitHub`上面找不到。\n\n### 选取`config`操作\n\n```shell\ncd ~/u-boot  # 切换到 下载的 u-boot 的根目录\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  \n# 参数介绍：\n# ARCH=arm 是arm架构的\n# CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链\n# licheepi_nano_defconfig 选取的默认config\n```\n\n## 3、可视化配置\n\n### 打开菜单命令\n\n```shell\nmake ARCH=arm menuconfig\n# 之后上下键进行移动\n# 空格或者回车进行选择\n# 左右可以选择下方菜单\n# ctrl+退格才能删除已经填入的默认参数\n```\n\n### 参数讲解\n\n注意下面这两个参数就行\n\n![image-20220305195147976](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958695.png)\n\n#### `boot arguments`\n\n> - `console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw`\n>\n> > **`console=ttyS0,115200`** 表示终端为ttyS0即串口0,波特率为115200；\n> >\n> > **`panic=5` **字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。\n> >\n> > `rootwait` 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。\n> >\n> > **root=/dev/mmcblk0p2** 表示根文件系统的位置在mmc的0:2分区处，**/dev**是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成**mmcblk0p2**设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。\n> >\n> > **`earlyprintk`** 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。\n\n#### `bootcmd`\n\n> - `load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;`\n>\n> > ![image-20220305195531843](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959333.png)\n\n\n\n## 、遇到问题不要慌\n\n### （1）` execute 'swig'`\n\n> 没有`swig`这个东西，安装即可：`sudo apt install swig`\n>\n> `swig`：我从[网上](https://zh.wikipedia.org/wiki/SWIG)了解到是一个将`C/C++`的类封装成库，给`Python、Lua、PHP`等脚本语言调用。（题外话）\n\n## 、参考链接\n\n> [参考博客](https://cnblogs.com/twzy/p/14865952.html)\n>\n> [参考荔枝派](https://wiki.sipeed.com/soft/Lichee/zh/Nano-Doc-Backup/get_started/first_eat.html)![image-20220305205126696](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959649.png)\n\n# 六、`Linux`的移植\n\n## 1、分区操作\n\n​\t一个硬盘对于`Linux`来说，需要进行**挂载**命令是：`mount`，一般插上自动挂载），然后再能使用，然后需要**卸载**（命令：`umount`）才能操作，如格式化，分区之类的。我们借助了`Ubuntu`下图形化工具——**`Gparted`**，命令行进行下载就行了。\n\n​\t然后，买到手的`sd`卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如*`/dev/sdb contains a mounted filesystem`*，我的建议，使用一个全0的映像文件写入`sd`卡，将前面的数据覆盖。\n\n​\t之后便是分区了，将只有一个未分区的，且没有任何分区的`sd`卡连接`Ubuntu`。\n\n### 分区1、`boot`\n\n> 新建一个分区\n>\n> 之前剩余空间为**1M**，新大小为**32M**，文件系统为**`fat16`**，卷标就设置为**`boot`**\n>\n> 对于之前的`1M`，是留给**`uboot`**的，而且在`gparted`是看不到的\n>\n> **图片来源于网络**\n>\n> ![image-20220314221728714](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958740.png)\n\n### 分区2、`rootfs`\n\n> 新建一个分区\n>\n> 之前剩余空间为**0M**，新大小为**100M**，文件系统为**`ext4`**，卷标就设置为**`rootfs`**\n>\n> ***图片来源于网络***\n>\n> ![image-20220314221807562](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958803.png)\n\n### 最后的效果\n\n![image-20220314221850652](https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958789.png)\n\n## 2、编译**`Linux`**\n\n### 更改设备树\n\n# 七、编译`rootfs`\n\n","slug":"编译Linux与Uboot","published":1,"updated":"2022-04-05T12:06:16.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3e84y2n002628u5h27jhre4","content":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>目前没有前言</p>\n<h1 id=\"二、准备工作\"><a href=\"#二、准备工作\" class=\"headerlink\" title=\"二、准备工作\"></a>二、准备工作</h1><p>准备太久了</p>\n<h1 id=\"三、PCB绘制\"><a href=\"#三、PCB绘制\" class=\"headerlink\" title=\"三、PCB绘制\"></a>三、PCB绘制</h1><p>不是我绘制的</p>\n<h1 id=\"四、下载编译工具链\"><a href=\"#四、下载编译工具链\" class=\"headerlink\" title=\"四、下载编译工具链\"></a>四、下载编译工具链</h1><p>我下的是<code>arm-linux-gnueabi-</code></p>\n<h1 id=\"五、u-boot移植\"><a href=\"#五、u-boot移植\" class=\"headerlink\" title=\"五、u-boot移植\"></a>五、u-boot移植</h1><h2 id=\"1、下载u-boot\"><a href=\"#1、下载u-boot\" class=\"headerlink\" title=\"1、下载u-boot\"></a>1、下载<code>u-boot</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Lichee-Pi/u-boot.git</span><br><span class=\"line\">git branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot</span><br><span class=\"line\">git checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、选取config配置\"><a href=\"#2、选取config配置\" class=\"headerlink\" title=\"2、选取config配置\"></a>2、选取<code>config</code>配置</h2><p>考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。</p>\n<h3 id=\"对几个config简单介绍：\"><a href=\"#对几个config简单介绍：\" class=\"headerlink\" title=\"对几个config简单介绍：\"></a><em>对几个config简单介绍：</em></h3><blockquote>\n<p><code>f1c100s_nano_uboot_defconfig</code>：<code>SPI Flash</code>支持版</p>\n<p><code>licheepi_nano_defconfig</code>：不带<code>SPI Flash</code>，从<code>TF</code>卡启动</p>\n<p><code>licheepi_nano_spiflash_defconfig</code>：从<code>SPI</code>设备启动</p>\n</blockquote>\n<p>其实上面三种我也分不清楚，我第一次采用的是 <code>licheepi_nano_defconfig</code>。我也找不到 <code>f1c100s_nano_uboot_defconfig</code>，但是在<a href=\"https://gitee.com/LicheePiNano/u-boot\">这</a>可以找到，这个是荔枝派的 <code>u-boot</code>，可能毕竟这款 <code>f1c100s</code>是国产芯片，在<code>GitHub</code>上面找不到。</p>\n<h3 id=\"选取config操作\"><a href=\"#选取config操作\" class=\"headerlink\" title=\"选取config操作\"></a>选取<code>config</code>操作</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~/u-boot  # 切换到 下载的 u-boot 的根目录</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数介绍：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ARCH=arm 是arm架构的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">licheepi_nano_defconfig 选取的默认config</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、可视化配置\"><a href=\"#3、可视化配置\" class=\"headerlink\" title=\"3、可视化配置\"></a>3、可视化配置</h2><h3 id=\"打开菜单命令\"><a href=\"#打开菜单命令\" class=\"headerlink\" title=\"打开菜单命令\"></a>打开菜单命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make ARCH=arm menuconfig</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">之后上下键进行移动</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">空格或者回车进行选择</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">左右可以选择下方菜单</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl+退格才能删除已经填入的默认参数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数讲解\"><a href=\"#参数讲解\" class=\"headerlink\" title=\"参数讲解\"></a>参数讲解</h3><p>注意下面这两个参数就行</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958695.png\" alt=\"image-20220305195147976\"></p>\n<h4 id=\"boot-arguments\"><a href=\"#boot-arguments\" class=\"headerlink\" title=\"boot arguments\"></a><code>boot arguments</code></h4><blockquote>\n<ul>\n<li><code>console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw</code></li>\n</ul>\n<blockquote>\n<p><strong><code>console=ttyS0,115200</code></strong> 表示终端为ttyS0即串口0,波特率为115200；</p>\n<p><strong><code>panic=5</code> </strong>字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。</p>\n<p><code>rootwait</code> 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。</p>\n<p><strong>root=/dev/mmcblk0p2</strong> 表示根文件系统的位置在mmc的0:2分区处，<strong>/dev</strong>是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成<strong>mmcblk0p2</strong>设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。</p>\n<p><strong><code>earlyprintk</code></strong> 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"bootcmd\"><a href=\"#bootcmd\" class=\"headerlink\" title=\"bootcmd\"></a><code>bootcmd</code></h4><blockquote>\n<ul>\n<li><code>load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;</code></li>\n</ul>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959333.png\" alt=\"image-20220305195531843\"></p>\n</blockquote>\n</blockquote>\n<h2 id=\"、遇到问题不要慌\"><a href=\"#、遇到问题不要慌\" class=\"headerlink\" title=\"、遇到问题不要慌\"></a>、遇到问题不要慌</h2><h3 id=\"（1）execute-39-swig-39\"><a href=\"#（1）execute-39-swig-39\" class=\"headerlink\" title=\"（1）execute &#39;swig&#39;\"></a>（1）<code>execute &#39;swig&#39;</code></h3><blockquote>\n<p>没有<code>swig</code>这个东西，安装即可：<code>sudo apt install swig</code></p>\n<p><code>swig</code>：我从<a href=\"https://zh.wikipedia.org/wiki/SWIG\">网上</a>了解到是一个将<code>C/C++</code>的类封装成库，给<code>Python、Lua、PHP</code>等脚本语言调用。（题外话）</p>\n</blockquote>\n<h2 id=\"、参考链接\"><a href=\"#、参考链接\" class=\"headerlink\" title=\"、参考链接\"></a>、参考链接</h2><blockquote>\n<p><a href=\"https://cnblogs.com/twzy/p/14865952.html\">参考博客</a></p>\n<p><a href=\"https://wiki.sipeed.com/soft/Lichee/zh/Nano-Doc-Backup/get_started/first_eat.html\">参考荔枝派</a><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959649.png\" alt=\"image-20220305205126696\"></p>\n</blockquote>\n<h1 id=\"六、Linux的移植\"><a href=\"#六、Linux的移植\" class=\"headerlink\" title=\"六、Linux的移植\"></a>六、<code>Linux</code>的移植</h1><h2 id=\"1、分区操作\"><a href=\"#1、分区操作\" class=\"headerlink\" title=\"1、分区操作\"></a>1、分区操作</h2><p>​    一个硬盘对于<code>Linux</code>来说，需要进行<strong>挂载</strong>命令是：<code>mount</code>，一般插上自动挂载），然后再能使用，然后需要<strong>卸载</strong>（命令：<code>umount</code>）才能操作，如格式化，分区之类的。我们借助了<code>Ubuntu</code>下图形化工具——<strong><code>Gparted</code></strong>，命令行进行下载就行了。</p>\n<p>​    然后，买到手的<code>sd</code>卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如<em><code>/dev/sdb contains a mounted filesystem</code></em>，我的建议，使用一个全0的映像文件写入<code>sd</code>卡，将前面的数据覆盖。</p>\n<p>​    之后便是分区了，将只有一个未分区的，且没有任何分区的<code>sd</code>卡连接<code>Ubuntu</code>。</p>\n<h3 id=\"分区1、boot\"><a href=\"#分区1、boot\" class=\"headerlink\" title=\"分区1、boot\"></a>分区1、<code>boot</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>1M</strong>，新大小为<strong>32M</strong>，文件系统为<strong><code>fat16</code></strong>，卷标就设置为<strong><code>boot</code></strong></p>\n<p>对于之前的<code>1M</code>，是留给<strong><code>uboot</code></strong>的，而且在<code>gparted</code>是看不到的</p>\n<p><strong>图片来源于网络</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958740.png\" alt=\"image-20220314221728714\"></p>\n</blockquote>\n<h3 id=\"分区2、rootfs\"><a href=\"#分区2、rootfs\" class=\"headerlink\" title=\"分区2、rootfs\"></a>分区2、<code>rootfs</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>0M</strong>，新大小为<strong>100M</strong>，文件系统为<strong><code>ext4</code></strong>，卷标就设置为<strong><code>rootfs</code></strong></p>\n<p><strong><em>图片来源于网络</em></strong></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958803.png\" alt=\"image-20220314221807562\"></p>\n</blockquote>\n<h3 id=\"最后的效果\"><a href=\"#最后的效果\" class=\"headerlink\" title=\"最后的效果\"></a>最后的效果</h3><p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958789.png\" alt=\"image-20220314221850652\"></p>\n<h2 id=\"2、编译Linux\"><a href=\"#2、编译Linux\" class=\"headerlink\" title=\"2、编译Linux\"></a>2、编译<strong><code>Linux</code></strong></h2><h3 id=\"更改设备树\"><a href=\"#更改设备树\" class=\"headerlink\" title=\"更改设备树\"></a>更改设备树</h3><h1 id=\"七、编译rootfs\"><a href=\"#七、编译rootfs\" class=\"headerlink\" title=\"七、编译rootfs\"></a>七、编译<code>rootfs</code></h1>","site":{"data":{}},"more":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>目前没有前言</p>\n<h1 id=\"二、准备工作\"><a href=\"#二、准备工作\" class=\"headerlink\" title=\"二、准备工作\"></a>二、准备工作</h1><p>准备太久了</p>\n<h1 id=\"三、PCB绘制\"><a href=\"#三、PCB绘制\" class=\"headerlink\" title=\"三、PCB绘制\"></a>三、PCB绘制</h1><p>不是我绘制的</p>\n<h1 id=\"四、下载编译工具链\"><a href=\"#四、下载编译工具链\" class=\"headerlink\" title=\"四、下载编译工具链\"></a>四、下载编译工具链</h1><p>我下的是<code>arm-linux-gnueabi-</code></p>\n<h1 id=\"五、u-boot移植\"><a href=\"#五、u-boot移植\" class=\"headerlink\" title=\"五、u-boot移植\"></a>五、u-boot移植</h1><h2 id=\"1、下载u-boot\"><a href=\"#1、下载u-boot\" class=\"headerlink\" title=\"1、下载u-boot\"></a>1、下载<code>u-boot</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Lichee-Pi/u-boot.git</span><br><span class=\"line\">git branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot</span><br><span class=\"line\">git checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、选取config配置\"><a href=\"#2、选取config配置\" class=\"headerlink\" title=\"2、选取config配置\"></a>2、选取<code>config</code>配置</h2><p>考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。</p>\n<h3 id=\"对几个config简单介绍：\"><a href=\"#对几个config简单介绍：\" class=\"headerlink\" title=\"对几个config简单介绍：\"></a><em>对几个config简单介绍：</em></h3><blockquote>\n<p><code>f1c100s_nano_uboot_defconfig</code>：<code>SPI Flash</code>支持版</p>\n<p><code>licheepi_nano_defconfig</code>：不带<code>SPI Flash</code>，从<code>TF</code>卡启动</p>\n<p><code>licheepi_nano_spiflash_defconfig</code>：从<code>SPI</code>设备启动</p>\n</blockquote>\n<p>其实上面三种我也分不清楚，我第一次采用的是 <code>licheepi_nano_defconfig</code>。我也找不到 <code>f1c100s_nano_uboot_defconfig</code>，但是在<a href=\"https://gitee.com/LicheePiNano/u-boot\">这</a>可以找到，这个是荔枝派的 <code>u-boot</code>，可能毕竟这款 <code>f1c100s</code>是国产芯片，在<code>GitHub</code>上面找不到。</p>\n<h3 id=\"选取config操作\"><a href=\"#选取config操作\" class=\"headerlink\" title=\"选取config操作\"></a>选取<code>config</code>操作</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~/u-boot  # 切换到 下载的 u-boot 的根目录</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数介绍：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ARCH=arm 是arm架构的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">licheepi_nano_defconfig 选取的默认config</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、可视化配置\"><a href=\"#3、可视化配置\" class=\"headerlink\" title=\"3、可视化配置\"></a>3、可视化配置</h2><h3 id=\"打开菜单命令\"><a href=\"#打开菜单命令\" class=\"headerlink\" title=\"打开菜单命令\"></a>打开菜单命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make ARCH=arm menuconfig</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">之后上下键进行移动</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">空格或者回车进行选择</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">左右可以选择下方菜单</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl+退格才能删除已经填入的默认参数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数讲解\"><a href=\"#参数讲解\" class=\"headerlink\" title=\"参数讲解\"></a>参数讲解</h3><p>注意下面这两个参数就行</p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958695.png\" alt=\"image-20220305195147976\"></p>\n<h4 id=\"boot-arguments\"><a href=\"#boot-arguments\" class=\"headerlink\" title=\"boot arguments\"></a><code>boot arguments</code></h4><blockquote>\n<ul>\n<li><code>console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw</code></li>\n</ul>\n<blockquote>\n<p><strong><code>console=ttyS0,115200</code></strong> 表示终端为ttyS0即串口0,波特率为115200；</p>\n<p><strong><code>panic=5</code> </strong>字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。</p>\n<p><code>rootwait</code> 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。</p>\n<p><strong>root=/dev/mmcblk0p2</strong> 表示根文件系统的位置在mmc的0:2分区处，<strong>/dev</strong>是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成<strong>mmcblk0p2</strong>设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。</p>\n<p><strong><code>earlyprintk</code></strong> 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"bootcmd\"><a href=\"#bootcmd\" class=\"headerlink\" title=\"bootcmd\"></a><code>bootcmd</code></h4><blockquote>\n<ul>\n<li><code>load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;</code></li>\n</ul>\n<blockquote>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959333.png\" alt=\"image-20220305195531843\"></p>\n</blockquote>\n</blockquote>\n<h2 id=\"、遇到问题不要慌\"><a href=\"#、遇到问题不要慌\" class=\"headerlink\" title=\"、遇到问题不要慌\"></a>、遇到问题不要慌</h2><h3 id=\"（1）execute-39-swig-39\"><a href=\"#（1）execute-39-swig-39\" class=\"headerlink\" title=\"（1）execute &#39;swig&#39;\"></a>（1）<code>execute &#39;swig&#39;</code></h3><blockquote>\n<p>没有<code>swig</code>这个东西，安装即可：<code>sudo apt install swig</code></p>\n<p><code>swig</code>：我从<a href=\"https://zh.wikipedia.org/wiki/SWIG\">网上</a>了解到是一个将<code>C/C++</code>的类封装成库，给<code>Python、Lua、PHP</code>等脚本语言调用。（题外话）</p>\n</blockquote>\n<h2 id=\"、参考链接\"><a href=\"#、参考链接\" class=\"headerlink\" title=\"、参考链接\"></a>、参考链接</h2><blockquote>\n<p><a href=\"https://cnblogs.com/twzy/p/14865952.html\">参考博客</a></p>\n<p><a href=\"https://wiki.sipeed.com/soft/Lichee/zh/Nano-Doc-Backup/get_started/first_eat.html\">参考荔枝派</a><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051959649.png\" alt=\"image-20220305205126696\"></p>\n</blockquote>\n<h1 id=\"六、Linux的移植\"><a href=\"#六、Linux的移植\" class=\"headerlink\" title=\"六、Linux的移植\"></a>六、<code>Linux</code>的移植</h1><h2 id=\"1、分区操作\"><a href=\"#1、分区操作\" class=\"headerlink\" title=\"1、分区操作\"></a>1、分区操作</h2><p>​    一个硬盘对于<code>Linux</code>来说，需要进行<strong>挂载</strong>命令是：<code>mount</code>，一般插上自动挂载），然后再能使用，然后需要<strong>卸载</strong>（命令：<code>umount</code>）才能操作，如格式化，分区之类的。我们借助了<code>Ubuntu</code>下图形化工具——<strong><code>Gparted</code></strong>，命令行进行下载就行了。</p>\n<p>​    然后，买到手的<code>sd</code>卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如<em><code>/dev/sdb contains a mounted filesystem</code></em>，我的建议，使用一个全0的映像文件写入<code>sd</code>卡，将前面的数据覆盖。</p>\n<p>​    之后便是分区了，将只有一个未分区的，且没有任何分区的<code>sd</code>卡连接<code>Ubuntu</code>。</p>\n<h3 id=\"分区1、boot\"><a href=\"#分区1、boot\" class=\"headerlink\" title=\"分区1、boot\"></a>分区1、<code>boot</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>1M</strong>，新大小为<strong>32M</strong>，文件系统为<strong><code>fat16</code></strong>，卷标就设置为<strong><code>boot</code></strong></p>\n<p>对于之前的<code>1M</code>，是留给<strong><code>uboot</code></strong>的，而且在<code>gparted</code>是看不到的</p>\n<p><strong>图片来源于网络</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958740.png\" alt=\"image-20220314221728714\"></p>\n</blockquote>\n<h3 id=\"分区2、rootfs\"><a href=\"#分区2、rootfs\" class=\"headerlink\" title=\"分区2、rootfs\"></a>分区2、<code>rootfs</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>0M</strong>，新大小为<strong>100M</strong>，文件系统为<strong><code>ext4</code></strong>，卷标就设置为<strong><code>rootfs</code></strong></p>\n<p><strong><em>图片来源于网络</em></strong></p>\n<p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958803.png\" alt=\"image-20220314221807562\"></p>\n</blockquote>\n<h3 id=\"最后的效果\"><a href=\"#最后的效果\" class=\"headerlink\" title=\"最后的效果\"></a>最后的效果</h3><p><img src=\"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051958789.png\" alt=\"image-20220314221850652\"></p>\n<h2 id=\"2、编译Linux\"><a href=\"#2、编译Linux\" class=\"headerlink\" title=\"2、编译Linux\"></a>2、编译<strong><code>Linux</code></strong></h2><h3 id=\"更改设备树\"><a href=\"#更改设备树\" class=\"headerlink\" title=\"更改设备树\"></a>更改设备树</h3><h1 id=\"七、编译rootfs\"><a href=\"#七、编译rootfs\" class=\"headerlink\" title=\"七、编译rootfs\"></a>七、编译<code>rootfs</code></h1>"},{"title":"英语一单词","excerpt":"英语一单词思维导图","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205211516308.png","mathjax":true,"date":"2022-05-21T06:47:58.000Z","layout":"words","_content":"\n{% pullquote mindmap mindmap-md %}\n- 考研英语一单词\n  - deprive\n    - deprive 剥夺\n    - derive 取得\n  - describe\n    - describe 形容，描述\n    - description 描述，形容\n{% endpullquote %}\n\n\n","source":"_posts/英语一单词.md","raw":"---\ntitle: 英语一单词\ntags: \n- 英语\n- 考研\nexcerpt: 英语一单词思维导图\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205211516308.png\ncategories: 英语\nmathjax: true\ndate: 2022-05-21 14:47:58\nlayout: \"words\"\n---\n\n{% pullquote mindmap mindmap-md %}\n- 考研英语一单词\n  - deprive\n    - deprive 剥夺\n    - derive 取得\n  - describe\n    - describe 形容，描述\n    - description 描述，形容\n{% endpullquote %}\n\n\n","slug":"英语一单词","published":1,"updated":"2022-05-21T07:19:16.945Z","_id":"cl3fiehfq0000qcu54zs15r73","comments":1,"photos":[],"link":"","content":"<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>考研英语一单词<ul>\n<li>deprive<ul>\n<li>deprive 剥夺</li>\n<li>derive 取得</li>\n</ul>\n</li>\n<li>describe<ul>\n<li>describe 形容，描述</li>\n<li>description 描述，形容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>考研英语一单词<ul>\n<li>deprive<ul>\n<li>deprive 剥夺</li>\n<li>derive 取得</li>\n</ul>\n</li>\n<li>describe<ul>\n<li>describe 形容，描述</li>\n<li>description 描述，形容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl3e84y1o000128u5a1nobql6","category_id":"cl3e84y1u000428u5dq7ndphr","_id":"cl3e84y23000h28u5gu1s6xtl"},{"post_id":"cl3e84y1s000328u5edwq8cr0","category_id":"cl3e84y20000c28u51db14ujx","_id":"cl3e84y25000l28u58zqmbnak"},{"post_id":"cl3e84y1z000b28u51okhgv23","category_id":"cl3e84y27000q28u5b0g36al5","_id":"cl3e84y29000w28u50olh2nkc"},{"post_id":"cl3e84y21000f28u54y2f17l1","category_id":"cl3e84y27000q28u5b0g36al5","_id":"cl3e84y2a001028u59yhw3p6t"},{"post_id":"cl3e84y22000g28u5067z03w7","category_id":"cl3e84y27000q28u5b0g36al5","_id":"cl3e84y2a001428u5gs438qk4"},{"post_id":"cl3e84y24000k28u500co67z2","category_id":"cl3e84y2a000z28u539f687da","_id":"cl3e84y2b001828u50ylvhqqe"},{"post_id":"cl3e84y1w000728u5hwsjbblu","category_id":"cl3e84y23000i28u54t6t77o5","_id":"cl3e84y2c001c28u5hytt49sd"},{"post_id":"cl3e84y1w000728u5hwsjbblu","category_id":"cl3e84y2a001528u51o5ndval","_id":"cl3e84y2d001e28u525m12vrp"},{"post_id":"cl3e84y1y000928u5106mbux9","category_id":"cl3e84y23000i28u54t6t77o5","_id":"cl3e84y2d001g28u5dak79sb4"},{"post_id":"cl3e84y1y000928u5106mbux9","category_id":"cl3e84y2a001528u51o5ndval","_id":"cl3e84y2d001j28u5fmp0923b"},{"post_id":"cl3e84y2i002228u56ps5gruo","category_id":"cl3e84y2a000z28u539f687da","_id":"cl3e84y2n002728u5fpwcelx5"},{"post_id":"cl3e84y2j002328u56vk254zw","category_id":"cl3e84y2a000z28u539f687da","_id":"cl3e84y2o002828u5h2tegxaz"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","category_id":"cl3e84y2a000z28u539f687da","_id":"cl3e84y2p002b28u5fiyp78vu"},{"post_id":"cl3e84y2n002628u5h27jhre4","category_id":"cl3e84y2o002a28u5bknd9f1o","_id":"cl3e84y2q002g28u563vrdppf"},{"post_id":"cl3fiehfq0000qcu54zs15r73","category_id":"cl3fj8xvr0000lku595n4fdqs","_id":"cl3fj8xvz0004lku502fm69ob"}],"PostTag":[{"post_id":"cl3e84y1o000128u5a1nobql6","tag_id":"cl3e84y1v000528u5g52a3oh1","_id":"cl3e84y27000o28u59zlg4umf"},{"post_id":"cl3e84y1o000128u5a1nobql6","tag_id":"cl3e84y20000d28u57mr647zi","_id":"cl3e84y27000p28u51krldz1j"},{"post_id":"cl3e84y1o000128u5a1nobql6","tag_id":"cl3e84y24000j28u5eqr1arwj","_id":"cl3e84y28000s28u55xy41wsi"},{"post_id":"cl3e84y1s000328u5edwq8cr0","tag_id":"cl3e84y25000n28u5133w4a2o","_id":"cl3e84y29000y28u5gqwyac4j"},{"post_id":"cl3e84y1s000328u5edwq8cr0","tag_id":"cl3e84y28000r28u53s977thd","_id":"cl3e84y2a001128u55mmrecb9"},{"post_id":"cl3e84y1s000328u5edwq8cr0","tag_id":"cl3e84y28000u28u5bzlpb0u6","_id":"cl3e84y2a001328u577y6crhv"},{"post_id":"cl3e84y1w000728u5hwsjbblu","tag_id":"cl3e84y29000x28u5ehr8gidf","_id":"cl3e84y2b001728u5gt7ebzxi"},{"post_id":"cl3e84y1w000728u5hwsjbblu","tag_id":"cl3e84y2a001228u5ev61hl8b","_id":"cl3e84y2c001a28u5101xgiul"},{"post_id":"cl3e84y1y000928u5106mbux9","tag_id":"cl3e84y29000x28u5ehr8gidf","_id":"cl3e84y2d001f28u56v1k5ch8"},{"post_id":"cl3e84y1y000928u5106mbux9","tag_id":"cl3e84y2a001228u5ev61hl8b","_id":"cl3e84y2d001h28u54qnb3dov"},{"post_id":"cl3e84y1z000b28u51okhgv23","tag_id":"cl3e84y2c001d28u56ql61f8a","_id":"cl3e84y2e001m28u55e33cny4"},{"post_id":"cl3e84y1z000b28u51okhgv23","tag_id":"cl3e84y2d001i28u5b1gk35ic","_id":"cl3e84y2e001n28u5hnppbzgw"},{"post_id":"cl3e84y1z000b28u51okhgv23","tag_id":"cl3e84y2d001k28u5b974fcva","_id":"cl3e84y2e001p28u59d3ugi3z"},{"post_id":"cl3e84y21000f28u54y2f17l1","tag_id":"cl3e84y2c001d28u56ql61f8a","_id":"cl3e84y2f001s28u5dpygdwe9"},{"post_id":"cl3e84y21000f28u54y2f17l1","tag_id":"cl3e84y2e001o28u54f57anx0","_id":"cl3e84y2f001t28u5g3q1fkir"},{"post_id":"cl3e84y21000f28u54y2f17l1","tag_id":"cl3e84y2d001k28u5b974fcva","_id":"cl3e84y2g001v28u54skeh8z3"},{"post_id":"cl3e84y22000g28u5067z03w7","tag_id":"cl3e84y2f001r28u55lm2cm0i","_id":"cl3e84y2g001w28u56ocn6l83"},{"post_id":"cl3e84y24000k28u500co67z2","tag_id":"cl3e84y2f001u28u50ttl35ea","_id":"cl3e84y2g001z28u581wl7kc7"},{"post_id":"cl3e84y24000k28u500co67z2","tag_id":"cl3e84y2g001x28u57if6bb9l","_id":"cl3e84y2g002028u5a2my6wzj"},{"post_id":"cl3e84y24000k28u500co67z2","tag_id":"cl3e84y2g001y28u57543glu3","_id":"cl3e84y2g002128u5fzqxe5io"},{"post_id":"cl3e84y2i002228u56ps5gruo","tag_id":"cl3e84y2f001u28u50ttl35ea","_id":"cl3e84y2p002d28u5ffe44duw"},{"post_id":"cl3e84y2i002228u56ps5gruo","tag_id":"cl3e84y2g001x28u57if6bb9l","_id":"cl3e84y2p002e28u5h7g81mv1"},{"post_id":"cl3e84y2i002228u56ps5gruo","tag_id":"cl3e84y2k002428u53inh4vsj","_id":"cl3e84y2q002h28u50v2xg7sb"},{"post_id":"cl3e84y2i002228u56ps5gruo","tag_id":"cl3e84y2o002928u5bjushli3","_id":"cl3e84y2q002i28u5ahvphpom"},{"post_id":"cl3e84y2j002328u56vk254zw","tag_id":"cl3e84y2f001u28u50ttl35ea","_id":"cl3e84y2q002k28u5axtf51y7"},{"post_id":"cl3e84y2j002328u56vk254zw","tag_id":"cl3e84y2p002c28u5486gg9hz","_id":"cl3e84y2q002l28u51b6m65gs"},{"post_id":"cl3e84y2j002328u56vk254zw","tag_id":"cl3e84y2g001x28u57if6bb9l","_id":"cl3e84y2r002n28u5a4bjbdnw"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2f001u28u50ttl35ea","_id":"cl3e84y2s002r28u55hru33r6"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2p002f28u51cdi4dby","_id":"cl3e84y2s002s28u5g4nb051c"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2k002428u53inh4vsj","_id":"cl3e84y2s002u28u54r83g4il"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2r002m28u5f5ks0w48","_id":"cl3e84y2s002v28u5hxvn8681"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2r002o28u5gbex1510","_id":"cl3e84y2t002x28u5aj7dh54t"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2r002p28u5h1hb1sme","_id":"cl3e84y2t002y28u5edok9q9x"},{"post_id":"cl3e84y2k002528u5cbqf6zwr","tag_id":"cl3e84y2g001x28u57if6bb9l","_id":"cl3e84y2t002z28u5bys83gaz"},{"post_id":"cl3e84y2n002628u5h27jhre4","tag_id":"cl3e84y2r002q28u51x450o9f","_id":"cl3e84y2t003028u53n71a7q8"},{"post_id":"cl3e84y2n002628u5h27jhre4","tag_id":"cl3e84y2s002t28u5cnzj7sie","_id":"cl3e84y2t003128u5axqe6xa5"},{"post_id":"cl3e84y2n002628u5h27jhre4","tag_id":"cl3e84y2s002w28u52n6b35dv","_id":"cl3e84y2t003228u5704g87ec"},{"post_id":"cl3fiehfq0000qcu54zs15r73","tag_id":"cl3fj8xvx0001lku5adhv0jtl","_id":"cl3fj8xvy0002lku5ce24a9t7"},{"post_id":"cl3fiehfq0000qcu54zs15r73","tag_id":"cl3e84y2g001x28u57if6bb9l","_id":"cl3fj8xvz0003lku5hpio99x6"}],"Tag":[{"name":"C++","_id":"cl3e84y1v000528u5g52a3oh1"},{"name":"λ","_id":"cl3e84y20000d28u57mr647zi"},{"name":"lambda","_id":"cl3e84y24000j28u5eqr1arwj"},{"name":"前端","_id":"cl3e84y25000n28u5133w4a2o"},{"name":"GitHub","_id":"cl3e84y28000r28u53s977thd"},{"name":"Hexo","_id":"cl3e84y28000u28u5bzlpb0u6"},{"name":"Python","_id":"cl3e84y29000x28u5ehr8gidf"},{"name":"爬虫","_id":"cl3e84y2a001228u5ev61hl8b"},{"name":"计算机妙招","_id":"cl3e84y2c001d28u56ql61f8a"},{"name":"注册表","_id":"cl3e84y2d001i28u5b1gk35ic"},{"name":"Windows","_id":"cl3e84y2d001k28u5b974fcva"},{"name":"局域网共享","_id":"cl3e84y2e001o28u54f57anx0"},{"name":"图床","_id":"cl3e84y2f001r28u55lm2cm0i"},{"name":"数据结构","_id":"cl3e84y2f001u28u50ttl35ea"},{"name":"考研","_id":"cl3e84y2g001x28u57if6bb9l"},{"name":"图","_id":"cl3e84y2g001y28u57543glu3"},{"name":"字符串","_id":"cl3e84y2k002428u53inh4vsj"},{"name":"KMP","_id":"cl3e84y2o002928u5bjushli3"},{"name":"排序","_id":"cl3e84y2p002c28u5486gg9hz"},{"name":"红黑树","_id":"cl3e84y2p002f28u51cdi4dby"},{"name":"查找","_id":"cl3e84y2r002m28u5f5ks0w48"},{"name":"平衡二叉树","_id":"cl3e84y2r002o28u5gbex1510"},{"name":"二分法","_id":"cl3e84y2r002p28u5h1hb1sme"},{"name":"Linux","_id":"cl3e84y2r002q28u51x450o9f"},{"name":"Uboot","_id":"cl3e84y2s002t28u5cnzj7sie"},{"name":"编译","_id":"cl3e84y2s002w28u52n6b35dv"},{"name":"标签，可以多个","_id":"cl3fiehg10002qcu5hfjebbw0"},{"name":"英语","_id":"cl3fj8xvx0001lku5adhv0jtl"}]}}